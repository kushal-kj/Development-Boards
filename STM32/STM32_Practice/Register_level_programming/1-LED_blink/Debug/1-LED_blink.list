
1-LED_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000340  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000340  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001036a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000034c  00000000  00000000  000103ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000106  00000000  00000000  000106f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00010800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000033  00000000  00000000  00010850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dab7  00000000  00000000  00010883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000693  00000000  00000000  0001e33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004edb3  00000000  00000000  0001e9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000080  00000000  00000000  0006d780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  0006d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000320 	.word	0x08000320

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000320 	.word	0x08000320

080001d4 <delayTime>:
#include "stm32f401xe.h"


//create function to wait for a specified amount of time
void delayTime(int moment)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	volatile int i,j;
	for(i=0;i<moment;++i)
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e005      	b.n	80001ee <delayTime+0x1a>
	{
		j++;
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60bb      	str	r3, [r7, #8]
	for(i=0;i<moment;++i)
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	3301      	adds	r3, #1
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	687a      	ldr	r2, [r7, #4]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	dcf5      	bgt.n	80001e2 <delayTime+0xe>
	}
}
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	3714      	adds	r7, #20
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
	...

08000204 <main>:


int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    /* Loop forever */
	//Enable the GPIO clock for Port C using the AHB and RCC
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOCEN;		//1U<<2
 8000208:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <main+0x74>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a1a      	ldr	r2, [pc, #104]	; (8000278 <main+0x74>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6313      	str	r3, [r2, #48]	; 0x30


	//Set any control registers for PORTC Pin6

	//MODE REGISTER - SET PIN6 TO OUTPUT MODE- 01
	GPIOC->MODER &=~(GPIO_MODER_MODER6_1);
 8000214:	4b19      	ldr	r3, [pc, #100]	; (800027c <main+0x78>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a18      	ldr	r2, [pc, #96]	; (800027c <main+0x78>)
 800021a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800021e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=GPIO_MODER_MODER6_0;
 8000220:	4b16      	ldr	r3, [pc, #88]	; (800027c <main+0x78>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a15      	ldr	r2, [pc, #84]	; (800027c <main+0x78>)
 8000226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800022a:	6013      	str	r3, [r2, #0]

	//OTYPE REGISTER
	GPIOC->OTYPER &=~(GPIO_OTYPER_OT6);
 800022c:	4b13      	ldr	r3, [pc, #76]	; (800027c <main+0x78>)
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	4a12      	ldr	r2, [pc, #72]	; (800027c <main+0x78>)
 8000232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000236:	6053      	str	r3, [r2, #4]

	//OSPEED REGISTER
	GPIOC->OSPEEDR |=GPIO_OSPEEDER_OSPEEDR6;
 8000238:	4b10      	ldr	r3, [pc, #64]	; (800027c <main+0x78>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a0f      	ldr	r2, [pc, #60]	; (800027c <main+0x78>)
 800023e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000242:	6093      	str	r3, [r2, #8]

	//PUPDR REGISTER
	GPIOC->PUPDR&=~(GPIO_PUPDR_PUPDR6);
 8000244:	4b0d      	ldr	r3, [pc, #52]	; (800027c <main+0x78>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a0c      	ldr	r2, [pc, #48]	; (800027c <main+0x78>)
 800024a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800024e:	60d3      	str	r3, [r2, #12]
	while(1)

	{
		//Turn ON LED
		//BSRR REGISTER TO SET THE BIT
		GPIOC->BSRR |=GPIO_BSRR_BS6;	//or (1U<<6)
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <main+0x78>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a09      	ldr	r2, [pc, #36]	; (800027c <main+0x78>)
 8000256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025a:	6193      	str	r3, [r2, #24]
		//wait
		delayTime(1000000);
 800025c:	4808      	ldr	r0, [pc, #32]	; (8000280 <main+0x7c>)
 800025e:	f7ff ffb9 	bl	80001d4 <delayTime>

		//Turn OFF LED
		//BRR REGISTER TO RESET THE BIT
		GPIOC->BSRR |=GPIO_BRR_BR6;		//or (iU<<22)
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <main+0x78>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a05      	ldr	r2, [pc, #20]	; (800027c <main+0x78>)
 8000268:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800026c:	6193      	str	r3, [r2, #24]
		//wait
		delayTime(1000000);
 800026e:	4804      	ldr	r0, [pc, #16]	; (8000280 <main+0x7c>)
 8000270:	f7ff ffb0 	bl	80001d4 <delayTime>
		GPIOC->BSRR |=GPIO_BSRR_BS6;	//or (1U<<6)
 8000274:	e7ec      	b.n	8000250 <main+0x4c>
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40020800 	.word	0x40020800
 8000280:	000f4240 	.word	0x000f4240

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	; (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 f811 	bl	80002d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ffa5 	bl	8000204 <main>

080002ba <LoopForever>:

LoopForever:
  b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	08000340 	.word	0x08000340
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC_IRQHandler>
	...

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	4d0d      	ldr	r5, [pc, #52]	; (8000310 <__libc_init_array+0x38>)
 80002dc:	4c0d      	ldr	r4, [pc, #52]	; (8000314 <__libc_init_array+0x3c>)
 80002de:	1b64      	subs	r4, r4, r5
 80002e0:	10a4      	asrs	r4, r4, #2
 80002e2:	2600      	movs	r6, #0
 80002e4:	42a6      	cmp	r6, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	4d0b      	ldr	r5, [pc, #44]	; (8000318 <__libc_init_array+0x40>)
 80002ea:	4c0c      	ldr	r4, [pc, #48]	; (800031c <__libc_init_array+0x44>)
 80002ec:	f000 f818 	bl	8000320 <_init>
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	2600      	movs	r6, #0
 80002f6:	42a6      	cmp	r6, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000300:	4798      	blx	r3
 8000302:	3601      	adds	r6, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	f855 3b04 	ldr.w	r3, [r5], #4
 800030a:	4798      	blx	r3
 800030c:	3601      	adds	r6, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	08000338 	.word	0x08000338
 800031c:	0800033c 	.word	0x0800033c

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
