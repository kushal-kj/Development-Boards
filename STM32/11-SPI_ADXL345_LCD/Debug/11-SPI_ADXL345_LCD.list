
11-SPI_ADXL345_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004268  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004484  08004484  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800448c  0800448c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000006c  08004500  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004500  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090f9  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ce  00000000  00000000  000291d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000790  00000000  00000000  0002b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001af2  00000000  00000000  0002bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc12  00000000  00000000  0002d70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086c52  00000000  00000000  0003931c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e38  00000000  00000000  000bff70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000c2da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043f0 	.word	0x080043f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080043f0 	.word	0x080043f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b970 	b.w	8000be4 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9e08      	ldr	r6, [sp, #32]
 8000922:	460d      	mov	r5, r1
 8000924:	4604      	mov	r4, r0
 8000926:	460f      	mov	r7, r1
 8000928:	2b00      	cmp	r3, #0
 800092a:	d14a      	bne.n	80009c2 <__udivmoddi4+0xa6>
 800092c:	428a      	cmp	r2, r1
 800092e:	4694      	mov	ip, r2
 8000930:	d965      	bls.n	80009fe <__udivmoddi4+0xe2>
 8000932:	fab2 f382 	clz	r3, r2
 8000936:	b143      	cbz	r3, 800094a <__udivmoddi4+0x2e>
 8000938:	fa02 fc03 	lsl.w	ip, r2, r3
 800093c:	f1c3 0220 	rsb	r2, r3, #32
 8000940:	409f      	lsls	r7, r3
 8000942:	fa20 f202 	lsr.w	r2, r0, r2
 8000946:	4317      	orrs	r7, r2
 8000948:	409c      	lsls	r4, r3
 800094a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800094e:	fa1f f58c 	uxth.w	r5, ip
 8000952:	fbb7 f1fe 	udiv	r1, r7, lr
 8000956:	0c22      	lsrs	r2, r4, #16
 8000958:	fb0e 7711 	mls	r7, lr, r1, r7
 800095c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000960:	fb01 f005 	mul.w	r0, r1, r5
 8000964:	4290      	cmp	r0, r2
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x62>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000970:	f080 811c 	bcs.w	8000bac <__udivmoddi4+0x290>
 8000974:	4290      	cmp	r0, r2
 8000976:	f240 8119 	bls.w	8000bac <__udivmoddi4+0x290>
 800097a:	3902      	subs	r1, #2
 800097c:	4462      	add	r2, ip
 800097e:	1a12      	subs	r2, r2, r0
 8000980:	b2a4      	uxth	r4, r4
 8000982:	fbb2 f0fe 	udiv	r0, r2, lr
 8000986:	fb0e 2210 	mls	r2, lr, r0, r2
 800098a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800098e:	fb00 f505 	mul.w	r5, r0, r5
 8000992:	42a5      	cmp	r5, r4
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x90>
 8000996:	eb1c 0404 	adds.w	r4, ip, r4
 800099a:	f100 32ff 	add.w	r2, r0, #4294967295
 800099e:	f080 8107 	bcs.w	8000bb0 <__udivmoddi4+0x294>
 80009a2:	42a5      	cmp	r5, r4
 80009a4:	f240 8104 	bls.w	8000bb0 <__udivmoddi4+0x294>
 80009a8:	4464      	add	r4, ip
 80009aa:	3802      	subs	r0, #2
 80009ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	2100      	movs	r1, #0
 80009b4:	b11e      	cbz	r6, 80009be <__udivmoddi4+0xa2>
 80009b6:	40dc      	lsrs	r4, r3
 80009b8:	2300      	movs	r3, #0
 80009ba:	e9c6 4300 	strd	r4, r3, [r6]
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0xbc>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	f000 80ed 	beq.w	8000ba6 <__udivmoddi4+0x28a>
 80009cc:	2100      	movs	r1, #0
 80009ce:	e9c6 0500 	strd	r0, r5, [r6]
 80009d2:	4608      	mov	r0, r1
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	fab3 f183 	clz	r1, r3
 80009dc:	2900      	cmp	r1, #0
 80009de:	d149      	bne.n	8000a74 <__udivmoddi4+0x158>
 80009e0:	42ab      	cmp	r3, r5
 80009e2:	d302      	bcc.n	80009ea <__udivmoddi4+0xce>
 80009e4:	4282      	cmp	r2, r0
 80009e6:	f200 80f8 	bhi.w	8000bda <__udivmoddi4+0x2be>
 80009ea:	1a84      	subs	r4, r0, r2
 80009ec:	eb65 0203 	sbc.w	r2, r5, r3
 80009f0:	2001      	movs	r0, #1
 80009f2:	4617      	mov	r7, r2
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d0e2      	beq.n	80009be <__udivmoddi4+0xa2>
 80009f8:	e9c6 4700 	strd	r4, r7, [r6]
 80009fc:	e7df      	b.n	80009be <__udivmoddi4+0xa2>
 80009fe:	b902      	cbnz	r2, 8000a02 <__udivmoddi4+0xe6>
 8000a00:	deff      	udf	#255	; 0xff
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 8090 	bne.w	8000b2c <__udivmoddi4+0x210>
 8000a0c:	1a8a      	subs	r2, r1, r2
 8000a0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	2101      	movs	r1, #1
 8000a18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a20:	0c22      	lsrs	r2, r4, #16
 8000a22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a26:	fb0e f005 	mul.w	r0, lr, r5
 8000a2a:	4290      	cmp	r0, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x124>
 8000a2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a36:	d202      	bcs.n	8000a3e <__udivmoddi4+0x122>
 8000a38:	4290      	cmp	r0, r2
 8000a3a:	f200 80cb 	bhi.w	8000bd4 <__udivmoddi4+0x2b8>
 8000a3e:	4645      	mov	r5, r8
 8000a40:	1a12      	subs	r2, r2, r0
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a48:	fb07 2210 	mls	r2, r7, r0, r2
 8000a4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a50:	fb0e fe00 	mul.w	lr, lr, r0
 8000a54:	45a6      	cmp	lr, r4
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x14e>
 8000a58:	eb1c 0404 	adds.w	r4, ip, r4
 8000a5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a60:	d202      	bcs.n	8000a68 <__udivmoddi4+0x14c>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f200 80bb 	bhi.w	8000bde <__udivmoddi4+0x2c2>
 8000a68:	4610      	mov	r0, r2
 8000a6a:	eba4 040e 	sub.w	r4, r4, lr
 8000a6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a72:	e79f      	b.n	80009b4 <__udivmoddi4+0x98>
 8000a74:	f1c1 0720 	rsb	r7, r1, #32
 8000a78:	408b      	lsls	r3, r1
 8000a7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a82:	fa05 f401 	lsl.w	r4, r5, r1
 8000a86:	fa20 f307 	lsr.w	r3, r0, r7
 8000a8a:	40fd      	lsrs	r5, r7
 8000a8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a90:	4323      	orrs	r3, r4
 8000a92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a96:	fa1f fe8c 	uxth.w	lr, ip
 8000a9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a9e:	0c1c      	lsrs	r4, r3, #16
 8000aa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aa4:	fb08 f50e 	mul.w	r5, r8, lr
 8000aa8:	42a5      	cmp	r5, r4
 8000aaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000aae:	fa00 f001 	lsl.w	r0, r0, r1
 8000ab2:	d90b      	bls.n	8000acc <__udivmoddi4+0x1b0>
 8000ab4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000abc:	f080 8088 	bcs.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac0:	42a5      	cmp	r5, r4
 8000ac2:	f240 8085 	bls.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aca:	4464      	add	r4, ip
 8000acc:	1b64      	subs	r4, r4, r5
 8000ace:	b29d      	uxth	r5, r3
 8000ad0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ad4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ad8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000adc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x1da>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000aec:	d26c      	bcs.n	8000bc8 <__udivmoddi4+0x2ac>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	d96a      	bls.n	8000bc8 <__udivmoddi4+0x2ac>
 8000af2:	3b02      	subs	r3, #2
 8000af4:	4464      	add	r4, ip
 8000af6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000afa:	fba3 9502 	umull	r9, r5, r3, r2
 8000afe:	eba4 040e 	sub.w	r4, r4, lr
 8000b02:	42ac      	cmp	r4, r5
 8000b04:	46c8      	mov	r8, r9
 8000b06:	46ae      	mov	lr, r5
 8000b08:	d356      	bcc.n	8000bb8 <__udivmoddi4+0x29c>
 8000b0a:	d053      	beq.n	8000bb4 <__udivmoddi4+0x298>
 8000b0c:	b156      	cbz	r6, 8000b24 <__udivmoddi4+0x208>
 8000b0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b12:	eb64 040e 	sbc.w	r4, r4, lr
 8000b16:	fa04 f707 	lsl.w	r7, r4, r7
 8000b1a:	40ca      	lsrs	r2, r1
 8000b1c:	40cc      	lsrs	r4, r1
 8000b1e:	4317      	orrs	r7, r2
 8000b20:	e9c6 7400 	strd	r7, r4, [r6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2c:	f1c3 0120 	rsb	r1, r3, #32
 8000b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b34:	fa20 f201 	lsr.w	r2, r0, r1
 8000b38:	fa25 f101 	lsr.w	r1, r5, r1
 8000b3c:	409d      	lsls	r5, r3
 8000b3e:	432a      	orrs	r2, r5
 8000b40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b44:	fa1f fe8c 	uxth.w	lr, ip
 8000b48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b50:	0c11      	lsrs	r1, r2, #16
 8000b52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b56:	fb00 f50e 	mul.w	r5, r0, lr
 8000b5a:	428d      	cmp	r5, r1
 8000b5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x258>
 8000b62:	eb1c 0101 	adds.w	r1, ip, r1
 8000b66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b6a:	d22f      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b6c:	428d      	cmp	r5, r1
 8000b6e:	d92d      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000b70:	3802      	subs	r0, #2
 8000b72:	4461      	add	r1, ip
 8000b74:	1b49      	subs	r1, r1, r5
 8000b76:	b292      	uxth	r2, r2
 8000b78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b84:	fb05 f10e 	mul.w	r1, r5, lr
 8000b88:	4291      	cmp	r1, r2
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x282>
 8000b8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b94:	d216      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b96:	4291      	cmp	r1, r2
 8000b98:	d914      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b9a:	3d02      	subs	r5, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a52      	subs	r2, r2, r1
 8000ba0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ba4:	e738      	b.n	8000a18 <__udivmoddi4+0xfc>
 8000ba6:	4631      	mov	r1, r6
 8000ba8:	4630      	mov	r0, r6
 8000baa:	e708      	b.n	80009be <__udivmoddi4+0xa2>
 8000bac:	4639      	mov	r1, r7
 8000bae:	e6e6      	b.n	800097e <__udivmoddi4+0x62>
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	e6fb      	b.n	80009ac <__udivmoddi4+0x90>
 8000bb4:	4548      	cmp	r0, r9
 8000bb6:	d2a9      	bcs.n	8000b0c <__udivmoddi4+0x1f0>
 8000bb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	e7a3      	b.n	8000b0c <__udivmoddi4+0x1f0>
 8000bc4:	4645      	mov	r5, r8
 8000bc6:	e7ea      	b.n	8000b9e <__udivmoddi4+0x282>
 8000bc8:	462b      	mov	r3, r5
 8000bca:	e794      	b.n	8000af6 <__udivmoddi4+0x1da>
 8000bcc:	4640      	mov	r0, r8
 8000bce:	e7d1      	b.n	8000b74 <__udivmoddi4+0x258>
 8000bd0:	46d0      	mov	r8, sl
 8000bd2:	e77b      	b.n	8000acc <__udivmoddi4+0x1b0>
 8000bd4:	3d02      	subs	r5, #2
 8000bd6:	4462      	add	r2, ip
 8000bd8:	e732      	b.n	8000a40 <__udivmoddi4+0x124>
 8000bda:	4608      	mov	r0, r1
 8000bdc:	e70a      	b.n	80009f4 <__udivmoddi4+0xd8>
 8000bde:	4464      	add	r4, ip
 8000be0:	3802      	subs	r0, #2
 8000be2:	e742      	b.n	8000a6a <__udivmoddi4+0x14e>

08000be4 <__aeabi_idiv0>:
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000bf2:	4a38      	ldr	r2, [pc, #224]	; (8000cd4 <HD44780_Init+0xec>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <HD44780_Init+0xf0>)
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <HD44780_Init+0xf4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <HD44780_Init+0xec>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d907      	bls.n	8000c1c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <HD44780_Init+0xf4>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <HD44780_Init+0xf4>)
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e006      	b.n	8000c2a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <HD44780_Init+0xf4>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <HD44780_Init+0xf4>)
 8000c28:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000c2a:	f000 f9a5 	bl	8000f78 <DelayInit>
  HAL_Delay(50);
 8000c2e:	2032      	movs	r0, #50	; 0x32
 8000c30:	f000 fe1a 	bl	8001868 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HD44780_Init+0xf0>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f963 	bl	8000f04 <ExpanderWrite>
  HAL_Delay(1000);
 8000c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c42:	f000 fe11 	bl	8001868 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000c46:	2030      	movs	r0, #48	; 0x30
 8000c48:	f000 f94b 	bl	8000ee2 <Write4Bits>
  DelayUS(4500);
 8000c4c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c50:	f000 f9bc 	bl	8000fcc <DelayUS>

  Write4Bits(0x03 << 4);
 8000c54:	2030      	movs	r0, #48	; 0x30
 8000c56:	f000 f944 	bl	8000ee2 <Write4Bits>
  DelayUS(4500);
 8000c5a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c5e:	f000 f9b5 	bl	8000fcc <DelayUS>

  Write4Bits(0x03 << 4);
 8000c62:	2030      	movs	r0, #48	; 0x30
 8000c64:	f000 f93d 	bl	8000ee2 <Write4Bits>
  DelayUS(4500);
 8000c68:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c6c:	f000 f9ae 	bl	8000fcc <DelayUS>

  Write4Bits(0x02 << 4);
 8000c70:	2020      	movs	r0, #32
 8000c72:	f000 f936 	bl	8000ee2 <Write4Bits>
  DelayUS(100);
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f000 f9a8 	bl	8000fcc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HD44780_Init+0xf4>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	f043 0320 	orr.w	r3, r3, #32
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f8ee 	bl	8000e68 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HD44780_Init+0xf8>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000c92:	f000 f875 	bl	8000d80 <HD44780_Display>
  HD44780_Clear();
 8000c96:	f000 f82b 	bl	8000cf0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HD44780_Init+0xfc>)
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HD44780_Init+0xfc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f8dc 	bl	8000e68 <SendCommand>
  DelayUS(4500);
 8000cb0:	f241 1094 	movw	r0, #4500	; 0x1194
 8000cb4:	f000 f98a 	bl	8000fcc <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000cb8:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <HD44780_Init+0x100>)
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f876 	bl	8000dac <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000cc0:	490a      	ldr	r1, [pc, #40]	; (8000cec <HD44780_Init+0x104>)
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 f872 	bl	8000dac <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000cc8:	f000 f81d 	bl	8000d06 <HD44780_Home>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000008b 	.word	0x2000008b
 8000cd8:	2000008c 	.word	0x2000008c
 8000cdc:	20000088 	.word	0x20000088
 8000ce0:	20000089 	.word	0x20000089
 8000ce4:	2000008a 	.word	0x2000008a
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HD44780_Clear>:

void HD44780_Clear()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f000 f8b7 	bl	8000e68 <SendCommand>
  DelayUS(2000);
 8000cfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cfe:	f000 f965 	bl	8000fcc <DelayUS>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HD44780_Home>:

void HD44780_Home()
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f000 f8ac 	bl	8000e68 <SendCommand>
  DelayUS(2000);
 8000d10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d14:	f000 f95a 	bl	8000fcc <DelayUS>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	460a      	mov	r2, r1
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HD44780_SetCursor+0x5c>)
 8000d2e:	f107 0408 	add.w	r4, r7, #8
 8000d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HD44780_SetCursor+0x60>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	79ba      	ldrb	r2, [r7, #6]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d303      	bcc.n	8000d4a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HD44780_SetCursor+0x60>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	3318      	adds	r3, #24
 8000d50:	443b      	add	r3, r7
 8000d52:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f87d 	bl	8000e68 <SendCommand>
}
 8000d6e:	bf00      	nop
 8000d70:	371c      	adds	r7, #28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08004408 	.word	0x08004408
 8000d7c:	2000008b 	.word	0x2000008b

08000d80 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HD44780_Display+0x28>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HD44780_Display+0x28>)
 8000d90:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HD44780_Display+0x28>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f863 	bl	8000e68 <SendCommand>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000089 	.word	0x20000089

08000dac <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f84a 	bl	8000e68 <SendCommand>
  for (int i=0; i<8; i++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	e009      	b.n	8000dee <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f84e 	bl	8000e84 <SendChar>
  for (int i=0; i<8; i++)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2b07      	cmp	r3, #7
 8000df2:	ddf2      	ble.n	8000dda <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000e06:	e006      	b.n	8000e16 <HD44780_PrintStr+0x18>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f837 	bl	8000e84 <SendChar>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f4      	bne.n	8000e08 <HD44780_PrintStr+0xa>
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HD44780_PrintFloat>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_PrintFloat(float data, int numberofdigits)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e32:	6038      	str	r0, [r7, #0]
		char xg_char[12];
		sprintf (xg_char,8, "%f", data);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fcb1 	bl	800079c <__aeabi_f2d>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	f107 000c 	add.w	r0, r7, #12
 8000e42:	e9cd 2300 	strd	r2, r3, [sp]
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HD44780_PrintFloat+0x3c>)
 8000e48:	2108      	movs	r1, #8
 8000e4a:	f002 fe2d 	bl	8003aa8 <siprintf>
		SendChar(xg_char);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f815 	bl	8000e84 <SendChar>

}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08004418 	.word	0x08004418

08000e68 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f812 	bl	8000ea0 <Send>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2101      	movs	r1, #1
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f804 	bl	8000ea0 <Send>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f023 030f 	bic.w	r3, r3, #15
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f80b 	bl	8000ee2 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000ecc:	7bba      	ldrb	r2, [r7, #14]
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f804 	bl	8000ee2 <Write4Bits>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f808 	bl	8000f04 <ExpanderWrite>
  PulseEnable(value);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f820 	bl	8000f3c <PulseEnable>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <ExpanderWrite+0x30>)
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000f1a:	f107 020f 	add.w	r2, r7, #15
 8000f1e:	230a      	movs	r3, #10
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	214e      	movs	r1, #78	; 0x4e
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <ExpanderWrite+0x34>)
 8000f28:	f001 f88a 	bl	8002040 <HAL_I2C_Master_Transmit>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000008c 	.word	0x2000008c
 8000f38:	20000090 	.word	0x20000090

08000f3c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ffd8 	bl	8000f04 <ExpanderWrite>
  DelayUS(20);
 8000f54:	2014      	movs	r0, #20
 8000f56:	f000 f839 	bl	8000fcc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f023 0304 	bic.w	r3, r3, #4
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ffce 	bl	8000f04 <ExpanderWrite>
  DelayUS(20);
 8000f68:	2014      	movs	r0, #20
 8000f6a:	f000 f82f 	bl	8000fcc <DelayUS>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <DelayInit>:

static void DelayInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <DelayInit+0x4c>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <DelayInit+0x4c>)
 8000f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f86:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <DelayInit+0x4c>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <DelayInit+0x4c>)
 8000f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f92:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <DelayInit+0x50>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <DelayInit+0x50>)
 8000f9a:	f023 0301 	bic.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <DelayInit+0x50>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <DelayInit+0x50>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <DelayInit+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000fb2:	bf00      	nop
  __ASM volatile ("NOP");
 8000fb4:	bf00      	nop
  __ASM volatile ("NOP");
 8000fb6:	bf00      	nop
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000edf0 	.word	0xe000edf0
 8000fc8:	e0001000 	.word	0xe0001000

08000fcc <DelayUS>:

static void DelayUS(uint32_t us) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <DelayUS+0x44>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <DelayUS+0x48>)
 8000fda:	fba2 2303 	umull	r2, r3, r2, r3
 8000fde:	0c9a      	lsrs	r2, r3, #18
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <DelayUS+0x4c>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <DelayUS+0x4c>)
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f6      	bhi.n	8000fee <DelayUS+0x22>
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000010 	.word	0x20000010
 8001014:	431bde83 	.word	0x431bde83
 8001018:	e0001000 	.word	0xe0001000
 800101c:	00000000 	.word	0x00000000

08001020 <main>:
int16_t x,y,z;
float xg,yg,zg;


int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  HAL_Init();
 8001024:	f000 fbae 	bl	8001784 <HAL_Init>

  SystemClock_Config();
 8001028:	f000 f932 	bl	8001290 <SystemClock_Config>

  MX_GPIO_Init();
 800102c:	f000 fa00 	bl	8001430 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001030:	f000 f99a 	bl	8001368 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001034:	f000 f9c6 	bl	80013c4 <MX_SPI1_Init>

  HD44780_Init(2);
 8001038:	2002      	movs	r0, #2
 800103a:	f7ff fdd5 	bl	8000be8 <HD44780_Init>
  HD44780_PrintStr("SPI_TEST");
 800103e:	4854      	ldr	r0, [pc, #336]	; (8001190 <main+0x170>)
 8001040:	f7ff fedd 	bl	8000dfe <HD44780_PrintStr>
  HAL_Delay(2000);
 8001044:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001048:	f000 fc0e 	bl	8001868 <HAL_Delay>

//  lcd_init ();
//  lcd_send_string ("SPI_TEST");
//  HAL_Delay (2000);  // 2sec wait

  adxl_init();		//Initialize ADXL
 800104c:	f000 f910 	bl	8001270 <adxl_init>

  while (1)
  {
	  adxl_read(0x32);
 8001050:	2032      	movs	r0, #50	; 0x32
 8001052:	f000 f8dd 	bl	8001210 <adxl_read>
	  x=((data_rec[1]<<8)|data_rec[0]);
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <main+0x174>)
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b4d      	ldr	r3, [pc, #308]	; (8001194 <main+0x174>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <main+0x178>)
 800106a:	801a      	strh	r2, [r3, #0]
	  y=((data_rec[3]<<8)|data_rec[2]);
 800106c:	4b49      	ldr	r3, [pc, #292]	; (8001194 <main+0x174>)
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b47      	ldr	r3, [pc, #284]	; (8001194 <main+0x174>)
 8001076:	789b      	ldrb	r3, [r3, #2]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b47      	ldr	r3, [pc, #284]	; (800119c <main+0x17c>)
 8001080:	801a      	strh	r2, [r3, #0]
	  z=((data_rec[5]<<8)|data_rec[4]);
 8001082:	4b44      	ldr	r3, [pc, #272]	; (8001194 <main+0x174>)
 8001084:	795b      	ldrb	r3, [r3, #5]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <main+0x174>)
 800108c:	791b      	ldrb	r3, [r3, #4]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21a      	sxth	r2, r3
 8001094:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <main+0x180>)
 8001096:	801a      	strh	r2, [r3, #0]

	  //convert into 'g'
	  xg=x*.0078;
 8001098:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <main+0x178>)
 800109a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fb6a 	bl	8000778 <__aeabi_i2d>
 80010a4:	a338      	add	r3, pc, #224	; (adr r3, 8001188 <main+0x168>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff f8e9 	bl	8000280 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fbc9 	bl	800084c <__aeabi_d2f>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a39      	ldr	r2, [pc, #228]	; (80011a4 <main+0x184>)
 80010be:	6013      	str	r3, [r2, #0]
	  yg=y*.0078;
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <main+0x17c>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fb56 	bl	8000778 <__aeabi_i2d>
 80010cc:	a32e      	add	r3, pc, #184	; (adr r3, 8001188 <main+0x168>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff f8d5 	bl	8000280 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fbb5 	bl	800084c <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <main+0x188>)
 80010e6:	6013      	str	r3, [r2, #0]
	  zg=z*.0078;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <main+0x180>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fb42 	bl	8000778 <__aeabi_i2d>
 80010f4:	a324      	add	r3, pc, #144	; (adr r3, 8001188 <main+0x168>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff f8c1 	bl	8000280 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fba1 	bl	800084c <__aeabi_d2f>
 800110a:	4603      	mov	r3, r0
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <main+0x18c>)
 800110e:	6013      	str	r3, [r2, #0]

	  //display the result on LCD

	  HD44780_SetCursor(0,0);
 8001110:	2100      	movs	r1, #0
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fe02 	bl	8000d1c <HD44780_SetCursor>
	  HD44780_PrintStr("X= ");
 8001118:	4825      	ldr	r0, [pc, #148]	; (80011b0 <main+0x190>)
 800111a:	f7ff fe70 	bl	8000dfe <HD44780_PrintStr>
	  HD44780_PrintFloat(xg, 5);
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <main+0x184>)
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	2005      	movs	r0, #5
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	f7ff fe7d 	bl	8000e28 <HD44780_PrintFloat>
	  HD44780_PrintStr(" ");
 800112e:	4821      	ldr	r0, [pc, #132]	; (80011b4 <main+0x194>)
 8001130:	f7ff fe65 	bl	8000dfe <HD44780_PrintStr>

	  HD44780_SetCursor(7,0);
 8001134:	2100      	movs	r1, #0
 8001136:	2007      	movs	r0, #7
 8001138:	f7ff fdf0 	bl	8000d1c <HD44780_SetCursor>
	  HD44780_PrintStr("Y= ");
 800113c:	481e      	ldr	r0, [pc, #120]	; (80011b8 <main+0x198>)
 800113e:	f7ff fe5e 	bl	8000dfe <HD44780_PrintStr>
	  HD44780_PrintFloat(yg, 5);
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <main+0x188>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	2005      	movs	r0, #5
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	f7ff fe6b 	bl	8000e28 <HD44780_PrintFloat>
	  HD44780_PrintStr(" ");
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <main+0x194>)
 8001154:	f7ff fe53 	bl	8000dfe <HD44780_PrintStr>

	  HD44780_SetCursor(0,1);
 8001158:	2101      	movs	r1, #1
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fdde 	bl	8000d1c <HD44780_SetCursor>
	  HD44780_PrintStr("Z= ");
 8001160:	4816      	ldr	r0, [pc, #88]	; (80011bc <main+0x19c>)
 8001162:	f7ff fe4c 	bl	8000dfe <HD44780_PrintStr>
	  HD44780_PrintFloat(zg, 5);
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <main+0x18c>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	2005      	movs	r0, #5
 800116e:	eeb0 0a67 	vmov.f32	s0, s15
 8001172:	f7ff fe59 	bl	8000e28 <HD44780_PrintFloat>
	  HD44780_PrintStr(" ");
 8001176:	480f      	ldr	r0, [pc, #60]	; (80011b4 <main+0x194>)
 8001178:	f7ff fe41 	bl	8000dfe <HD44780_PrintStr>
//
//	  lcd_send_cmd (0xc4);
//	  lcd_send_string ("Z=");
//	  lcd_send_float (zg,5);

	  HAL_Delay (200);   // wait for 200 ms
 800117c:	20c8      	movs	r0, #200	; 0xc8
 800117e:	f000 fb73 	bl	8001868 <HAL_Delay>
	  adxl_read(0x32);
 8001182:	e765      	b.n	8001050 <main+0x30>
 8001184:	f3af 8000 	nop.w
 8001188:	8e8a71de 	.word	0x8e8a71de
 800118c:	3f7ff2e4 	.word	0x3f7ff2e4
 8001190:	0800441c 	.word	0x0800441c
 8001194:	2000013c 	.word	0x2000013c
 8001198:	20000142 	.word	0x20000142
 800119c:	20000144 	.word	0x20000144
 80011a0:	20000146 	.word	0x20000146
 80011a4:	20000148 	.word	0x20000148
 80011a8:	2000014c 	.word	0x2000014c
 80011ac:	20000150 	.word	0x20000150
 80011b0:	08004428 	.word	0x08004428
 80011b4:	0800442c 	.word	0x0800442c
 80011b8:	08004430 	.word	0x08004430
 80011bc:	08004434 	.word	0x08004434

080011c0 <adxl_write>:

  }
}

void adxl_write(uint8_t address, uint8_t value)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=address | 0x40;		//0x40 to set MB bit for reading/writing multiple bytes
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);		//Pull the CS pin LOW to enable the slave
 80011de:	2200      	movs	r2, #0
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <adxl_write+0x48>)
 80011e4:	f000 fdce 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, 2, 100);						//Transmit the address and the data
 80011e8:	f107 010c 	add.w	r1, r7, #12
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	2202      	movs	r2, #2
 80011f0:	4806      	ldr	r0, [pc, #24]	; (800120c <adxl_write+0x4c>)
 80011f2:	f001 ff3a 	bl	800306a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);			//Pull the CS pin HIGH to disable the slave
 80011f6:	2201      	movs	r2, #1
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	4803      	ldr	r0, [pc, #12]	; (8001208 <adxl_write+0x48>)
 80011fc:	f000 fdc2 	bl	8001d84 <HAL_GPIO_WritePin>
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40020400 	.word	0x40020400
 800120c:	200000e4 	.word	0x200000e4

08001210 <adxl_read>:


void adxl_read(uint8_t address)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
	address |= 0x80;	//read operation
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001220:	b2db      	uxtb	r3, r3
 8001222:	71fb      	strb	r3, [r7, #7]
	address|=0x40;	//multiple byte read
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122a:	b2db      	uxtb	r3, r3
 800122c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);		//Pull the CS pin LOW to enable the slave
 800122e:	2200      	movs	r2, #0
 8001230:	2140      	movs	r1, #64	; 0x40
 8001232:	480c      	ldr	r0, [pc, #48]	; (8001264 <adxl_read+0x54>)
 8001234:	f000 fda6 	bl	8001d84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &address, 1, 100);					//Send the address from where you want to read data
 8001238:	1df9      	adds	r1, r7, #7
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	2201      	movs	r2, #1
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <adxl_read+0x58>)
 8001240:	f001 ff13 	bl	800306a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data_rec, 6, 100);					//read 6 bytes of data
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	2206      	movs	r2, #6
 8001248:	4908      	ldr	r1, [pc, #32]	; (800126c <adxl_read+0x5c>)
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <adxl_read+0x58>)
 800124c:	f002 f849 	bl	80032e2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);			//Pull the CS pin HIGH to disable the slave
 8001250:	2201      	movs	r2, #1
 8001252:	2140      	movs	r1, #64	; 0x40
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <adxl_read+0x54>)
 8001256:	f000 fd95 	bl	8001d84 <HAL_GPIO_WritePin>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400
 8001268:	200000e4 	.word	0x200000e4
 800126c:	2000013c 	.word	0x2000013c

08001270 <adxl_init>:

void adxl_init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	adxl_write(0x31,0x01);		//data format range = +-4g
 8001274:	2101      	movs	r1, #1
 8001276:	2031      	movs	r0, #49	; 0x31
 8001278:	f7ff ffa2 	bl	80011c0 <adxl_write>
	adxl_write(0x2d,0x00);		//reset all bits
 800127c:	2100      	movs	r1, #0
 800127e:	202d      	movs	r0, #45	; 0x2d
 8001280:	f7ff ff9e 	bl	80011c0 <adxl_write>
	adxl_write(0x2d,0x08);		//power_cntl measure and wakeup 8hz
 8001284:	2108      	movs	r1, #8
 8001286:	202d      	movs	r0, #45	; 0x2d
 8001288:	f7ff ff9a 	bl	80011c0 <adxl_write>

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	; 0x50
 8001294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	2230      	movs	r2, #48	; 0x30
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fc22 	bl	8003ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <SystemClock_Config+0xd0>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	4a28      	ldr	r2, [pc, #160]	; (8001360 <SystemClock_Config+0xd0>)
 80012be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c2:	6413      	str	r3, [r2, #64]	; 0x40
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <SystemClock_Config+0xd0>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <SystemClock_Config+0xd4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012dc:	4a21      	ldr	r2, [pc, #132]	; (8001364 <SystemClock_Config+0xd4>)
 80012de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <SystemClock_Config+0xd4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f0:	2302      	movs	r3, #2
 80012f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f8:	2310      	movs	r3, #16
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fc:	2302      	movs	r3, #2
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001300:	2300      	movs	r3, #0
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001304:	2310      	movs	r3, #16
 8001306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001308:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800130c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800130e:	2304      	movs	r3, #4
 8001310:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001312:	2307      	movs	r3, #7
 8001314:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	4618      	mov	r0, r3
 800131c:	f001 f998 	bl	8002650 <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001326:	f000 f8d3 	bl	80014d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	230f      	movs	r3, #15
 800132c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	2302      	movs	r3, #2
 8001330:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2102      	movs	r1, #2
 8001346:	4618      	mov	r0, r3
 8001348:	f001 fbfa 	bl	8002b40 <HAL_RCC_ClockConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001352:	f000 f8bd 	bl	80014d0 <Error_Handler>
  }
}
 8001356:	bf00      	nop
 8001358:	3750      	adds	r7, #80	; 0x50
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000

08001368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <MX_I2C1_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_I2C1_Init+0x50>)
 80013a6:	f000 fd07 	bl	8001db8 <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f000 f88e 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000090 	.word	0x20000090
 80013bc:	40005400 	.word	0x40005400
 80013c0:	000186a0 	.word	0x000186a0

080013c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_SPI1_Init+0x64>)
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <MX_SPI1_Init+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_SPI1_Init+0x64>)
 80013d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_SPI1_Init+0x64>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_SPI1_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_SPI1_Init+0x64>)
 80013e4:	2202      	movs	r2, #2
 80013e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_SPI1_Init+0x64>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_SPI1_Init+0x64>)
 80013f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_SPI1_Init+0x64>)
 80013f8:	2228      	movs	r2, #40	; 0x28
 80013fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <MX_SPI1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_SPI1_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <MX_SPI1_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_SPI1_Init+0x64>)
 8001410:	220a      	movs	r2, #10
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_SPI1_Init+0x64>)
 8001416:	f001 fd9f 	bl	8002f58 <HAL_SPI_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001420:	f000 f856 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200000e4 	.word	0x200000e4
 800142c:	40013000 	.word	0x40013000

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <MX_GPIO_Init+0x98>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <MX_GPIO_Init+0x98>)
 8001450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MX_GPIO_Init+0x98>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_GPIO_Init+0x98>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <MX_GPIO_Init+0x98>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_GPIO_Init+0x98>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_GPIO_Init+0x98>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <MX_GPIO_Init+0x98>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_GPIO_Init+0x98>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	480b      	ldr	r0, [pc, #44]	; (80014cc <MX_GPIO_Init+0x9c>)
 80014a0:	f000 fc70 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014a4:	2340      	movs	r3, #64	; 0x40
 80014a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_GPIO_Init+0x9c>)
 80014bc:	f000 fade 	bl	8001a7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c0:	bf00      	nop
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020400 	.word	0x40020400

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_MspInit+0x4c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_MspInit+0x4c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800151a:	2007      	movs	r0, #7
 800151c:	f000 fa7a 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <HAL_I2C_MspInit+0x84>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12c      	bne.n	80015a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800156a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001570:	2312      	movs	r3, #18
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800157c:	2304      	movs	r3, #4
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <HAL_I2C_MspInit+0x8c>)
 8001588:	f000 fa78 	bl	8001a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 8001596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_I2C_MspInit+0x88>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40005400 	.word	0x40005400
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020400 	.word	0x40020400

080015bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_SPI_MspInit+0x84>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12b      	bne.n	8001636 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_SPI_MspInit+0x88>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_SPI_MspInit+0x88>)
 80015e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_SPI_MspInit+0x88>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_SPI_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_SPI_MspInit+0x88>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_SPI_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001616:	23e0      	movs	r3, #224	; 0xe0
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001626:	2305      	movs	r3, #5
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_SPI_MspInit+0x8c>)
 8001632:	f000 fa23 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40013000 	.word	0x40013000
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 f8c6 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <_sbrk+0x5c>)
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <_sbrk+0x60>)
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <_sbrk+0x64>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <_sbrk+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d207      	bcs.n	80016e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d0:	f002 fa12 	bl	8003af8 <__errno>
 80016d4:	4603      	mov	r3, r0
 80016d6:	220c      	movs	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	e009      	b.n	80016f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <_sbrk+0x64>)
 80016f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20018000 	.word	0x20018000
 8001700:	00000400 	.word	0x00000400
 8001704:	20000154 	.word	0x20000154
 8001708:	200002a8 	.word	0x200002a8

0800170c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <SystemInit+0x20>)
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <SystemInit+0x20>)
 8001718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800171c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001736:	490e      	ldr	r1, [pc, #56]	; (8001770 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800174c:	4c0b      	ldr	r4, [pc, #44]	; (800177c <LoopFillZerobss+0x26>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800175a:	f7ff ffd7 	bl	800170c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175e:	f002 f9d1 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001762:	f7ff fc5d 	bl	8001020 <main>
  bx  lr    
 8001766:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001768:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001774:	08004494 	.word	0x08004494
  ldr r2, =_sbss
 8001778:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800177c:	200002a4 	.word	0x200002a4

08001780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC_IRQHandler>
	...

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <HAL_Init+0x40>)
 800178e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_Init+0x40>)
 800179a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_Init+0x40>)
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f931 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 f808 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff fe90 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023c00 	.word	0x40023c00

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f93b 	bl	8001a62 <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f911 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000010 	.word	0x20000010
 8001820:	20000018 	.word	0x20000018
 8001824:	20000014 	.word	0x20000014

08001828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x20>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x24>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_IncTick+0x24>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000018 	.word	0x20000018
 800184c:	20000158 	.word	0x20000158

08001850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_GetTick+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000158 	.word	0x20000158

08001868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff ffee 	bl	8001850 <HAL_GetTick>
 8001874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001880:	d005      	beq.n	800188e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_Delay+0x44>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800188e:	bf00      	nop
 8001890:	f7ff ffde 	bl	8001850 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	429a      	cmp	r2, r3
 800189e:	d8f7      	bhi.n	8001890 <HAL_Delay+0x28>
  {
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000018 	.word	0x20000018

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff47 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff5c 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffb0 	bl	80019d0 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e159      	b.n	8001d4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 8148 	bne.w	8001d46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d005      	beq.n	8001ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d017      	beq.n	8001b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80a2 	beq.w	8001d46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_GPIO_Init+0x2ec>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a49      	ldr	r2, [pc, #292]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x202>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a48      	ldr	r2, [pc, #288]	; (8001d70 <HAL_GPIO_Init+0x2f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x1fe>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a47      	ldr	r2, [pc, #284]	; (8001d74 <HAL_GPIO_Init+0x2f8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x1fa>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a46      	ldr	r2, [pc, #280]	; (8001d78 <HAL_GPIO_Init+0x2fc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x1f6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a45      	ldr	r2, [pc, #276]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x1f2>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e008      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c90:	4935      	ldr	r1, [pc, #212]	; (8001d68 <HAL_GPIO_Init+0x2ec>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc2:	4a2f      	ldr	r2, [pc, #188]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cec:	4a24      	ldr	r2, [pc, #144]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d16:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d40:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	f67f aea2 	bls.w	8001a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40013c00 	.word	0x40013c00

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da0:	e003      	b.n	8001daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e12b      	b.n	8002022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fba4 	bl	800152c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	; 0x24
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e1c:	f001 f888 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 8001e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a81      	ldr	r2, [pc, #516]	; (800202c <HAL_I2C_Init+0x274>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d807      	bhi.n	8001e3c <HAL_I2C_Init+0x84>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a80      	ldr	r2, [pc, #512]	; (8002030 <HAL_I2C_Init+0x278>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	bf94      	ite	ls
 8001e34:	2301      	movls	r3, #1
 8001e36:	2300      	movhi	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e006      	b.n	8001e4a <HAL_I2C_Init+0x92>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4a7d      	ldr	r2, [pc, #500]	; (8002034 <HAL_I2C_Init+0x27c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	bf94      	ite	ls
 8001e44:	2301      	movls	r3, #1
 8001e46:	2300      	movhi	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0e7      	b.n	8002022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4a78      	ldr	r2, [pc, #480]	; (8002038 <HAL_I2C_Init+0x280>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9b      	lsrs	r3, r3, #18
 8001e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a6a      	ldr	r2, [pc, #424]	; (800202c <HAL_I2C_Init+0x274>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d802      	bhi.n	8001e8c <HAL_I2C_Init+0xd4>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	e009      	b.n	8001ea0 <HAL_I2C_Init+0xe8>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	4a69      	ldr	r2, [pc, #420]	; (800203c <HAL_I2C_Init+0x284>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	495c      	ldr	r1, [pc, #368]	; (800202c <HAL_I2C_Init+0x274>)
 8001ebc:	428b      	cmp	r3, r1
 8001ebe:	d819      	bhi.n	8001ef4 <HAL_I2C_Init+0x13c>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e59      	subs	r1, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ece:	1c59      	adds	r1, r3, #1
 8001ed0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_I2C_Init+0x138>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e59      	subs	r1, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eee:	e051      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e04f      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <HAL_I2C_Init+0x168>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	440b      	add	r3, r1
 8001f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e012      	b.n	8001f46 <HAL_I2C_Init+0x18e>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e58      	subs	r0, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	0099      	lsls	r1, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_Init+0x196>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e022      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10e      	bne.n	8001f74 <HAL_I2C_Init+0x1bc>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1e58      	subs	r0, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	440b      	add	r3, r1
 8001f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f72:	e00f      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e58      	subs	r0, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	0099      	lsls	r1, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6911      	ldr	r1, [r2, #16]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68d2      	ldr	r2, [r2, #12]
 8001fce:	4311      	orrs	r1, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	000186a0 	.word	0x000186a0
 8002030:	001e847f 	.word	0x001e847f
 8002034:	003d08ff 	.word	0x003d08ff
 8002038:	431bde83 	.word	0x431bde83
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	461a      	mov	r2, r3
 800204c:	460b      	mov	r3, r1
 800204e:	817b      	strh	r3, [r7, #10]
 8002050:	4613      	mov	r3, r2
 8002052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fbfc 	bl	8001850 <HAL_GetTick>
 8002058:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	f040 80e0 	bne.w	8002228 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2319      	movs	r3, #25
 800206e:	2201      	movs	r2, #1
 8002070:	4970      	ldr	r1, [pc, #448]	; (8002234 <HAL_I2C_Master_Transmit+0x1f4>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f964 	bl	8002340 <I2C_WaitOnFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
 8002080:	e0d3      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Master_Transmit+0x50>
 800208c:	2302      	movs	r3, #2
 800208e:	e0cc      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d007      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2221      	movs	r2, #33	; 0x21
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2210      	movs	r2, #16
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	893a      	ldrh	r2, [r7, #8]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a50      	ldr	r2, [pc, #320]	; (8002238 <HAL_I2C_Master_Transmit+0x1f8>)
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	6a3a      	ldr	r2, [r7, #32]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f89c 	bl	800223c <I2C_MasterRequestWrite>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e08d      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002124:	e066      	b.n	80021f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	6a39      	ldr	r1, [r7, #32]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f9de 	bl	80024ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	2b04      	cmp	r3, #4
 800213c:	d107      	bne.n	800214e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06b      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b04      	cmp	r3, #4
 800218e:	d11b      	bne.n	80021c8 <HAL_I2C_Master_Transmit+0x188>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	d017      	beq.n	80021c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	6a39      	ldr	r1, [r7, #32]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f9ce 	bl	800256e <I2C_WaitOnBTFFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d107      	bne.n	80021f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e01a      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d194      	bne.n	8002126 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	00100002 	.word	0x00100002
 8002238:	ffff0000 	.word	0xffff0000

0800223c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	460b      	mov	r3, r1
 800224a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d006      	beq.n	8002266 <I2C_MasterRequestWrite+0x2a>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d003      	beq.n	8002266 <I2C_MasterRequestWrite+0x2a>
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002264:	d108      	bne.n	8002278 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e00b      	b.n	8002290 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	2b12      	cmp	r3, #18
 800227e:	d107      	bne.n	8002290 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f84f 	bl	8002340 <I2C_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00d      	beq.n	80022c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b6:	d103      	bne.n	80022c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e035      	b.n	8002330 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022cc:	d108      	bne.n	80022e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ce:	897b      	ldrh	r3, [r7, #10]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	e01b      	b.n	8002318 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022e0:	897b      	ldrh	r3, [r7, #10]
 80022e2:	11db      	asrs	r3, r3, #7
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0306 	and.w	r3, r3, #6
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f063 030f 	orn	r3, r3, #15
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <I2C_MasterRequestWrite+0xfc>)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f875 	bl	80023ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e010      	b.n	8002330 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800230e:	897b      	ldrh	r3, [r7, #10]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4907      	ldr	r1, [pc, #28]	; (800233c <I2C_MasterRequestWrite+0x100>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f865 	bl	80023ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	00010008 	.word	0x00010008
 800233c:	00010002 	.word	0x00010002

08002340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002350:	e025      	b.n	800239e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d021      	beq.n	800239e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235a:	f7ff fa79 	bl	8001850 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d302      	bcc.n	8002370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d116      	bne.n	800239e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f043 0220 	orr.w	r2, r3, #32
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e023      	b.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d10d      	bne.n	80023c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4013      	ands	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	e00c      	b.n	80023de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4013      	ands	r3, r2
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf0c      	ite	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	2300      	movne	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d0b6      	beq.n	8002352 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023fc:	e051      	b.n	80024a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240c:	d123      	bne.n	8002456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002426:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f043 0204 	orr.w	r2, r3, #4
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e046      	b.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d021      	beq.n	80024a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245e:	f7ff f9f7 	bl	8001850 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d302      	bcc.n	8002474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d116      	bne.n	80024a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f043 0220 	orr.w	r2, r3, #32
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e020      	b.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d10c      	bne.n	80024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4013      	ands	r3, r2
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf14      	ite	ne
 80024be:	2301      	movne	r3, #1
 80024c0:	2300      	moveq	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	e00b      	b.n	80024de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	43da      	mvns	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4013      	ands	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d18d      	bne.n	80023fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f8:	e02d      	b.n	8002556 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f878 	bl	80025f0 <I2C_IsAcknowledgeFailed>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e02d      	b.n	8002566 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d021      	beq.n	8002556 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002512:	f7ff f99d 	bl	8001850 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	429a      	cmp	r2, r3
 8002520:	d302      	bcc.n	8002528 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d116      	bne.n	8002556 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e007      	b.n	8002566 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d1ca      	bne.n	80024fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800257a:	e02d      	b.n	80025d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f837 	bl	80025f0 <I2C_IsAcknowledgeFailed>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e02d      	b.n	80025e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002592:	d021      	beq.n	80025d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002594:	f7ff f95c 	bl	8001850 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d302      	bcc.n	80025aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d116      	bne.n	80025d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e007      	b.n	80025e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d1ca      	bne.n	800257c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002606:	d11b      	bne.n	8002640 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002610:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f043 0204 	orr.w	r2, r3, #4
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e267      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d075      	beq.n	800275a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800266e:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d00c      	beq.n	8002694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267a:	4b85      	ldr	r3, [pc, #532]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002682:	2b08      	cmp	r3, #8
 8002684:	d112      	bne.n	80026ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b82      	ldr	r3, [pc, #520]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002692:	d10b      	bne.n	80026ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	4b7e      	ldr	r3, [pc, #504]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d05b      	beq.n	8002758 <HAL_RCC_OscConfig+0x108>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d157      	bne.n	8002758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e242      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b4:	d106      	bne.n	80026c4 <HAL_RCC_OscConfig+0x74>
 80026b6:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a75      	ldr	r2, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e01d      	b.n	8002700 <HAL_RCC_OscConfig+0xb0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x98>
 80026ce:	4b70      	ldr	r3, [pc, #448]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a6f      	ldr	r2, [pc, #444]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6c      	ldr	r2, [pc, #432]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0xb0>
 80026e8:	4b69      	ldr	r3, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a68      	ldr	r2, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b66      	ldr	r3, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a65      	ldr	r2, [pc, #404]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80026fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d013      	beq.n	8002730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff f8a2 	bl	8001850 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002710:	f7ff f89e 	bl	8001850 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e207      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0xc0>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7ff f88e 	bl	8001850 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002738:	f7ff f88a 	bl	8001850 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1f3      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	4b51      	ldr	r3, [pc, #324]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0xe8>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d063      	beq.n	800282e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002766:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002772:	4b47      	ldr	r3, [pc, #284]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800277a:	2b08      	cmp	r3, #8
 800277c:	d11c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b44      	ldr	r3, [pc, #272]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d116      	bne.n	80027b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	4b41      	ldr	r3, [pc, #260]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x152>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e1c7      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4937      	ldr	r1, [pc, #220]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	e03a      	b.n	800282e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	4b34      	ldr	r3, [pc, #208]	; (8002894 <HAL_RCC_OscConfig+0x244>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7ff f843 	bl	8001850 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ce:	f7ff f83f 	bl	8001850 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1a8      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4925      	ldr	r1, [pc, #148]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_OscConfig+0x244>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7ff f822 	bl	8001850 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002810:	f7ff f81e 	bl	8001850 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e187      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d036      	beq.n	80028a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_RCC_OscConfig+0x248>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7ff f802 	bl	8001850 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002850:	f7fe fffe 	bl	8001850 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e167      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_OscConfig+0x240>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x200>
 800286e:	e01b      	b.n	80028a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_OscConfig+0x248>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7fe ffeb 	bl	8001850 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	e00e      	b.n	800289c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287e:	f7fe ffe7 	bl	8001850 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d907      	bls.n	800289c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e150      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
 8002890:	40023800 	.word	0x40023800
 8002894:	42470000 	.word	0x42470000
 8002898:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b88      	ldr	r3, [pc, #544]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ea      	bne.n	800287e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8097 	beq.w	80029e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b7d      	ldr	r3, [pc, #500]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a7c      	ldr	r2, [pc, #496]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b7a      	ldr	r3, [pc, #488]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	4b77      	ldr	r3, [pc, #476]	; (8002ac4 <HAL_RCC_OscConfig+0x474>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d118      	bne.n	8002924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f2:	4b74      	ldr	r3, [pc, #464]	; (8002ac4 <HAL_RCC_OscConfig+0x474>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a73      	ldr	r2, [pc, #460]	; (8002ac4 <HAL_RCC_OscConfig+0x474>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fe:	f7fe ffa7 	bl	8001850 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7fe ffa3 	bl	8001850 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e10c      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_OscConfig+0x474>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x2ea>
 800292c:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	4a63      	ldr	r2, [pc, #396]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	; 0x70
 8002938:	e01c      	b.n	8002974 <HAL_RCC_OscConfig+0x324>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x30c>
 8002942:	4b5f      	ldr	r3, [pc, #380]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	4a5e      	ldr	r2, [pc, #376]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6713      	str	r3, [r2, #112]	; 0x70
 800294e:	4b5c      	ldr	r3, [pc, #368]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a5b      	ldr	r2, [pc, #364]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0x324>
 800295c:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4a57      	ldr	r2, [pc, #348]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	; 0x70
 8002968:	4b55      	ldr	r3, [pc, #340]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a54      	ldr	r2, [pc, #336]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d015      	beq.n	80029a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe ff68 	bl	8001850 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe ff64 	bl	8001850 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e0cb      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0ee      	beq.n	8002984 <HAL_RCC_OscConfig+0x334>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a8:	f7fe ff52 	bl	8001850 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fe ff4e 	bl	8001850 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0b5      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c6:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1ee      	bne.n	80029b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	4b39      	ldr	r3, [pc, #228]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	4a38      	ldr	r2, [pc, #224]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80a1 	beq.w	8002b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d05c      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d141      	bne.n	8002a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <HAL_RCC_OscConfig+0x478>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe ff22 	bl	8001850 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe ff1e 	bl	8001850 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e087      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	019b      	lsls	r3, r3, #6
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	3b01      	subs	r3, #1
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	061b      	lsls	r3, r3, #24
 8002a52:	491b      	ldr	r1, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x478>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fef7 	bl	8001850 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe fef3 	bl	8001850 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e05c      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x416>
 8002a84:	e054      	b.n	8002b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <HAL_RCC_OscConfig+0x478>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fee0 	bl	8001850 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a94:	f7fe fedc 	bl	8001850 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e045      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x444>
 8002ab2:	e03d      	b.n	8002b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e038      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <HAL_RCC_OscConfig+0x4ec>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d028      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d121      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d11a      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d111      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800

08002b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0cc      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b68      	ldr	r3, [pc, #416]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d90c      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b63      	ldr	r3, [pc, #396]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0b8      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d020      	beq.n	8002bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b94:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a58      	ldr	r2, [pc, #352]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	494d      	ldr	r1, [pc, #308]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d044      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d119      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e07f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e06f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e067      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f023 0203 	bic.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4934      	ldr	r1, [pc, #208]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c30:	f7fe fe0e 	bl	8001850 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7fe fe0a 	bl	8001850 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e04f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 020c 	and.w	r2, r3, #12
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d1eb      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c60:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d20c      	bcs.n	8002c88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e032      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4916      	ldr	r1, [pc, #88]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	490e      	ldr	r1, [pc, #56]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cc6:	f000 f821 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	490a      	ldr	r1, [pc, #40]	; (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	5ccb      	ldrb	r3, [r1, r3]
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fd6e 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023c00 	.word	0x40023c00
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08004438 	.word	0x08004438
 8002d04:	20000010 	.word	0x20000010
 8002d08:	20000014 	.word	0x20000014

08002d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d10:	b094      	sub	sp, #80	; 0x50
 8002d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	647b      	str	r3, [r7, #68]	; 0x44
 8002d18:	2300      	movs	r3, #0
 8002d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d24:	4b79      	ldr	r3, [pc, #484]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d00d      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x40>
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	f200 80e1 	bhi.w	8002ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x34>
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d3e:	e0db      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b73      	ldr	r3, [pc, #460]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d44:	e0db      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d46:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d4a:	e0d8      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d4c:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d56:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d063      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d62:	4b6a      	ldr	r3, [pc, #424]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	2200      	movs	r2, #0
 8002d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
 8002d76:	2300      	movs	r3, #0
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d7e:	4622      	mov	r2, r4
 8002d80:	462b      	mov	r3, r5
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	0159      	lsls	r1, r3, #5
 8002d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d90:	0150      	lsls	r0, r2, #5
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4621      	mov	r1, r4
 8002d98:	1a51      	subs	r1, r2, r1
 8002d9a:	6139      	str	r1, [r7, #16]
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002db0:	4659      	mov	r1, fp
 8002db2:	018b      	lsls	r3, r1, #6
 8002db4:	4651      	mov	r1, sl
 8002db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dba:	4651      	mov	r1, sl
 8002dbc:	018a      	lsls	r2, r1, #6
 8002dbe:	4651      	mov	r1, sl
 8002dc0:	ebb2 0801 	subs.w	r8, r2, r1
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	eb63 0901 	sbc.w	r9, r3, r1
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dde:	4690      	mov	r8, r2
 8002de0:	4699      	mov	r9, r3
 8002de2:	4623      	mov	r3, r4
 8002de4:	eb18 0303 	adds.w	r3, r8, r3
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	462b      	mov	r3, r5
 8002dec:	eb49 0303 	adc.w	r3, r9, r3
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	024b      	lsls	r3, r1, #9
 8002e02:	4621      	mov	r1, r4
 8002e04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e08:	4621      	mov	r1, r4
 8002e0a:	024a      	lsls	r2, r1, #9
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	2200      	movs	r2, #0
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e1c:	f7fd fd66 	bl	80008ec <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e28:	e058      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2a:	4b38      	ldr	r3, [pc, #224]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	099b      	lsrs	r3, r3, #6
 8002e30:	2200      	movs	r2, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	4611      	mov	r1, r2
 8002e36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e3a:	623b      	str	r3, [r7, #32]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e44:	4642      	mov	r2, r8
 8002e46:	464b      	mov	r3, r9
 8002e48:	f04f 0000 	mov.w	r0, #0
 8002e4c:	f04f 0100 	mov.w	r1, #0
 8002e50:	0159      	lsls	r1, r3, #5
 8002e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e56:	0150      	lsls	r0, r2, #5
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e62:	4649      	mov	r1, r9
 8002e64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e80:	eb63 050b 	sbc.w	r5, r3, fp
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	00eb      	lsls	r3, r5, #3
 8002e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e92:	00e2      	lsls	r2, r4, #3
 8002e94:	4614      	mov	r4, r2
 8002e96:	461d      	mov	r5, r3
 8002e98:	4643      	mov	r3, r8
 8002e9a:	18e3      	adds	r3, r4, r3
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	eb45 0303 	adc.w	r3, r5, r3
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	028b      	lsls	r3, r1, #10
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	028a      	lsls	r2, r1, #10
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	61fa      	str	r2, [r7, #28]
 8002ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed0:	f7fd fd0c 	bl	80008ec <__aeabi_uldivmod>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4613      	mov	r3, r2
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002eec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ef6:	e002      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3750      	adds	r7, #80	; 0x50
 8002f04:	46bd      	mov	sp, r7
 8002f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	00f42400 	.word	0x00f42400
 8002f14:	007a1200 	.word	0x007a1200

08002f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000010 	.word	0x20000010

08002f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f34:	f7ff fff0 	bl	8002f18 <HAL_RCC_GetHCLKFreq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	0a9b      	lsrs	r3, r3, #10
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	4903      	ldr	r1, [pc, #12]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f46:	5ccb      	ldrb	r3, [r1, r3]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40023800 	.word	0x40023800
 8002f54:	08004448 	.word	0x08004448

08002f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07b      	b.n	8003062 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d108      	bne.n	8002f84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7a:	d009      	beq.n	8002f90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
 8002f82:	e005      	b.n	8002f90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fb06 	bl	80015bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	ea42 0103 	orr.w	r1, r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	f003 0104 	and.w	r1, r3, #4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f003 0210 	and.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003050:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b088      	sub	sp, #32
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_SPI_Transmit+0x22>
 8003088:	2302      	movs	r3, #2
 800308a:	e126      	b.n	80032da <HAL_SPI_Transmit+0x270>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003094:	f7fe fbdc 	bl	8001850 <HAL_GetTick>
 8003098:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d002      	beq.n	80030b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
 80030ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030ae:	e10b      	b.n	80032c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_SPI_Transmit+0x52>
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030c0:	e102      	b.n	80032c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2203      	movs	r2, #3
 80030c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	88fa      	ldrh	r2, [r7, #6]
 80030da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003108:	d10f      	bne.n	800312a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003118:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003128:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d007      	beq.n	8003148 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003146:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003150:	d14b      	bne.n	80031ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_SPI_Transmit+0xf6>
 800315a:	8afb      	ldrh	r3, [r7, #22]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d13e      	bne.n	80031de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	881a      	ldrh	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	1c9a      	adds	r2, r3, #2
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003184:	e02b      	b.n	80031de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b02      	cmp	r3, #2
 8003192:	d112      	bne.n	80031ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	881a      	ldrh	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	1c9a      	adds	r2, r3, #2
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80031b8:	e011      	b.n	80031de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ba:	f7fe fb49 	bl	8001850 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d803      	bhi.n	80031d2 <HAL_SPI_Transmit+0x168>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d102      	bne.n	80031d8 <HAL_SPI_Transmit+0x16e>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031dc:	e074      	b.n	80032c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ce      	bne.n	8003186 <HAL_SPI_Transmit+0x11c>
 80031e8:	e04c      	b.n	8003284 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_SPI_Transmit+0x18e>
 80031f2:	8afb      	ldrh	r3, [r7, #22]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d140      	bne.n	800327a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800321e:	e02c      	b.n	800327a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b02      	cmp	r3, #2
 800322c:	d113      	bne.n	8003256 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	330c      	adds	r3, #12
 8003238:	7812      	ldrb	r2, [r2, #0]
 800323a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	86da      	strh	r2, [r3, #54]	; 0x36
 8003254:	e011      	b.n	800327a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003256:	f7fe fafb 	bl	8001850 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d803      	bhi.n	800326e <HAL_SPI_Transmit+0x204>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d102      	bne.n	8003274 <HAL_SPI_Transmit+0x20a>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003278:	e026      	b.n	80032c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1cd      	bne.n	8003220 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	6839      	ldr	r1, [r7, #0]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fbcb 	bl	8003a24 <SPI_EndRxTxTransaction>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e000      	b.n	80032c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80032c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b088      	sub	sp, #32
 80032e6:	af02      	add	r7, sp, #8
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032fe:	d112      	bne.n	8003326 <HAL_SPI_Receive+0x44>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10e      	bne.n	8003326 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2204      	movs	r2, #4
 800330c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003310:	88fa      	ldrh	r2, [r7, #6]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	4613      	mov	r3, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f8f1 	bl	8003504 <HAL_SPI_TransmitReceive>
 8003322:	4603      	mov	r3, r0
 8003324:	e0ea      	b.n	80034fc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_SPI_Receive+0x52>
 8003330:	2302      	movs	r3, #2
 8003332:	e0e3      	b.n	80034fc <HAL_SPI_Receive+0x21a>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800333c:	f7fe fa88 	bl	8001850 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d002      	beq.n	8003354 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800334e:	2302      	movs	r3, #2
 8003350:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003352:	e0ca      	b.n	80034ea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_SPI_Receive+0x7e>
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003364:	e0c1      	b.n	80034ea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2204      	movs	r2, #4
 800336a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	88fa      	ldrh	r2, [r7, #6]
 800337e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	88fa      	ldrh	r2, [r7, #6]
 8003384:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ac:	d10f      	bne.n	80033ce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	d007      	beq.n	80033ec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d162      	bne.n	80034ba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033f4:	e02e      	b.n	8003454 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d115      	bne.n	8003430 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f103 020c 	add.w	r2, r3, #12
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800342e:	e011      	b.n	8003454 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003430:	f7fe fa0e 	bl	8001850 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d803      	bhi.n	8003448 <HAL_SPI_Receive+0x166>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d102      	bne.n	800344e <HAL_SPI_Receive+0x16c>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003452:	e04a      	b.n	80034ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1cb      	bne.n	80033f6 <HAL_SPI_Receive+0x114>
 800345e:	e031      	b.n	80034c4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d113      	bne.n	8003496 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	b292      	uxth	r2, r2
 800347a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	1c9a      	adds	r2, r3, #2
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003494:	e011      	b.n	80034ba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003496:	f7fe f9db 	bl	8001850 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d803      	bhi.n	80034ae <HAL_SPI_Receive+0x1cc>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d102      	bne.n	80034b4 <HAL_SPI_Receive+0x1d2>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034b8:	e017      	b.n	80034ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1cd      	bne.n	8003460 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	6839      	ldr	r1, [r7, #0]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fa45 	bl	8003958 <SPI_EndRxTransaction>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
 80034e6:	e000      	b.n	80034ea <HAL_SPI_Receive+0x208>
  }

error :
 80034e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	; 0x30
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003512:	2301      	movs	r3, #1
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_SPI_TransmitReceive+0x26>
 8003526:	2302      	movs	r3, #2
 8003528:	e18a      	b.n	8003840 <HAL_SPI_TransmitReceive+0x33c>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003532:	f7fe f98d 	bl	8001850 <HAL_GetTick>
 8003536:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003548:	887b      	ldrh	r3, [r7, #2]
 800354a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800354c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003550:	2b01      	cmp	r3, #1
 8003552:	d00f      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x70>
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355a:	d107      	bne.n	800356c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d103      	bne.n	800356c <HAL_SPI_TransmitReceive+0x68>
 8003564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003568:	2b04      	cmp	r3, #4
 800356a:	d003      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800356c:	2302      	movs	r3, #2
 800356e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003572:	e15b      	b.n	800382c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_SPI_TransmitReceive+0x82>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_SPI_TransmitReceive+0x82>
 8003580:	887b      	ldrh	r3, [r7, #2]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800358c:	e14e      	b.n	800382c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b04      	cmp	r3, #4
 8003598:	d003      	beq.n	80035a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2205      	movs	r2, #5
 800359e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	887a      	ldrh	r2, [r7, #2]
 80035b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	887a      	ldrh	r2, [r7, #2]
 80035ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d007      	beq.n	80035f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fe:	d178      	bne.n	80036f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_SPI_TransmitReceive+0x10a>
 8003608:	8b7b      	ldrh	r3, [r7, #26]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d166      	bne.n	80036dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	1c9a      	adds	r2, r3, #2
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003632:	e053      	b.n	80036dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d11b      	bne.n	800367a <HAL_SPI_TransmitReceive+0x176>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <HAL_SPI_TransmitReceive+0x176>
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d113      	bne.n	800367a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	881a      	ldrh	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	1c9a      	adds	r2, r3, #2
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d119      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x1b8>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d014      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	b292      	uxth	r2, r2
 800369e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036b8:	2301      	movs	r3, #1
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036bc:	f7fe f8c8 	bl	8001850 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d807      	bhi.n	80036dc <HAL_SPI_TransmitReceive+0x1d8>
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d003      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036da:	e0a7      	b.n	800382c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1a6      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x130>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1a1      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x130>
 80036f0:	e07c      	b.n	80037ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_SPI_TransmitReceive+0x1fc>
 80036fa:	8b7b      	ldrh	r3, [r7, #26]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d16b      	bne.n	80037d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	7812      	ldrb	r2, [r2, #0]
 800370c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003726:	e057      	b.n	80037d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	d11c      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x26c>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d017      	beq.n	8003770 <HAL_SPI_TransmitReceive+0x26c>
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d114      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	7812      	ldrb	r2, [r2, #0]
 8003752:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d119      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x2ae>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d014      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037ae:	2301      	movs	r3, #1
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037b2:	f7fe f84d 	bl	8001850 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037be:	429a      	cmp	r2, r3
 80037c0:	d803      	bhi.n	80037ca <HAL_SPI_TransmitReceive+0x2c6>
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d102      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x2cc>
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037d6:	e029      	b.n	800382c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1a2      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x224>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d19d      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f917 	bl	8003a24 <SPI_EndRxTxTransaction>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d006      	beq.n	800380a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003808:	e010      	b.n	800382c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	e000      	b.n	800382c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800382a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800383c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003840:	4618      	mov	r0, r3
 8003842:	3730      	adds	r7, #48	; 0x30
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003858:	f7fd fffa 	bl	8001850 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	4413      	add	r3, r2
 8003866:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003868:	f7fd fff2 	bl	8001850 <HAL_GetTick>
 800386c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800386e:	4b39      	ldr	r3, [pc, #228]	; (8003954 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	015b      	lsls	r3, r3, #5
 8003874:	0d1b      	lsrs	r3, r3, #20
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	fb02 f303 	mul.w	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800387e:	e054      	b.n	800392a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d050      	beq.n	800392a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003888:	f7fd ffe2 	bl	8001850 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	429a      	cmp	r2, r3
 8003896:	d902      	bls.n	800389e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d13d      	bne.n	800391a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038b6:	d111      	bne.n	80038dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c0:	d004      	beq.n	80038cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ca:	d107      	bne.n	80038dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e4:	d10f      	bne.n	8003906 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003904:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e017      	b.n	800394a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	3b01      	subs	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4013      	ands	r3, r2
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	429a      	cmp	r2, r3
 8003938:	bf0c      	ite	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	2300      	movne	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	429a      	cmp	r2, r3
 8003946:	d19b      	bne.n	8003880 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000010 	.word	0x20000010

08003958 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396c:	d111      	bne.n	8003992 <SPI_EndRxTransaction+0x3a>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003976:	d004      	beq.n	8003982 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003980:	d107      	bne.n	8003992 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800399a:	d12a      	bne.n	80039f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a4:	d012      	beq.n	80039cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2200      	movs	r2, #0
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7ff ff49 	bl	8003848 <SPI_WaitFlagStateUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02d      	beq.n	8003a18 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e026      	b.n	8003a1a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2200      	movs	r2, #0
 80039d4:	2101      	movs	r1, #1
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff ff36 	bl	8003848 <SPI_WaitFlagStateUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01a      	beq.n	8003a18 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e013      	b.n	8003a1a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2101      	movs	r1, #1
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff ff23 	bl	8003848 <SPI_WaitFlagStateUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d007      	beq.n	8003a18 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e000      	b.n	8003a1a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <SPI_EndRxTxTransaction+0x7c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <SPI_EndRxTxTransaction+0x80>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0d5b      	lsrs	r3, r3, #21
 8003a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a40:	fb02 f303 	mul.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4e:	d112      	bne.n	8003a76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	2180      	movs	r1, #128	; 0x80
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7ff fef4 	bl	8003848 <SPI_WaitFlagStateUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e00f      	b.n	8003a96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b80      	cmp	r3, #128	; 0x80
 8003a8e:	d0f2      	beq.n	8003a76 <SPI_EndRxTxTransaction+0x52>
 8003a90:	e000      	b.n	8003a94 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a92:	bf00      	nop
  }

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000010 	.word	0x20000010
 8003aa4:	165e9f81 	.word	0x165e9f81

08003aa8 <siprintf>:
 8003aa8:	b40e      	push	{r1, r2, r3}
 8003aaa:	b500      	push	{lr}
 8003aac:	b09c      	sub	sp, #112	; 0x70
 8003aae:	ab1d      	add	r3, sp, #116	; 0x74
 8003ab0:	9002      	str	r0, [sp, #8]
 8003ab2:	9006      	str	r0, [sp, #24]
 8003ab4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ab8:	4809      	ldr	r0, [pc, #36]	; (8003ae0 <siprintf+0x38>)
 8003aba:	9107      	str	r1, [sp, #28]
 8003abc:	9104      	str	r1, [sp, #16]
 8003abe:	4909      	ldr	r1, [pc, #36]	; (8003ae4 <siprintf+0x3c>)
 8003ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ac4:	9105      	str	r1, [sp, #20]
 8003ac6:	6800      	ldr	r0, [r0, #0]
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	a902      	add	r1, sp, #8
 8003acc:	f000 f992 	bl	8003df4 <_svfiprintf_r>
 8003ad0:	9b02      	ldr	r3, [sp, #8]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	b01c      	add	sp, #112	; 0x70
 8003ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003adc:	b003      	add	sp, #12
 8003ade:	4770      	bx	lr
 8003ae0:	20000068 	.word	0x20000068
 8003ae4:	ffff0208 	.word	0xffff0208

08003ae8 <memset>:
 8003ae8:	4402      	add	r2, r0
 8003aea:	4603      	mov	r3, r0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d100      	bne.n	8003af2 <memset+0xa>
 8003af0:	4770      	bx	lr
 8003af2:	f803 1b01 	strb.w	r1, [r3], #1
 8003af6:	e7f9      	b.n	8003aec <memset+0x4>

08003af8 <__errno>:
 8003af8:	4b01      	ldr	r3, [pc, #4]	; (8003b00 <__errno+0x8>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000068 	.word	0x20000068

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4d0d      	ldr	r5, [pc, #52]	; (8003b3c <__libc_init_array+0x38>)
 8003b08:	4c0d      	ldr	r4, [pc, #52]	; (8003b40 <__libc_init_array+0x3c>)
 8003b0a:	1b64      	subs	r4, r4, r5
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	2600      	movs	r6, #0
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	4d0b      	ldr	r5, [pc, #44]	; (8003b44 <__libc_init_array+0x40>)
 8003b16:	4c0c      	ldr	r4, [pc, #48]	; (8003b48 <__libc_init_array+0x44>)
 8003b18:	f000 fc6a 	bl	80043f0 <_init>
 8003b1c:	1b64      	subs	r4, r4, r5
 8003b1e:	10a4      	asrs	r4, r4, #2
 8003b20:	2600      	movs	r6, #0
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	0800448c 	.word	0x0800448c
 8003b40:	0800448c 	.word	0x0800448c
 8003b44:	0800448c 	.word	0x0800448c
 8003b48:	08004490 	.word	0x08004490

08003b4c <__retarget_lock_acquire_recursive>:
 8003b4c:	4770      	bx	lr

08003b4e <__retarget_lock_release_recursive>:
 8003b4e:	4770      	bx	lr

08003b50 <_free_r>:
 8003b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b52:	2900      	cmp	r1, #0
 8003b54:	d044      	beq.n	8003be0 <_free_r+0x90>
 8003b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b5a:	9001      	str	r0, [sp, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8003b62:	bfb8      	it	lt
 8003b64:	18e4      	addlt	r4, r4, r3
 8003b66:	f000 f8df 	bl	8003d28 <__malloc_lock>
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <_free_r+0x94>)
 8003b6c:	9801      	ldr	r0, [sp, #4]
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	b933      	cbnz	r3, 8003b80 <_free_r+0x30>
 8003b72:	6063      	str	r3, [r4, #4]
 8003b74:	6014      	str	r4, [r2, #0]
 8003b76:	b003      	add	sp, #12
 8003b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b7c:	f000 b8da 	b.w	8003d34 <__malloc_unlock>
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	d908      	bls.n	8003b96 <_free_r+0x46>
 8003b84:	6825      	ldr	r5, [r4, #0]
 8003b86:	1961      	adds	r1, r4, r5
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	bf01      	itttt	eq
 8003b8c:	6819      	ldreq	r1, [r3, #0]
 8003b8e:	685b      	ldreq	r3, [r3, #4]
 8003b90:	1949      	addeq	r1, r1, r5
 8003b92:	6021      	streq	r1, [r4, #0]
 8003b94:	e7ed      	b.n	8003b72 <_free_r+0x22>
 8003b96:	461a      	mov	r2, r3
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	b10b      	cbz	r3, 8003ba0 <_free_r+0x50>
 8003b9c:	42a3      	cmp	r3, r4
 8003b9e:	d9fa      	bls.n	8003b96 <_free_r+0x46>
 8003ba0:	6811      	ldr	r1, [r2, #0]
 8003ba2:	1855      	adds	r5, r2, r1
 8003ba4:	42a5      	cmp	r5, r4
 8003ba6:	d10b      	bne.n	8003bc0 <_free_r+0x70>
 8003ba8:	6824      	ldr	r4, [r4, #0]
 8003baa:	4421      	add	r1, r4
 8003bac:	1854      	adds	r4, r2, r1
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	6011      	str	r1, [r2, #0]
 8003bb2:	d1e0      	bne.n	8003b76 <_free_r+0x26>
 8003bb4:	681c      	ldr	r4, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	6053      	str	r3, [r2, #4]
 8003bba:	440c      	add	r4, r1
 8003bbc:	6014      	str	r4, [r2, #0]
 8003bbe:	e7da      	b.n	8003b76 <_free_r+0x26>
 8003bc0:	d902      	bls.n	8003bc8 <_free_r+0x78>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	6003      	str	r3, [r0, #0]
 8003bc6:	e7d6      	b.n	8003b76 <_free_r+0x26>
 8003bc8:	6825      	ldr	r5, [r4, #0]
 8003bca:	1961      	adds	r1, r4, r5
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	bf04      	itt	eq
 8003bd0:	6819      	ldreq	r1, [r3, #0]
 8003bd2:	685b      	ldreq	r3, [r3, #4]
 8003bd4:	6063      	str	r3, [r4, #4]
 8003bd6:	bf04      	itt	eq
 8003bd8:	1949      	addeq	r1, r1, r5
 8003bda:	6021      	streq	r1, [r4, #0]
 8003bdc:	6054      	str	r4, [r2, #4]
 8003bde:	e7ca      	b.n	8003b76 <_free_r+0x26>
 8003be0:	b003      	add	sp, #12
 8003be2:	bd30      	pop	{r4, r5, pc}
 8003be4:	2000029c 	.word	0x2000029c

08003be8 <sbrk_aligned>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	4e0e      	ldr	r6, [pc, #56]	; (8003c24 <sbrk_aligned+0x3c>)
 8003bec:	460c      	mov	r4, r1
 8003bee:	6831      	ldr	r1, [r6, #0]
 8003bf0:	4605      	mov	r5, r0
 8003bf2:	b911      	cbnz	r1, 8003bfa <sbrk_aligned+0x12>
 8003bf4:	f000 fba6 	bl	8004344 <_sbrk_r>
 8003bf8:	6030      	str	r0, [r6, #0]
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f000 fba1 	bl	8004344 <_sbrk_r>
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	d00a      	beq.n	8003c1c <sbrk_aligned+0x34>
 8003c06:	1cc4      	adds	r4, r0, #3
 8003c08:	f024 0403 	bic.w	r4, r4, #3
 8003c0c:	42a0      	cmp	r0, r4
 8003c0e:	d007      	beq.n	8003c20 <sbrk_aligned+0x38>
 8003c10:	1a21      	subs	r1, r4, r0
 8003c12:	4628      	mov	r0, r5
 8003c14:	f000 fb96 	bl	8004344 <_sbrk_r>
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d101      	bne.n	8003c20 <sbrk_aligned+0x38>
 8003c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c20:	4620      	mov	r0, r4
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	200002a0 	.word	0x200002a0

08003c28 <_malloc_r>:
 8003c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c2c:	1ccd      	adds	r5, r1, #3
 8003c2e:	f025 0503 	bic.w	r5, r5, #3
 8003c32:	3508      	adds	r5, #8
 8003c34:	2d0c      	cmp	r5, #12
 8003c36:	bf38      	it	cc
 8003c38:	250c      	movcc	r5, #12
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	db01      	blt.n	8003c44 <_malloc_r+0x1c>
 8003c40:	42a9      	cmp	r1, r5
 8003c42:	d905      	bls.n	8003c50 <_malloc_r+0x28>
 8003c44:	230c      	movs	r3, #12
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	2600      	movs	r6, #0
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d24 <_malloc_r+0xfc>
 8003c54:	f000 f868 	bl	8003d28 <__malloc_lock>
 8003c58:	f8d8 3000 	ldr.w	r3, [r8]
 8003c5c:	461c      	mov	r4, r3
 8003c5e:	bb5c      	cbnz	r4, 8003cb8 <_malloc_r+0x90>
 8003c60:	4629      	mov	r1, r5
 8003c62:	4638      	mov	r0, r7
 8003c64:	f7ff ffc0 	bl	8003be8 <sbrk_aligned>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	d155      	bne.n	8003d1a <_malloc_r+0xf2>
 8003c6e:	f8d8 4000 	ldr.w	r4, [r8]
 8003c72:	4626      	mov	r6, r4
 8003c74:	2e00      	cmp	r6, #0
 8003c76:	d145      	bne.n	8003d04 <_malloc_r+0xdc>
 8003c78:	2c00      	cmp	r4, #0
 8003c7a:	d048      	beq.n	8003d0e <_malloc_r+0xe6>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4638      	mov	r0, r7
 8003c82:	eb04 0903 	add.w	r9, r4, r3
 8003c86:	f000 fb5d 	bl	8004344 <_sbrk_r>
 8003c8a:	4581      	cmp	r9, r0
 8003c8c:	d13f      	bne.n	8003d0e <_malloc_r+0xe6>
 8003c8e:	6821      	ldr	r1, [r4, #0]
 8003c90:	1a6d      	subs	r5, r5, r1
 8003c92:	4629      	mov	r1, r5
 8003c94:	4638      	mov	r0, r7
 8003c96:	f7ff ffa7 	bl	8003be8 <sbrk_aligned>
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d037      	beq.n	8003d0e <_malloc_r+0xe6>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	442b      	add	r3, r5
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d038      	beq.n	8003d1e <_malloc_r+0xf6>
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	42a2      	cmp	r2, r4
 8003cb0:	d12b      	bne.n	8003d0a <_malloc_r+0xe2>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	e00f      	b.n	8003cd8 <_malloc_r+0xb0>
 8003cb8:	6822      	ldr	r2, [r4, #0]
 8003cba:	1b52      	subs	r2, r2, r5
 8003cbc:	d41f      	bmi.n	8003cfe <_malloc_r+0xd6>
 8003cbe:	2a0b      	cmp	r2, #11
 8003cc0:	d917      	bls.n	8003cf2 <_malloc_r+0xca>
 8003cc2:	1961      	adds	r1, r4, r5
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	6025      	str	r5, [r4, #0]
 8003cc8:	bf18      	it	ne
 8003cca:	6059      	strne	r1, [r3, #4]
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	bf08      	it	eq
 8003cd0:	f8c8 1000 	streq.w	r1, [r8]
 8003cd4:	5162      	str	r2, [r4, r5]
 8003cd6:	604b      	str	r3, [r1, #4]
 8003cd8:	4638      	mov	r0, r7
 8003cda:	f104 060b 	add.w	r6, r4, #11
 8003cde:	f000 f829 	bl	8003d34 <__malloc_unlock>
 8003ce2:	f026 0607 	bic.w	r6, r6, #7
 8003ce6:	1d23      	adds	r3, r4, #4
 8003ce8:	1af2      	subs	r2, r6, r3
 8003cea:	d0ae      	beq.n	8003c4a <_malloc_r+0x22>
 8003cec:	1b9b      	subs	r3, r3, r6
 8003cee:	50a3      	str	r3, [r4, r2]
 8003cf0:	e7ab      	b.n	8003c4a <_malloc_r+0x22>
 8003cf2:	42a3      	cmp	r3, r4
 8003cf4:	6862      	ldr	r2, [r4, #4]
 8003cf6:	d1dd      	bne.n	8003cb4 <_malloc_r+0x8c>
 8003cf8:	f8c8 2000 	str.w	r2, [r8]
 8003cfc:	e7ec      	b.n	8003cd8 <_malloc_r+0xb0>
 8003cfe:	4623      	mov	r3, r4
 8003d00:	6864      	ldr	r4, [r4, #4]
 8003d02:	e7ac      	b.n	8003c5e <_malloc_r+0x36>
 8003d04:	4634      	mov	r4, r6
 8003d06:	6876      	ldr	r6, [r6, #4]
 8003d08:	e7b4      	b.n	8003c74 <_malloc_r+0x4c>
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	e7cc      	b.n	8003ca8 <_malloc_r+0x80>
 8003d0e:	230c      	movs	r3, #12
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4638      	mov	r0, r7
 8003d14:	f000 f80e 	bl	8003d34 <__malloc_unlock>
 8003d18:	e797      	b.n	8003c4a <_malloc_r+0x22>
 8003d1a:	6025      	str	r5, [r4, #0]
 8003d1c:	e7dc      	b.n	8003cd8 <_malloc_r+0xb0>
 8003d1e:	605b      	str	r3, [r3, #4]
 8003d20:	deff      	udf	#255	; 0xff
 8003d22:	bf00      	nop
 8003d24:	2000029c 	.word	0x2000029c

08003d28 <__malloc_lock>:
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <__malloc_lock+0x8>)
 8003d2a:	f7ff bf0f 	b.w	8003b4c <__retarget_lock_acquire_recursive>
 8003d2e:	bf00      	nop
 8003d30:	20000298 	.word	0x20000298

08003d34 <__malloc_unlock>:
 8003d34:	4801      	ldr	r0, [pc, #4]	; (8003d3c <__malloc_unlock+0x8>)
 8003d36:	f7ff bf0a 	b.w	8003b4e <__retarget_lock_release_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	20000298 	.word	0x20000298

08003d40 <__ssputs_r>:
 8003d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d44:	688e      	ldr	r6, [r1, #8]
 8003d46:	461f      	mov	r7, r3
 8003d48:	42be      	cmp	r6, r7
 8003d4a:	680b      	ldr	r3, [r1, #0]
 8003d4c:	4682      	mov	sl, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4690      	mov	r8, r2
 8003d52:	d82c      	bhi.n	8003dae <__ssputs_r+0x6e>
 8003d54:	898a      	ldrh	r2, [r1, #12]
 8003d56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d5a:	d026      	beq.n	8003daa <__ssputs_r+0x6a>
 8003d5c:	6965      	ldr	r5, [r4, #20]
 8003d5e:	6909      	ldr	r1, [r1, #16]
 8003d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d64:	eba3 0901 	sub.w	r9, r3, r1
 8003d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d6c:	1c7b      	adds	r3, r7, #1
 8003d6e:	444b      	add	r3, r9
 8003d70:	106d      	asrs	r5, r5, #1
 8003d72:	429d      	cmp	r5, r3
 8003d74:	bf38      	it	cc
 8003d76:	461d      	movcc	r5, r3
 8003d78:	0553      	lsls	r3, r2, #21
 8003d7a:	d527      	bpl.n	8003dcc <__ssputs_r+0x8c>
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	f7ff ff53 	bl	8003c28 <_malloc_r>
 8003d82:	4606      	mov	r6, r0
 8003d84:	b360      	cbz	r0, 8003de0 <__ssputs_r+0xa0>
 8003d86:	6921      	ldr	r1, [r4, #16]
 8003d88:	464a      	mov	r2, r9
 8003d8a:	f000 faeb 	bl	8004364 <memcpy>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	6126      	str	r6, [r4, #16]
 8003d9c:	6165      	str	r5, [r4, #20]
 8003d9e:	444e      	add	r6, r9
 8003da0:	eba5 0509 	sub.w	r5, r5, r9
 8003da4:	6026      	str	r6, [r4, #0]
 8003da6:	60a5      	str	r5, [r4, #8]
 8003da8:	463e      	mov	r6, r7
 8003daa:	42be      	cmp	r6, r7
 8003dac:	d900      	bls.n	8003db0 <__ssputs_r+0x70>
 8003dae:	463e      	mov	r6, r7
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	4632      	mov	r2, r6
 8003db4:	4641      	mov	r1, r8
 8003db6:	f000 faab 	bl	8004310 <memmove>
 8003dba:	68a3      	ldr	r3, [r4, #8]
 8003dbc:	1b9b      	subs	r3, r3, r6
 8003dbe:	60a3      	str	r3, [r4, #8]
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	4433      	add	r3, r6
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dcc:	462a      	mov	r2, r5
 8003dce:	f000 fad7 	bl	8004380 <_realloc_r>
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d1e0      	bne.n	8003d9a <__ssputs_r+0x5a>
 8003dd8:	6921      	ldr	r1, [r4, #16]
 8003dda:	4650      	mov	r0, sl
 8003ddc:	f7ff feb8 	bl	8003b50 <_free_r>
 8003de0:	230c      	movs	r3, #12
 8003de2:	f8ca 3000 	str.w	r3, [sl]
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dec:	81a3      	strh	r3, [r4, #12]
 8003dee:	f04f 30ff 	mov.w	r0, #4294967295
 8003df2:	e7e9      	b.n	8003dc8 <__ssputs_r+0x88>

08003df4 <_svfiprintf_r>:
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	4698      	mov	r8, r3
 8003dfa:	898b      	ldrh	r3, [r1, #12]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	b09d      	sub	sp, #116	; 0x74
 8003e00:	4607      	mov	r7, r0
 8003e02:	460d      	mov	r5, r1
 8003e04:	4614      	mov	r4, r2
 8003e06:	d50e      	bpl.n	8003e26 <_svfiprintf_r+0x32>
 8003e08:	690b      	ldr	r3, [r1, #16]
 8003e0a:	b963      	cbnz	r3, 8003e26 <_svfiprintf_r+0x32>
 8003e0c:	2140      	movs	r1, #64	; 0x40
 8003e0e:	f7ff ff0b 	bl	8003c28 <_malloc_r>
 8003e12:	6028      	str	r0, [r5, #0]
 8003e14:	6128      	str	r0, [r5, #16]
 8003e16:	b920      	cbnz	r0, 8003e22 <_svfiprintf_r+0x2e>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	e0d0      	b.n	8003fc4 <_svfiprintf_r+0x1d0>
 8003e22:	2340      	movs	r3, #64	; 0x40
 8003e24:	616b      	str	r3, [r5, #20]
 8003e26:	2300      	movs	r3, #0
 8003e28:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2a:	2320      	movs	r3, #32
 8003e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e34:	2330      	movs	r3, #48	; 0x30
 8003e36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fdc <_svfiprintf_r+0x1e8>
 8003e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e3e:	f04f 0901 	mov.w	r9, #1
 8003e42:	4623      	mov	r3, r4
 8003e44:	469a      	mov	sl, r3
 8003e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e4a:	b10a      	cbz	r2, 8003e50 <_svfiprintf_r+0x5c>
 8003e4c:	2a25      	cmp	r2, #37	; 0x25
 8003e4e:	d1f9      	bne.n	8003e44 <_svfiprintf_r+0x50>
 8003e50:	ebba 0b04 	subs.w	fp, sl, r4
 8003e54:	d00b      	beq.n	8003e6e <_svfiprintf_r+0x7a>
 8003e56:	465b      	mov	r3, fp
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	f7ff ff6f 	bl	8003d40 <__ssputs_r>
 8003e62:	3001      	adds	r0, #1
 8003e64:	f000 80a9 	beq.w	8003fba <_svfiprintf_r+0x1c6>
 8003e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e6a:	445a      	add	r2, fp
 8003e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80a1 	beq.w	8003fba <_svfiprintf_r+0x1c6>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e82:	f10a 0a01 	add.w	sl, sl, #1
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	9307      	str	r3, [sp, #28]
 8003e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003e90:	4654      	mov	r4, sl
 8003e92:	2205      	movs	r2, #5
 8003e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e98:	4850      	ldr	r0, [pc, #320]	; (8003fdc <_svfiprintf_r+0x1e8>)
 8003e9a:	f7fc f9a1 	bl	80001e0 <memchr>
 8003e9e:	9a04      	ldr	r2, [sp, #16]
 8003ea0:	b9d8      	cbnz	r0, 8003eda <_svfiprintf_r+0xe6>
 8003ea2:	06d0      	lsls	r0, r2, #27
 8003ea4:	bf44      	itt	mi
 8003ea6:	2320      	movmi	r3, #32
 8003ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eac:	0711      	lsls	r1, r2, #28
 8003eae:	bf44      	itt	mi
 8003eb0:	232b      	movmi	r3, #43	; 0x2b
 8003eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eba:	2b2a      	cmp	r3, #42	; 0x2a
 8003ebc:	d015      	beq.n	8003eea <_svfiprintf_r+0xf6>
 8003ebe:	9a07      	ldr	r2, [sp, #28]
 8003ec0:	4654      	mov	r4, sl
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f04f 0c0a 	mov.w	ip, #10
 8003ec8:	4621      	mov	r1, r4
 8003eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ece:	3b30      	subs	r3, #48	; 0x30
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d94d      	bls.n	8003f70 <_svfiprintf_r+0x17c>
 8003ed4:	b1b0      	cbz	r0, 8003f04 <_svfiprintf_r+0x110>
 8003ed6:	9207      	str	r2, [sp, #28]
 8003ed8:	e014      	b.n	8003f04 <_svfiprintf_r+0x110>
 8003eda:	eba0 0308 	sub.w	r3, r0, r8
 8003ede:	fa09 f303 	lsl.w	r3, r9, r3
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	9304      	str	r3, [sp, #16]
 8003ee6:	46a2      	mov	sl, r4
 8003ee8:	e7d2      	b.n	8003e90 <_svfiprintf_r+0x9c>
 8003eea:	9b03      	ldr	r3, [sp, #12]
 8003eec:	1d19      	adds	r1, r3, #4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	9103      	str	r1, [sp, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bfbb      	ittet	lt
 8003ef6:	425b      	neglt	r3, r3
 8003ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8003efc:	9307      	strge	r3, [sp, #28]
 8003efe:	9307      	strlt	r3, [sp, #28]
 8003f00:	bfb8      	it	lt
 8003f02:	9204      	strlt	r2, [sp, #16]
 8003f04:	7823      	ldrb	r3, [r4, #0]
 8003f06:	2b2e      	cmp	r3, #46	; 0x2e
 8003f08:	d10c      	bne.n	8003f24 <_svfiprintf_r+0x130>
 8003f0a:	7863      	ldrb	r3, [r4, #1]
 8003f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0e:	d134      	bne.n	8003f7a <_svfiprintf_r+0x186>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	9203      	str	r2, [sp, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bfb8      	it	lt
 8003f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f20:	3402      	adds	r4, #2
 8003f22:	9305      	str	r3, [sp, #20]
 8003f24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003fec <_svfiprintf_r+0x1f8>
 8003f28:	7821      	ldrb	r1, [r4, #0]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	f7fc f957 	bl	80001e0 <memchr>
 8003f32:	b138      	cbz	r0, 8003f44 <_svfiprintf_r+0x150>
 8003f34:	9b04      	ldr	r3, [sp, #16]
 8003f36:	eba0 000a 	sub.w	r0, r0, sl
 8003f3a:	2240      	movs	r2, #64	; 0x40
 8003f3c:	4082      	lsls	r2, r0
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	3401      	adds	r4, #1
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f48:	4825      	ldr	r0, [pc, #148]	; (8003fe0 <_svfiprintf_r+0x1ec>)
 8003f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f4e:	2206      	movs	r2, #6
 8003f50:	f7fc f946 	bl	80001e0 <memchr>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d038      	beq.n	8003fca <_svfiprintf_r+0x1d6>
 8003f58:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <_svfiprintf_r+0x1f0>)
 8003f5a:	bb1b      	cbnz	r3, 8003fa4 <_svfiprintf_r+0x1b0>
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	3307      	adds	r3, #7
 8003f60:	f023 0307 	bic.w	r3, r3, #7
 8003f64:	3308      	adds	r3, #8
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6a:	4433      	add	r3, r6
 8003f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6e:	e768      	b.n	8003e42 <_svfiprintf_r+0x4e>
 8003f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f74:	460c      	mov	r4, r1
 8003f76:	2001      	movs	r0, #1
 8003f78:	e7a6      	b.n	8003ec8 <_svfiprintf_r+0xd4>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	3401      	adds	r4, #1
 8003f7e:	9305      	str	r3, [sp, #20]
 8003f80:	4619      	mov	r1, r3
 8003f82:	f04f 0c0a 	mov.w	ip, #10
 8003f86:	4620      	mov	r0, r4
 8003f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f8c:	3a30      	subs	r2, #48	; 0x30
 8003f8e:	2a09      	cmp	r2, #9
 8003f90:	d903      	bls.n	8003f9a <_svfiprintf_r+0x1a6>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0c6      	beq.n	8003f24 <_svfiprintf_r+0x130>
 8003f96:	9105      	str	r1, [sp, #20]
 8003f98:	e7c4      	b.n	8003f24 <_svfiprintf_r+0x130>
 8003f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e7f0      	b.n	8003f86 <_svfiprintf_r+0x192>
 8003fa4:	ab03      	add	r3, sp, #12
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	462a      	mov	r2, r5
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <_svfiprintf_r+0x1f4>)
 8003fac:	a904      	add	r1, sp, #16
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f3af 8000 	nop.w
 8003fb4:	1c42      	adds	r2, r0, #1
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	d1d6      	bne.n	8003f68 <_svfiprintf_r+0x174>
 8003fba:	89ab      	ldrh	r3, [r5, #12]
 8003fbc:	065b      	lsls	r3, r3, #25
 8003fbe:	f53f af2d 	bmi.w	8003e1c <_svfiprintf_r+0x28>
 8003fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc4:	b01d      	add	sp, #116	; 0x74
 8003fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fca:	ab03      	add	r3, sp, #12
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	462a      	mov	r2, r5
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <_svfiprintf_r+0x1f4>)
 8003fd2:	a904      	add	r1, sp, #16
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	f000 f879 	bl	80040cc <_printf_i>
 8003fda:	e7eb      	b.n	8003fb4 <_svfiprintf_r+0x1c0>
 8003fdc:	08004450 	.word	0x08004450
 8003fe0:	0800445a 	.word	0x0800445a
 8003fe4:	00000000 	.word	0x00000000
 8003fe8:	08003d41 	.word	0x08003d41
 8003fec:	08004456 	.word	0x08004456

08003ff0 <_printf_common>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	688a      	ldr	r2, [r1, #8]
 8003ffa:	690b      	ldr	r3, [r1, #16]
 8003ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004000:	4293      	cmp	r3, r2
 8004002:	bfb8      	it	lt
 8004004:	4613      	movlt	r3, r2
 8004006:	6033      	str	r3, [r6, #0]
 8004008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400c:	4607      	mov	r7, r0
 800400e:	460c      	mov	r4, r1
 8004010:	b10a      	cbz	r2, 8004016 <_printf_common+0x26>
 8004012:	3301      	adds	r3, #1
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	0699      	lsls	r1, r3, #26
 800401a:	bf42      	ittt	mi
 800401c:	6833      	ldrmi	r3, [r6, #0]
 800401e:	3302      	addmi	r3, #2
 8004020:	6033      	strmi	r3, [r6, #0]
 8004022:	6825      	ldr	r5, [r4, #0]
 8004024:	f015 0506 	ands.w	r5, r5, #6
 8004028:	d106      	bne.n	8004038 <_printf_common+0x48>
 800402a:	f104 0a19 	add.w	sl, r4, #25
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	6832      	ldr	r2, [r6, #0]
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	42ab      	cmp	r3, r5
 8004036:	dc26      	bgt.n	8004086 <_printf_common+0x96>
 8004038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800403c:	1e13      	subs	r3, r2, #0
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	bf18      	it	ne
 8004042:	2301      	movne	r3, #1
 8004044:	0692      	lsls	r2, r2, #26
 8004046:	d42b      	bmi.n	80040a0 <_printf_common+0xb0>
 8004048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800404c:	4649      	mov	r1, r9
 800404e:	4638      	mov	r0, r7
 8004050:	47c0      	blx	r8
 8004052:	3001      	adds	r0, #1
 8004054:	d01e      	beq.n	8004094 <_printf_common+0xa4>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	6922      	ldr	r2, [r4, #16]
 800405a:	f003 0306 	and.w	r3, r3, #6
 800405e:	2b04      	cmp	r3, #4
 8004060:	bf02      	ittt	eq
 8004062:	68e5      	ldreq	r5, [r4, #12]
 8004064:	6833      	ldreq	r3, [r6, #0]
 8004066:	1aed      	subeq	r5, r5, r3
 8004068:	68a3      	ldr	r3, [r4, #8]
 800406a:	bf0c      	ite	eq
 800406c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004070:	2500      	movne	r5, #0
 8004072:	4293      	cmp	r3, r2
 8004074:	bfc4      	itt	gt
 8004076:	1a9b      	subgt	r3, r3, r2
 8004078:	18ed      	addgt	r5, r5, r3
 800407a:	2600      	movs	r6, #0
 800407c:	341a      	adds	r4, #26
 800407e:	42b5      	cmp	r5, r6
 8004080:	d11a      	bne.n	80040b8 <_printf_common+0xc8>
 8004082:	2000      	movs	r0, #0
 8004084:	e008      	b.n	8004098 <_printf_common+0xa8>
 8004086:	2301      	movs	r3, #1
 8004088:	4652      	mov	r2, sl
 800408a:	4649      	mov	r1, r9
 800408c:	4638      	mov	r0, r7
 800408e:	47c0      	blx	r8
 8004090:	3001      	adds	r0, #1
 8004092:	d103      	bne.n	800409c <_printf_common+0xac>
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409c:	3501      	adds	r5, #1
 800409e:	e7c6      	b.n	800402e <_printf_common+0x3e>
 80040a0:	18e1      	adds	r1, r4, r3
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	2030      	movs	r0, #48	; 0x30
 80040a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040aa:	4422      	add	r2, r4
 80040ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040b4:	3302      	adds	r3, #2
 80040b6:	e7c7      	b.n	8004048 <_printf_common+0x58>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4622      	mov	r2, r4
 80040bc:	4649      	mov	r1, r9
 80040be:	4638      	mov	r0, r7
 80040c0:	47c0      	blx	r8
 80040c2:	3001      	adds	r0, #1
 80040c4:	d0e6      	beq.n	8004094 <_printf_common+0xa4>
 80040c6:	3601      	adds	r6, #1
 80040c8:	e7d9      	b.n	800407e <_printf_common+0x8e>
	...

080040cc <_printf_i>:
 80040cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d0:	7e0f      	ldrb	r7, [r1, #24]
 80040d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040d4:	2f78      	cmp	r7, #120	; 0x78
 80040d6:	4691      	mov	r9, r2
 80040d8:	4680      	mov	r8, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	469a      	mov	sl, r3
 80040de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040e2:	d807      	bhi.n	80040f4 <_printf_i+0x28>
 80040e4:	2f62      	cmp	r7, #98	; 0x62
 80040e6:	d80a      	bhi.n	80040fe <_printf_i+0x32>
 80040e8:	2f00      	cmp	r7, #0
 80040ea:	f000 80d4 	beq.w	8004296 <_printf_i+0x1ca>
 80040ee:	2f58      	cmp	r7, #88	; 0x58
 80040f0:	f000 80c0 	beq.w	8004274 <_printf_i+0x1a8>
 80040f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040fc:	e03a      	b.n	8004174 <_printf_i+0xa8>
 80040fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004102:	2b15      	cmp	r3, #21
 8004104:	d8f6      	bhi.n	80040f4 <_printf_i+0x28>
 8004106:	a101      	add	r1, pc, #4	; (adr r1, 800410c <_printf_i+0x40>)
 8004108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800410c:	08004165 	.word	0x08004165
 8004110:	08004179 	.word	0x08004179
 8004114:	080040f5 	.word	0x080040f5
 8004118:	080040f5 	.word	0x080040f5
 800411c:	080040f5 	.word	0x080040f5
 8004120:	080040f5 	.word	0x080040f5
 8004124:	08004179 	.word	0x08004179
 8004128:	080040f5 	.word	0x080040f5
 800412c:	080040f5 	.word	0x080040f5
 8004130:	080040f5 	.word	0x080040f5
 8004134:	080040f5 	.word	0x080040f5
 8004138:	0800427d 	.word	0x0800427d
 800413c:	080041a5 	.word	0x080041a5
 8004140:	08004237 	.word	0x08004237
 8004144:	080040f5 	.word	0x080040f5
 8004148:	080040f5 	.word	0x080040f5
 800414c:	0800429f 	.word	0x0800429f
 8004150:	080040f5 	.word	0x080040f5
 8004154:	080041a5 	.word	0x080041a5
 8004158:	080040f5 	.word	0x080040f5
 800415c:	080040f5 	.word	0x080040f5
 8004160:	0800423f 	.word	0x0800423f
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	602a      	str	r2, [r5, #0]
 800416c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004174:	2301      	movs	r3, #1
 8004176:	e09f      	b.n	80042b8 <_printf_i+0x1ec>
 8004178:	6820      	ldr	r0, [r4, #0]
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	0607      	lsls	r7, r0, #24
 800417e:	f103 0104 	add.w	r1, r3, #4
 8004182:	6029      	str	r1, [r5, #0]
 8004184:	d501      	bpl.n	800418a <_printf_i+0xbe>
 8004186:	681e      	ldr	r6, [r3, #0]
 8004188:	e003      	b.n	8004192 <_printf_i+0xc6>
 800418a:	0646      	lsls	r6, r0, #25
 800418c:	d5fb      	bpl.n	8004186 <_printf_i+0xba>
 800418e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004192:	2e00      	cmp	r6, #0
 8004194:	da03      	bge.n	800419e <_printf_i+0xd2>
 8004196:	232d      	movs	r3, #45	; 0x2d
 8004198:	4276      	negs	r6, r6
 800419a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800419e:	485a      	ldr	r0, [pc, #360]	; (8004308 <_printf_i+0x23c>)
 80041a0:	230a      	movs	r3, #10
 80041a2:	e012      	b.n	80041ca <_printf_i+0xfe>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	6820      	ldr	r0, [r4, #0]
 80041a8:	1d19      	adds	r1, r3, #4
 80041aa:	6029      	str	r1, [r5, #0]
 80041ac:	0605      	lsls	r5, r0, #24
 80041ae:	d501      	bpl.n	80041b4 <_printf_i+0xe8>
 80041b0:	681e      	ldr	r6, [r3, #0]
 80041b2:	e002      	b.n	80041ba <_printf_i+0xee>
 80041b4:	0641      	lsls	r1, r0, #25
 80041b6:	d5fb      	bpl.n	80041b0 <_printf_i+0xe4>
 80041b8:	881e      	ldrh	r6, [r3, #0]
 80041ba:	4853      	ldr	r0, [pc, #332]	; (8004308 <_printf_i+0x23c>)
 80041bc:	2f6f      	cmp	r7, #111	; 0x6f
 80041be:	bf0c      	ite	eq
 80041c0:	2308      	moveq	r3, #8
 80041c2:	230a      	movne	r3, #10
 80041c4:	2100      	movs	r1, #0
 80041c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ca:	6865      	ldr	r5, [r4, #4]
 80041cc:	60a5      	str	r5, [r4, #8]
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	bfa2      	ittt	ge
 80041d2:	6821      	ldrge	r1, [r4, #0]
 80041d4:	f021 0104 	bicge.w	r1, r1, #4
 80041d8:	6021      	strge	r1, [r4, #0]
 80041da:	b90e      	cbnz	r6, 80041e0 <_printf_i+0x114>
 80041dc:	2d00      	cmp	r5, #0
 80041de:	d04b      	beq.n	8004278 <_printf_i+0x1ac>
 80041e0:	4615      	mov	r5, r2
 80041e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80041e6:	fb03 6711 	mls	r7, r3, r1, r6
 80041ea:	5dc7      	ldrb	r7, [r0, r7]
 80041ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041f0:	4637      	mov	r7, r6
 80041f2:	42bb      	cmp	r3, r7
 80041f4:	460e      	mov	r6, r1
 80041f6:	d9f4      	bls.n	80041e2 <_printf_i+0x116>
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d10b      	bne.n	8004214 <_printf_i+0x148>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	07de      	lsls	r6, r3, #31
 8004200:	d508      	bpl.n	8004214 <_printf_i+0x148>
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	6861      	ldr	r1, [r4, #4]
 8004206:	4299      	cmp	r1, r3
 8004208:	bfde      	ittt	le
 800420a:	2330      	movle	r3, #48	; 0x30
 800420c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004214:	1b52      	subs	r2, r2, r5
 8004216:	6122      	str	r2, [r4, #16]
 8004218:	f8cd a000 	str.w	sl, [sp]
 800421c:	464b      	mov	r3, r9
 800421e:	aa03      	add	r2, sp, #12
 8004220:	4621      	mov	r1, r4
 8004222:	4640      	mov	r0, r8
 8004224:	f7ff fee4 	bl	8003ff0 <_printf_common>
 8004228:	3001      	adds	r0, #1
 800422a:	d14a      	bne.n	80042c2 <_printf_i+0x1f6>
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	b004      	add	sp, #16
 8004232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	f043 0320 	orr.w	r3, r3, #32
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	4833      	ldr	r0, [pc, #204]	; (800430c <_printf_i+0x240>)
 8004240:	2778      	movs	r7, #120	; 0x78
 8004242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	6829      	ldr	r1, [r5, #0]
 800424a:	061f      	lsls	r7, r3, #24
 800424c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004250:	d402      	bmi.n	8004258 <_printf_i+0x18c>
 8004252:	065f      	lsls	r7, r3, #25
 8004254:	bf48      	it	mi
 8004256:	b2b6      	uxthmi	r6, r6
 8004258:	07df      	lsls	r7, r3, #31
 800425a:	bf48      	it	mi
 800425c:	f043 0320 	orrmi.w	r3, r3, #32
 8004260:	6029      	str	r1, [r5, #0]
 8004262:	bf48      	it	mi
 8004264:	6023      	strmi	r3, [r4, #0]
 8004266:	b91e      	cbnz	r6, 8004270 <_printf_i+0x1a4>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	f023 0320 	bic.w	r3, r3, #32
 800426e:	6023      	str	r3, [r4, #0]
 8004270:	2310      	movs	r3, #16
 8004272:	e7a7      	b.n	80041c4 <_printf_i+0xf8>
 8004274:	4824      	ldr	r0, [pc, #144]	; (8004308 <_printf_i+0x23c>)
 8004276:	e7e4      	b.n	8004242 <_printf_i+0x176>
 8004278:	4615      	mov	r5, r2
 800427a:	e7bd      	b.n	80041f8 <_printf_i+0x12c>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	6826      	ldr	r6, [r4, #0]
 8004280:	6961      	ldr	r1, [r4, #20]
 8004282:	1d18      	adds	r0, r3, #4
 8004284:	6028      	str	r0, [r5, #0]
 8004286:	0635      	lsls	r5, r6, #24
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	d501      	bpl.n	8004290 <_printf_i+0x1c4>
 800428c:	6019      	str	r1, [r3, #0]
 800428e:	e002      	b.n	8004296 <_printf_i+0x1ca>
 8004290:	0670      	lsls	r0, r6, #25
 8004292:	d5fb      	bpl.n	800428c <_printf_i+0x1c0>
 8004294:	8019      	strh	r1, [r3, #0]
 8004296:	2300      	movs	r3, #0
 8004298:	6123      	str	r3, [r4, #16]
 800429a:	4615      	mov	r5, r2
 800429c:	e7bc      	b.n	8004218 <_printf_i+0x14c>
 800429e:	682b      	ldr	r3, [r5, #0]
 80042a0:	1d1a      	adds	r2, r3, #4
 80042a2:	602a      	str	r2, [r5, #0]
 80042a4:	681d      	ldr	r5, [r3, #0]
 80042a6:	6862      	ldr	r2, [r4, #4]
 80042a8:	2100      	movs	r1, #0
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7fb ff98 	bl	80001e0 <memchr>
 80042b0:	b108      	cbz	r0, 80042b6 <_printf_i+0x1ea>
 80042b2:	1b40      	subs	r0, r0, r5
 80042b4:	6060      	str	r0, [r4, #4]
 80042b6:	6863      	ldr	r3, [r4, #4]
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	2300      	movs	r3, #0
 80042bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c0:	e7aa      	b.n	8004218 <_printf_i+0x14c>
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	462a      	mov	r2, r5
 80042c6:	4649      	mov	r1, r9
 80042c8:	4640      	mov	r0, r8
 80042ca:	47d0      	blx	sl
 80042cc:	3001      	adds	r0, #1
 80042ce:	d0ad      	beq.n	800422c <_printf_i+0x160>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	079b      	lsls	r3, r3, #30
 80042d4:	d413      	bmi.n	80042fe <_printf_i+0x232>
 80042d6:	68e0      	ldr	r0, [r4, #12]
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	4298      	cmp	r0, r3
 80042dc:	bfb8      	it	lt
 80042de:	4618      	movlt	r0, r3
 80042e0:	e7a6      	b.n	8004230 <_printf_i+0x164>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4632      	mov	r2, r6
 80042e6:	4649      	mov	r1, r9
 80042e8:	4640      	mov	r0, r8
 80042ea:	47d0      	blx	sl
 80042ec:	3001      	adds	r0, #1
 80042ee:	d09d      	beq.n	800422c <_printf_i+0x160>
 80042f0:	3501      	adds	r5, #1
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	9903      	ldr	r1, [sp, #12]
 80042f6:	1a5b      	subs	r3, r3, r1
 80042f8:	42ab      	cmp	r3, r5
 80042fa:	dcf2      	bgt.n	80042e2 <_printf_i+0x216>
 80042fc:	e7eb      	b.n	80042d6 <_printf_i+0x20a>
 80042fe:	2500      	movs	r5, #0
 8004300:	f104 0619 	add.w	r6, r4, #25
 8004304:	e7f5      	b.n	80042f2 <_printf_i+0x226>
 8004306:	bf00      	nop
 8004308:	08004461 	.word	0x08004461
 800430c:	08004472 	.word	0x08004472

08004310 <memmove>:
 8004310:	4288      	cmp	r0, r1
 8004312:	b510      	push	{r4, lr}
 8004314:	eb01 0402 	add.w	r4, r1, r2
 8004318:	d902      	bls.n	8004320 <memmove+0x10>
 800431a:	4284      	cmp	r4, r0
 800431c:	4623      	mov	r3, r4
 800431e:	d807      	bhi.n	8004330 <memmove+0x20>
 8004320:	1e43      	subs	r3, r0, #1
 8004322:	42a1      	cmp	r1, r4
 8004324:	d008      	beq.n	8004338 <memmove+0x28>
 8004326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800432a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800432e:	e7f8      	b.n	8004322 <memmove+0x12>
 8004330:	4402      	add	r2, r0
 8004332:	4601      	mov	r1, r0
 8004334:	428a      	cmp	r2, r1
 8004336:	d100      	bne.n	800433a <memmove+0x2a>
 8004338:	bd10      	pop	{r4, pc}
 800433a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800433e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004342:	e7f7      	b.n	8004334 <memmove+0x24>

08004344 <_sbrk_r>:
 8004344:	b538      	push	{r3, r4, r5, lr}
 8004346:	4d06      	ldr	r5, [pc, #24]	; (8004360 <_sbrk_r+0x1c>)
 8004348:	2300      	movs	r3, #0
 800434a:	4604      	mov	r4, r0
 800434c:	4608      	mov	r0, r1
 800434e:	602b      	str	r3, [r5, #0]
 8004350:	f7fd f9a6 	bl	80016a0 <_sbrk>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_sbrk_r+0x1a>
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	b103      	cbz	r3, 800435e <_sbrk_r+0x1a>
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	20000294 	.word	0x20000294

08004364 <memcpy>:
 8004364:	440a      	add	r2, r1
 8004366:	4291      	cmp	r1, r2
 8004368:	f100 33ff 	add.w	r3, r0, #4294967295
 800436c:	d100      	bne.n	8004370 <memcpy+0xc>
 800436e:	4770      	bx	lr
 8004370:	b510      	push	{r4, lr}
 8004372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800437a:	4291      	cmp	r1, r2
 800437c:	d1f9      	bne.n	8004372 <memcpy+0xe>
 800437e:	bd10      	pop	{r4, pc}

08004380 <_realloc_r>:
 8004380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	4680      	mov	r8, r0
 8004386:	4614      	mov	r4, r2
 8004388:	460e      	mov	r6, r1
 800438a:	b921      	cbnz	r1, 8004396 <_realloc_r+0x16>
 800438c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004390:	4611      	mov	r1, r2
 8004392:	f7ff bc49 	b.w	8003c28 <_malloc_r>
 8004396:	b92a      	cbnz	r2, 80043a4 <_realloc_r+0x24>
 8004398:	f7ff fbda 	bl	8003b50 <_free_r>
 800439c:	4625      	mov	r5, r4
 800439e:	4628      	mov	r0, r5
 80043a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a4:	f000 f81b 	bl	80043de <_malloc_usable_size_r>
 80043a8:	4284      	cmp	r4, r0
 80043aa:	4607      	mov	r7, r0
 80043ac:	d802      	bhi.n	80043b4 <_realloc_r+0x34>
 80043ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043b2:	d812      	bhi.n	80043da <_realloc_r+0x5a>
 80043b4:	4621      	mov	r1, r4
 80043b6:	4640      	mov	r0, r8
 80043b8:	f7ff fc36 	bl	8003c28 <_malloc_r>
 80043bc:	4605      	mov	r5, r0
 80043be:	2800      	cmp	r0, #0
 80043c0:	d0ed      	beq.n	800439e <_realloc_r+0x1e>
 80043c2:	42bc      	cmp	r4, r7
 80043c4:	4622      	mov	r2, r4
 80043c6:	4631      	mov	r1, r6
 80043c8:	bf28      	it	cs
 80043ca:	463a      	movcs	r2, r7
 80043cc:	f7ff ffca 	bl	8004364 <memcpy>
 80043d0:	4631      	mov	r1, r6
 80043d2:	4640      	mov	r0, r8
 80043d4:	f7ff fbbc 	bl	8003b50 <_free_r>
 80043d8:	e7e1      	b.n	800439e <_realloc_r+0x1e>
 80043da:	4635      	mov	r5, r6
 80043dc:	e7df      	b.n	800439e <_realloc_r+0x1e>

080043de <_malloc_usable_size_r>:
 80043de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e2:	1f18      	subs	r0, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bfbc      	itt	lt
 80043e8:	580b      	ldrlt	r3, [r1, r0]
 80043ea:	18c0      	addlt	r0, r0, r3
 80043ec:	4770      	bx	lr
	...

080043f0 <_init>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr

080043fc <_fini>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr
