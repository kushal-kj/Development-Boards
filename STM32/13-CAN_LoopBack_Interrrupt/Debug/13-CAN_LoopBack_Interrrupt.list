
13-CAN_LoopBack_Interrrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800316c  0800316c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800316c  0800316c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800316c  0800316c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  080031d0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080031d0  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008623  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001754  00000000  00000000  000286eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  00029e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e4  00000000  00000000  0002a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017134  00000000  00000000  0002abe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e4c  00000000  00000000  00041d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084809  00000000  00000000  0004ab64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023f0  00000000  00000000  000cf370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  000d1760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003064 	.word	0x08003064

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003064 	.word	0x08003064

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan);


int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  HAL_Init();
 8000160:	f000 fbc4 	bl	80008ec <HAL_Init>

  SystemClock_Config();
 8000164:	f000 f95e 	bl	8000424 <SystemClock_Config>

  MX_GPIO_Init();
 8000168:	f000 f9ca 	bl	8000500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016c:	f000 f99e 	bl	80004ac <MX_USART2_UART_Init>

  CAN_init();
 8000170:	f000 f81a 	bl	80001a8 <CAN_init>

  CAN_Filter_Config();
 8000174:	f000 f880 	bl	8000278 <CAN_Filter_Config>

  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) !=HAL_OK)
 8000178:	f240 4103 	movw	r1, #1027	; 0x403
 800017c:	4809      	ldr	r0, [pc, #36]	; (80001a4 <main+0x48>)
 800017e:	f001 f80f 	bl	80011a0 <HAL_CAN_ActivateNotification>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d001      	beq.n	800018c <main+0x30>
  {
	  Error_Handler();
 8000188:	f000 fa10 	bl	80005ac <Error_Handler>
  }

  if(HAL_CAN_Start(&hcan) !=HAL_OK)
 800018c:	4805      	ldr	r0, [pc, #20]	; (80001a4 <main+0x48>)
 800018e:	f000 fdd3 	bl	8000d38 <HAL_CAN_Start>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <main+0x40>
  {
	  Error_Handler();
 8000198:	f000 fa08 	bl	80005ac <Error_Handler>
  }

  CAN_TX();
 800019c:	f000 f83c 	bl	8000218 <CAN_TX>


  while (1)
 80001a0:	e7fe      	b.n	80001a0 <main+0x44>
 80001a2:	bf00      	nop
 80001a4:	20000078 	.word	0x20000078

080001a8 <CAN_init>:

  }
}

void CAN_init()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	  hcan.Instance = CAN1;
 80001ac:	4b18      	ldr	r3, [pc, #96]	; (8000210 <CAN_init+0x68>)
 80001ae:	4a19      	ldr	r2, [pc, #100]	; (8000214 <CAN_init+0x6c>)
 80001b0:	601a      	str	r2, [r3, #0]
	  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80001b2:	4b17      	ldr	r3, [pc, #92]	; (8000210 <CAN_init+0x68>)
 80001b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001b8:	609a      	str	r2, [r3, #8]

	  hcan.Init.AutoBusOff = DISABLE;
 80001ba:	4b15      	ldr	r3, [pc, #84]	; (8000210 <CAN_init+0x68>)
 80001bc:	2200      	movs	r2, #0
 80001be:	765a      	strb	r2, [r3, #25]
	  hcan.Init.AutoWakeUp = DISABLE;
 80001c0:	4b13      	ldr	r3, [pc, #76]	; (8000210 <CAN_init+0x68>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	769a      	strb	r2, [r3, #26]
	  hcan.Init.AutoRetransmission = ENABLE;
 80001c6:	4b12      	ldr	r3, [pc, #72]	; (8000210 <CAN_init+0x68>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	76da      	strb	r2, [r3, #27]
	  hcan.Init.ReceiveFifoLocked = DISABLE;
 80001cc:	4b10      	ldr	r3, [pc, #64]	; (8000210 <CAN_init+0x68>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	771a      	strb	r2, [r3, #28]
	  hcan.Init.TransmitFifoPriority = DISABLE;
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <CAN_init+0x68>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	775a      	strb	r2, [r3, #29]
	  hcan.Init.TimeTriggeredMode = DISABLE;
 80001d8:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <CAN_init+0x68>)
 80001da:	2200      	movs	r2, #0
 80001dc:	761a      	strb	r2, [r3, #24]

	  //Settings related to CAN bit timings

	  hcan.Init.Prescaler = 2;
 80001de:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <CAN_init+0x68>)
 80001e0:	2202      	movs	r2, #2
 80001e2:	605a      	str	r2, [r3, #4]
	  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <CAN_init+0x68>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	60da      	str	r2, [r3, #12]
	  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80001ea:	4b09      	ldr	r3, [pc, #36]	; (8000210 <CAN_init+0x68>)
 80001ec:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80001f0:	611a      	str	r2, [r3, #16]
	  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80001f2:	4b07      	ldr	r3, [pc, #28]	; (8000210 <CAN_init+0x68>)
 80001f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80001f8:	615a      	str	r2, [r3, #20]

	  if(HAL_CAN_Init(&hcan) !=HAL_OK)
 80001fa:	4805      	ldr	r0, [pc, #20]	; (8000210 <CAN_init+0x68>)
 80001fc:	f000 fbd8 	bl	80009b0 <HAL_CAN_Init>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <CAN_init+0x62>
	  {
		  Error_Handler();
 8000206:	f000 f9d1 	bl	80005ac <Error_Handler>
	  }
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	20000078 	.word	0x20000078
 8000214:	40006400 	.word	0x40006400

08000218 <CAN_TX>:


void CAN_TX(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	; 0x28
 800021c:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef TxHeader;		//Transmit handler

	uint32_t TxMailbox;

	uint8_t our_message[5]={'H','E','L','L','O'};		//Data to be transmitted
 800021e:	4a14      	ldr	r2, [pc, #80]	; (8000270 <CAN_TX+0x58>)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000226:	6018      	str	r0, [r3, #0]
 8000228:	3304      	adds	r3, #4
 800022a:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC=5;					//5 bytes of data length
 800022c:	2305      	movs	r3, #5
 800022e:	623b      	str	r3, [r7, #32]
	TxHeader.StdId=0x65D;			//Standard itentifier
 8000230:	f240 635d 	movw	r3, #1629	; 0x65d
 8000234:	613b      	str	r3, [r7, #16]
	TxHeader.IDE=CAN_ID_STD;
 8000236:	2300      	movs	r3, #0
 8000238:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR=CAN_RTR_DATA;		//Data frame
 800023a:	2300      	movs	r3, #0
 800023c:	61fb      	str	r3, [r7, #28]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, our_message, &TxMailbox);	//Add the transmit message to mailbox
 800023e:	f107 030c 	add.w	r3, r7, #12
 8000242:	1d3a      	adds	r2, r7, #4
 8000244:	f107 0110 	add.w	r1, r7, #16
 8000248:	480a      	ldr	r0, [pc, #40]	; (8000274 <CAN_TX+0x5c>)
 800024a:	f000 fdb9 	bl	8000dc0 <HAL_CAN_AddTxMessage>

	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, our_message, &TxMailbox)!=HAL_OK)			//To check if it executes correctly or not
 800024e:	f107 030c 	add.w	r3, r7, #12
 8000252:	1d3a      	adds	r2, r7, #4
 8000254:	f107 0110 	add.w	r1, r7, #16
 8000258:	4806      	ldr	r0, [pc, #24]	; (8000274 <CAN_TX+0x5c>)
 800025a:	f000 fdb1 	bl	8000dc0 <HAL_CAN_AddTxMessage>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <CAN_TX+0x50>
	{
		Error_Handler();
 8000264:	f000 f9a2 	bl	80005ac <Error_Handler>
	}




}
 8000268:	bf00      	nop
 800026a:	3728      	adds	r7, #40	; 0x28
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	0800307c 	.word	0x0800307c
 8000274:	20000078 	.word	0x20000078

08000278 <CAN_Filter_Config>:


}

void CAN_Filter_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	; 0x28
 800027c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter_init;		//handler for CAN_Filter

	can_filter_init.FilterActivation = ENABLE;
 800027e:	2301      	movs	r3, #1
 8000280:	623b      	str	r3, [r7, #32]
	can_filter_init.FilterBank = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]
	can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
	can_filter_init.FilterIdHigh=0x0000;
 800028a:	2300      	movs	r3, #0
 800028c:	603b      	str	r3, [r7, #0]
	can_filter_init.FilterIdLow=0x0000;
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
	can_filter_init.FilterMaskIdHigh=0x0000;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
	can_filter_init.FilterMaskIdLow=0x0000;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
	can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 800029a:	2300      	movs	r3, #0
 800029c:	61bb      	str	r3, [r7, #24]
	can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 800029e:	2301      	movs	r3, #1
 80002a0:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan, &can_filter_init) !=HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	4619      	mov	r1, r3
 80002a6:	4806      	ldr	r0, [pc, #24]	; (80002c0 <CAN_Filter_Config+0x48>)
 80002a8:	f000 fc7d 	bl	8000ba6 <HAL_CAN_ConfigFilter>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 80002b2:	f000 f97b 	bl	80005ac <Error_Handler>
	}
}
 80002b6:	bf00      	nop
 80002b8:	3728      	adds	r7, #40	; 0x28
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000078 	.word	0x20000078

080002c4 <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	char msg[50];

	sprintf(msg,"Message Transmitted : M0 \r\n");
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	490a      	ldr	r1, [pc, #40]	; (80002fc <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fa14 	bl	8002700 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ff35 	bl	800014c <strlen>
 80002e2:	4603      	mov	r3, r0
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	f107 010c 	add.w	r1, r7, #12
 80002ea:	f04f 33ff 	mov.w	r3, #4294967295
 80002ee:	4804      	ldr	r0, [pc, #16]	; (8000300 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80002f0:	f002 f886 	bl	8002400 <HAL_UART_Transmit>
}
 80002f4:	bf00      	nop
 80002f6:	3740      	adds	r7, #64	; 0x40
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	08003084 	.word	0x08003084
 8000300:	200000a0 	.word	0x200000a0

08000304 <HAL_CAN_TxMailbox1CompleteCallback>:


void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b090      	sub	sp, #64	; 0x40
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	char msg[50];

	sprintf(msg,"Message Transmitted : M1\r\n");
 800030c:	f107 030c 	add.w	r3, r7, #12
 8000310:	490a      	ldr	r1, [pc, #40]	; (800033c <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000312:	4618      	mov	r0, r3
 8000314:	f002 f9f4 	bl	8002700 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000318:	f107 030c 	add.w	r3, r7, #12
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff15 	bl	800014c <strlen>
 8000322:	4603      	mov	r3, r0
 8000324:	b29a      	uxth	r2, r3
 8000326:	f107 010c 	add.w	r1, r7, #12
 800032a:	f04f 33ff 	mov.w	r3, #4294967295
 800032e:	4804      	ldr	r0, [pc, #16]	; (8000340 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000330:	f002 f866 	bl	8002400 <HAL_UART_Transmit>
}
 8000334:	bf00      	nop
 8000336:	3740      	adds	r7, #64	; 0x40
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	080030a0 	.word	0x080030a0
 8000340:	200000a0 	.word	0x200000a0

08000344 <HAL_CAN_TxMailbox2CompleteCallback>:


void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b090      	sub	sp, #64	; 0x40
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	char msg[50];

	sprintf(msg,"Message Transmitted : M2\r\n");
 800034c:	f107 030c 	add.w	r3, r7, #12
 8000350:	490a      	ldr	r1, [pc, #40]	; (800037c <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000352:	4618      	mov	r0, r3
 8000354:	f002 f9d4 	bl	8002700 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff fef5 	bl	800014c <strlen>
 8000362:	4603      	mov	r3, r0
 8000364:	b29a      	uxth	r2, r3
 8000366:	f107 010c 	add.w	r1, r7, #12
 800036a:	f04f 33ff 	mov.w	r3, #4294967295
 800036e:	4804      	ldr	r0, [pc, #16]	; (8000380 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000370:	f002 f846 	bl	8002400 <HAL_UART_Transmit>
}
 8000374:	bf00      	nop
 8000376:	3740      	adds	r7, #64	; 0x40
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	080030bc 	.word	0x080030bc
 8000380:	200000a0 	.word	0x200000a0

08000384 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b098      	sub	sp, #96	; 0x60
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]

	char msg[50];



	if(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, receive_msg) !=HAL_OK)
 800038c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000390:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000394:	1d38      	adds	r0, r7, #4
 8000396:	2100      	movs	r1, #0
 8000398:	f000 fde1 	bl	8000f5e <HAL_CAN_GetRxMessage>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_Handler();
 80003a2:	f000 f903 	bl	80005ac <Error_Handler>
	}

	sprintf(msg,"Message Received : %s \r\n",receive_msg);
 80003a6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	490b      	ldr	r1, [pc, #44]	; (80003dc <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80003b0:	4618      	mov	r0, r3
 80003b2:	f002 f9a5 	bl	8002700 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80003b6:	f107 0308 	add.w	r3, r7, #8
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff fec6 	bl	800014c <strlen>
 80003c0:	4603      	mov	r3, r0
 80003c2:	b29a      	uxth	r2, r3
 80003c4:	f107 0108 	add.w	r1, r7, #8
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80003ce:	f002 f817 	bl	8002400 <HAL_UART_Transmit>
}
 80003d2:	bf00      	nop
 80003d4:	3760      	adds	r7, #96	; 0x60
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	080030d8 	.word	0x080030d8
 80003e0:	200000a0 	.word	0x200000a0

080003e4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b090      	sub	sp, #64	; 0x40
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	char msg[50];

	sprintf(msg,"CAN ERROR OCCURRED\r\n");
 80003ec:	f107 030c 	add.w	r3, r7, #12
 80003f0:	490a      	ldr	r1, [pc, #40]	; (800041c <HAL_CAN_ErrorCallback+0x38>)
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 f984 	bl	8002700 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff fea5 	bl	800014c <strlen>
 8000402:	4603      	mov	r3, r0
 8000404:	b29a      	uxth	r2, r3
 8000406:	f107 010c 	add.w	r1, r7, #12
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
 800040e:	4804      	ldr	r0, [pc, #16]	; (8000420 <HAL_CAN_ErrorCallback+0x3c>)
 8000410:	f001 fff6 	bl	8002400 <HAL_UART_Transmit>
}
 8000414:	bf00      	nop
 8000416:	3740      	adds	r7, #64	; 0x40
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	080030f4 	.word	0x080030f4
 8000420:	200000a0 	.word	0x200000a0

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b090      	sub	sp, #64	; 0x40
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0318 	add.w	r3, r7, #24
 800042e:	2228      	movs	r2, #40	; 0x28
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f002 f984 	bl	8002740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000446:	2301      	movs	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800044a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000454:	2301      	movs	r3, #1
 8000456:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000458:	2302      	movs	r3, #2
 800045a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000460:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000462:	2300      	movs	r3, #0
 8000464:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fb66 	bl	8001b3c <HAL_RCC_OscConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000476:	f000 f899 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047a:	230f      	movs	r3, #15
 800047c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047e:	2302      	movs	r3, #2
 8000480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2101      	movs	r1, #1
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fdd4 	bl	8002040 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800049e:	f000 f885 	bl	80005ac <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3740      	adds	r7, #64	; 0x40
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_USART2_UART_Init+0x4c>)
 80004b2:	4a12      	ldr	r2, [pc, #72]	; (80004fc <MX_USART2_UART_Init+0x50>)
 80004b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <MX_USART2_UART_Init+0x4c>)
 80004b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_USART2_UART_Init+0x4c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_USART2_UART_Init+0x4c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_USART2_UART_Init+0x4c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_USART2_UART_Init+0x4c>)
 80004d2:	220c      	movs	r2, #12
 80004d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_USART2_UART_Init+0x4c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_USART2_UART_Init+0x4c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_USART2_UART_Init+0x4c>)
 80004e4:	f001 ff3c 	bl	8002360 <HAL_UART_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ee:	f000 f85d 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200000a0 	.word	0x200000a0
 80004fc:	40004400 	.word	0x40004400

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <MX_GPIO_Init+0xa4>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <MX_GPIO_Init+0xa4>)
 800051a:	f043 0310 	orr.w	r3, r3, #16
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_GPIO_Init+0xa4>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0310 	and.w	r3, r3, #16
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_GPIO_Init+0xa4>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <MX_GPIO_Init+0xa4>)
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_GPIO_Init+0xa4>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0320 	and.w	r3, r3, #32
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_GPIO_Init+0xa4>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <MX_GPIO_Init+0xa4>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_GPIO_Init+0xa4>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0304 	and.w	r3, r3, #4
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2120      	movs	r1, #32
 8000560:	4811      	ldr	r0, [pc, #68]	; (80005a8 <MX_GPIO_Init+0xa8>)
 8000562:	f001 fad3 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000566:	2320      	movs	r3, #32
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2302      	movs	r3, #2
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	480a      	ldr	r0, [pc, #40]	; (80005a8 <MX_GPIO_Init+0xa8>)
 800057e:	f001 f941 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000582:	2340      	movs	r3, #64	; 0x40
 8000584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_GPIO_Init+0xa8>)
 8000596:	f001 f935 	bl	8001804 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800059a:	bf00      	nop
 800059c:	3720      	adds	r7, #32
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40010800 	.word	0x40010800

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <Error_Handler+0x8>
	...

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a14      	ldr	r2, [pc, #80]	; (8000614 <HAL_MspInit+0x5c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x5c>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_MspInit+0x60>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_MspInit+0x60>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a2c      	ldr	r2, [pc, #176]	; (80006e8 <HAL_CAN_MspInit+0xcc>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d151      	bne.n	80006e0 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <HAL_CAN_MspInit+0xd0>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	4a2a      	ldr	r2, [pc, #168]	; (80006ec <HAL_CAN_MspInit+0xd0>)
 8000642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000646:	61d3      	str	r3, [r2, #28]
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <HAL_CAN_MspInit+0xd0>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <HAL_CAN_MspInit+0xd0>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a24      	ldr	r2, [pc, #144]	; (80006ec <HAL_CAN_MspInit+0xd0>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <HAL_CAN_MspInit+0xd0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800066c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	481b      	ldr	r0, [pc, #108]	; (80006f0 <HAL_CAN_MspInit+0xd4>)
 8000682:	f001 f8bf 	bl	8001804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <HAL_CAN_MspInit+0xd4>)
 800069c:	f001 f8b2 	bl	8001804 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 15, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	210f      	movs	r1, #15
 80006a4:	2013      	movs	r0, #19
 80006a6:	f001 f876 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 15, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	210f      	movs	r1, #15
 80006ae:	2014      	movs	r0, #20
 80006b0:	f001 f871 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	210f      	movs	r1, #15
 80006b8:	2015      	movs	r0, #21
 80006ba:	f001 f86c 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	210f      	movs	r1, #15
 80006c2:	2016      	movs	r0, #22
 80006c4:	f001 f867 	bl	8001796 <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80006c8:	2013      	movs	r0, #19
 80006ca:	f001 f880 	bl	80017ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006ce:	2014      	movs	r0, #20
 80006d0:	f001 f87d 	bl	80017ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006d4:	2015      	movs	r0, #21
 80006d6:	f001 f87a 	bl	80017ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80006da:	2016      	movs	r0, #22
 80006dc:	f001 f877 	bl	80017ce <HAL_NVIC_EnableIRQ>


  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40006400 	.word	0x40006400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010800 	.word	0x40010800

080006f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a1b      	ldr	r2, [pc, #108]	; (800077c <HAL_UART_MspInit+0x88>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d12f      	bne.n	8000774 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <HAL_UART_MspInit+0x8c>)
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_UART_MspInit+0x8c>)
 800071a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071e:	61d3      	str	r3, [r2, #28]
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_UART_MspInit+0x8c>)
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_UART_MspInit+0x8c>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a13      	ldr	r2, [pc, #76]	; (8000780 <HAL_UART_MspInit+0x8c>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_UART_MspInit+0x8c>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000744:	2304      	movs	r3, #4
 8000746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <HAL_UART_MspInit+0x90>)
 8000758:	f001 f854 	bl	8001804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800075c:	2308      	movs	r3, #8
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <HAL_UART_MspInit+0x90>)
 8000770:	f001 f848 	bl	8001804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40004400 	.word	0x40004400
 8000780:	40021000 	.word	0x40021000
 8000784:	40010800 	.word	0x40010800

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ce:	f000 f8d3 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <USB_HP_CAN1_TX_IRQHandler>:
/* USER CODE BEGIN 1 */

extern CAN_HandleTypeDef hcan;

void USB_HP_CAN1_TX_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80007de:	f000 fd04 	bl	80011ea <HAL_CAN_IRQHandler>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000078 	.word	0x20000078

080007ec <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007f2:	f000 fcfa 	bl	80011ea <HAL_CAN_IRQHandler>

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000078 	.word	0x20000078

08000800 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <CAN1_RX1_IRQHandler+0x10>)
 8000806:	f000 fcf0 	bl	80011ea <HAL_CAN_IRQHandler>

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000078 	.word	0x20000078

08000814 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <CAN1_SCE_IRQHandler+0x10>)
 800081a:	f000 fce6 	bl	80011ea <HAL_CAN_IRQHandler>

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000078 	.word	0x20000078

08000828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000830:	4a14      	ldr	r2, [pc, #80]	; (8000884 <_sbrk+0x5c>)
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <_sbrk+0x60>)
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <_sbrk+0x64>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <_sbrk+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	429a      	cmp	r2, r3
 8000856:	d207      	bcs.n	8000868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000858:	f001 ff7a 	bl	8002750 <__errno>
 800085c:	4603      	mov	r3, r0
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	e009      	b.n	800087c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	4a05      	ldr	r2, [pc, #20]	; (800088c <_sbrk+0x64>)
 8000878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20005000 	.word	0x20005000
 8000888:	00000400 	.word	0x00000400
 800088c:	200000e8 	.word	0x200000e8
 8000890:	20000238 	.word	0x20000238

08000894 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a0:	f7ff fff8 	bl	8000894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008a6:	490c      	ldr	r1, [pc, #48]	; (80008d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008bc:	4c09      	ldr	r4, [pc, #36]	; (80008e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ca:	f001 ff47 	bl	800275c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ce:	f7ff fc45 	bl	800015c <main>
  bx lr
 80008d2:	4770      	bx	lr
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008dc:	08003174 	.word	0x08003174
  ldr r2, =_sbss
 80008e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008e4:	20000238 	.word	0x20000238

080008e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_2_IRQHandler>
	...

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 ff3f 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	200f      	movs	r0, #15
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fe56 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 ff57 	bl	80017ea <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 ff1f 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a03      	ldr	r2, [pc, #12]	; (8000998 <HAL_IncTick+0x20>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000008 	.word	0x20000008
 8000998:	200000ec 	.word	0x200000ec

0800099c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	200000ec 	.word	0x200000ec

080009b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e0ed      	b.n	8000b9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d102      	bne.n	80009d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff fe24 	bl	800061c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0201 	orr.w	r2, r2, #1
 80009e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009e4:	f7ff ffda 	bl	800099c <HAL_GetTick>
 80009e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009ea:	e012      	b.n	8000a12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009ec:	f7ff ffd6 	bl	800099c <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b0a      	cmp	r3, #10
 80009f8:	d90b      	bls.n	8000a12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2205      	movs	r2, #5
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e0c5      	b.n	8000b9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0e5      	beq.n	80009ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f022 0202 	bic.w	r2, r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a30:	f7ff ffb4 	bl	800099c <HAL_GetTick>
 8000a34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a36:	e012      	b.n	8000a5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a38:	f7ff ffb0 	bl	800099c <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	2b0a      	cmp	r3, #10
 8000a44:	d90b      	bls.n	8000a5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2205      	movs	r2, #5
 8000a56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e09f      	b.n	8000b9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1e5      	bne.n	8000a38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7e1b      	ldrb	r3, [r3, #24]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d108      	bne.n	8000a86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	e007      	b.n	8000a96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7e5b      	ldrb	r3, [r3, #25]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d108      	bne.n	8000ab0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	e007      	b.n	8000ac0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000abe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7e9b      	ldrb	r3, [r3, #26]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d108      	bne.n	8000ada <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f042 0220 	orr.w	r2, r2, #32
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e007      	b.n	8000aea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 0220 	bic.w	r2, r2, #32
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7edb      	ldrb	r3, [r3, #27]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d108      	bne.n	8000b04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f022 0210 	bic.w	r2, r2, #16
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	e007      	b.n	8000b14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0210 	orr.w	r2, r2, #16
 8000b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7f1b      	ldrb	r3, [r3, #28]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d108      	bne.n	8000b2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f042 0208 	orr.w	r2, r2, #8
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e007      	b.n	8000b3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0208 	bic.w	r2, r2, #8
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7f5b      	ldrb	r3, [r3, #29]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d108      	bne.n	8000b58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f042 0204 	orr.w	r2, r2, #4
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e007      	b.n	8000b68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 0204 	bic.w	r2, r2, #4
 8000b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	ea42 0103 	orr.w	r1, r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	1e5a      	subs	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b087      	sub	sp, #28
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bbc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bbe:	7cfb      	ldrb	r3, [r7, #19]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d003      	beq.n	8000bcc <HAL_CAN_ConfigFilter+0x26>
 8000bc4:	7cfb      	ldrb	r3, [r7, #19]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	f040 80aa 	bne.w	8000d20 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bd2:	f043 0201 	orr.w	r2, r3, #1
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	2201      	movs	r2, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d123      	bne.n	8000c4e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	401a      	ands	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3248      	adds	r2, #72	; 0x48
 8000c2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c44:	6979      	ldr	r1, [r7, #20]
 8000c46:	3348      	adds	r3, #72	; 0x48
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	440b      	add	r3, r1
 8000c4c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d122      	bne.n	8000c9c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3248      	adds	r2, #72	; 0x48
 8000c7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c92:	6979      	ldr	r1, [r7, #20]
 8000c94:	3348      	adds	r3, #72	; 0x48
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	440b      	add	r3, r1
 8000c9a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d109      	bne.n	8000cb8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000cb6:	e007      	b.n	8000cc8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000ce2:	e007      	b.n	8000cf4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d107      	bne.n	8000d0c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	431a      	orrs	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d12:	f023 0201 	bic.w	r2, r3, #1
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e006      	b.n	8000d2e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
  }
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d12e      	bne.n	8000daa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2202      	movs	r2, #2
 8000d50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d64:	f7ff fe1a 	bl	800099c <HAL_GetTick>
 8000d68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d6a:	e012      	b.n	8000d92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d6c:	f7ff fe16 	bl	800099c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d90b      	bls.n	8000d92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2205      	movs	r2, #5
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e012      	b.n	8000db8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e5      	bne.n	8000d6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e006      	b.n	8000db8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
  }
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dde:	7ffb      	ldrb	r3, [r7, #31]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d003      	beq.n	8000dec <HAL_CAN_AddTxMessage+0x2c>
 8000de4:	7ffb      	ldrb	r3, [r7, #31]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	f040 80ad 	bne.w	8000f46 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10a      	bne.n	8000e0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d105      	bne.n	8000e0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8095 	beq.w	8000f36 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	0e1b      	lsrs	r3, r3, #24
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e16:	2201      	movs	r2, #1
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10d      	bne.n	8000e44 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e32:	68f9      	ldr	r1, [r7, #12]
 8000e34:	6809      	ldr	r1, [r1, #0]
 8000e36:	431a      	orrs	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	3318      	adds	r3, #24
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	440b      	add	r3, r1
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e00f      	b.n	8000e64 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e4e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e54:	68f9      	ldr	r1, [r7, #12]
 8000e56:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e58:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3318      	adds	r3, #24
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	440b      	add	r3, r1
 8000e62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3318      	adds	r3, #24
 8000e70:	011b      	lsls	r3, r3, #4
 8000e72:	440b      	add	r3, r1
 8000e74:	3304      	adds	r3, #4
 8000e76:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	7d1b      	ldrb	r3, [r3, #20]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d111      	bne.n	8000ea4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3318      	adds	r3, #24
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	6811      	ldr	r1, [r2, #0]
 8000e94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3318      	adds	r3, #24
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3307      	adds	r3, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	061a      	lsls	r2, r3, #24
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3306      	adds	r3, #6
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	041b      	lsls	r3, r3, #16
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3305      	adds	r3, #5
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	3204      	adds	r2, #4
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	6811      	ldr	r1, [r2, #0]
 8000ecc:	ea43 0200 	orr.w	r2, r3, r0
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	440b      	add	r3, r1
 8000ed6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000eda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3303      	adds	r3, #3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	061a      	lsls	r2, r3, #24
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	041b      	lsls	r3, r3, #16
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	7812      	ldrb	r2, [r2, #0]
 8000efc:	4610      	mov	r0, r2
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	6811      	ldr	r1, [r2, #0]
 8000f02:	ea43 0200 	orr.w	r2, r3, r0
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3318      	adds	r3, #24
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	6811      	ldr	r1, [r2, #0]
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3318      	adds	r3, #24
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	440b      	add	r3, r1
 8000f30:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e00e      	b.n	8000f54 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e006      	b.n	8000f54 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
  }
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3724      	adds	r7, #36	; 0x24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b087      	sub	sp, #28
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f72:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d003      	beq.n	8000f82 <HAL_CAN_GetRxMessage+0x24>
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	f040 8103 	bne.w	8001188 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10e      	bne.n	8000fa6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d116      	bne.n	8000fc4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e0f7      	b.n	8001196 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d107      	bne.n	8000fc4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0e8      	b.n	8001196 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	331b      	adds	r3, #27
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	4413      	add	r3, r2
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0204 	and.w	r2, r3, #4
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10c      	bne.n	8000ffc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	331b      	adds	r3, #27
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	4413      	add	r3, r2
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0d5b      	lsrs	r3, r3, #21
 8000ff2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e00b      	b.n	8001014 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	331b      	adds	r3, #27
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	4413      	add	r3, r2
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	08db      	lsrs	r3, r3, #3
 800100c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	331b      	adds	r3, #27
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	4413      	add	r3, r2
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0202 	and.w	r2, r3, #2
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	331b      	adds	r3, #27
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4413      	add	r3, r2
 8001036:	3304      	adds	r3, #4
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2208      	movs	r2, #8
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	e00b      	b.n	8001062 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	331b      	adds	r3, #27
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	3304      	adds	r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 020f 	and.w	r2, r3, #15
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	331b      	adds	r3, #27
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	4413      	add	r3, r2
 800106e:	3304      	adds	r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b2da      	uxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	331b      	adds	r3, #27
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	4413      	add	r3, r2
 8001086:	3304      	adds	r3, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	0c1b      	lsrs	r3, r3, #16
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4413      	add	r3, r2
 800109c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4413      	add	r3, r2
 80010b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	0a1a      	lsrs	r2, r3, #8
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	4413      	add	r3, r2
 80010cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	0c1a      	lsrs	r2, r3, #16
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3302      	adds	r3, #2
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	4413      	add	r3, r2
 80010e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0e1a      	lsrs	r2, r3, #24
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	3303      	adds	r3, #3
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	4413      	add	r3, r2
 8001100:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3304      	adds	r3, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	4413      	add	r3, r2
 8001118:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0a1a      	lsrs	r2, r3, #8
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3305      	adds	r3, #5
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	4413      	add	r3, r2
 8001132:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0c1a      	lsrs	r2, r3, #16
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3306      	adds	r3, #6
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	4413      	add	r3, r2
 800114c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	0e1a      	lsrs	r2, r3, #24
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	3307      	adds	r3, #7
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d108      	bne.n	8001174 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0220 	orr.w	r2, r2, #32
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	e007      	b.n	8001184 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	e006      	b.n	8001196 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
  }
}
 8001196:	4618      	mov	r0, r3
 8001198:	371c      	adds	r7, #28
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d002      	beq.n	80011be <HAL_CAN_ActivateNotification+0x1e>
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d109      	bne.n	80011d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6959      	ldr	r1, [r3, #20]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e006      	b.n	80011e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
  }
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b08a      	sub	sp, #40	; 0x28
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d07c      	beq.n	800132a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d023      	beq.n	8001282 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2201      	movs	r2, #1
 8001240:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff f839 	bl	80002c4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001252:	e016      	b.n	8001282 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
 8001266:	e00c      	b.n	8001282 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	e002      	b.n	8001282 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f96b 	bl	8001558 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001288:	2b00      	cmp	r3, #0
 800128a:	d024      	beq.n	80012d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001294:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff f82f 	bl	8000304 <HAL_CAN_TxMailbox1CompleteCallback>
 80012a6:	e016      	b.n	80012d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d004      	beq.n	80012bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ba:	e00c      	b.n	80012d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
 80012ce:	e002      	b.n	80012d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f94a 	bl	800156a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d024      	beq.n	800132a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff f825 	bl	8000344 <HAL_CAN_TxMailbox2CompleteCallback>
 80012fa:	e016      	b.n	800132a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d004      	beq.n	8001310 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	e00c      	b.n	800132a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
 8001322:	e002      	b.n	800132a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f929 	bl	800157c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00c      	beq.n	800134e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001344:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2210      	movs	r2, #16
 800134c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2208      	movs	r2, #8
 8001368:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f90f 	bl	800158e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7fe fffb 	bl	8000384 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00c      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2210      	movs	r2, #16
 80013b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f003 0320 	and.w	r3, r3, #32
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00b      	beq.n	80013d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2208      	movs	r2, #8
 80013cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f8ef 	bl	80015b2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d009      	beq.n	80013f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f8d7 	bl	80015a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00b      	beq.n	8001414 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2210      	movs	r2, #16
 800140c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f8d8 	bl	80015c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2208      	movs	r2, #8
 800142e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f8d0 	bl	80015d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d07b      	beq.n	8001538 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2b00      	cmp	r3, #0
 8001448:	d072      	beq.n	8001530 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d043      	beq.n	8001530 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d03e      	beq.n	8001530 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014b8:	2b60      	cmp	r3, #96	; 0x60
 80014ba:	d02b      	beq.n	8001514 <HAL_CAN_IRQHandler+0x32a>
 80014bc:	2b60      	cmp	r3, #96	; 0x60
 80014be:	d82e      	bhi.n	800151e <HAL_CAN_IRQHandler+0x334>
 80014c0:	2b50      	cmp	r3, #80	; 0x50
 80014c2:	d022      	beq.n	800150a <HAL_CAN_IRQHandler+0x320>
 80014c4:	2b50      	cmp	r3, #80	; 0x50
 80014c6:	d82a      	bhi.n	800151e <HAL_CAN_IRQHandler+0x334>
 80014c8:	2b40      	cmp	r3, #64	; 0x40
 80014ca:	d019      	beq.n	8001500 <HAL_CAN_IRQHandler+0x316>
 80014cc:	2b40      	cmp	r3, #64	; 0x40
 80014ce:	d826      	bhi.n	800151e <HAL_CAN_IRQHandler+0x334>
 80014d0:	2b30      	cmp	r3, #48	; 0x30
 80014d2:	d010      	beq.n	80014f6 <HAL_CAN_IRQHandler+0x30c>
 80014d4:	2b30      	cmp	r3, #48	; 0x30
 80014d6:	d822      	bhi.n	800151e <HAL_CAN_IRQHandler+0x334>
 80014d8:	2b10      	cmp	r3, #16
 80014da:	d002      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x2f8>
 80014dc:	2b20      	cmp	r3, #32
 80014de:	d005      	beq.n	80014ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80014e0:	e01d      	b.n	800151e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014ea:	e019      	b.n	8001520 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014f4:	e014      	b.n	8001520 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014fe:	e00f      	b.n	8001520 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001508:	e00a      	b.n	8001520 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001512:	e005      	b.n	8001520 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800151c:	e000      	b.n	8001520 <HAL_CAN_IRQHandler+0x336>
            break;
 800151e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699a      	ldr	r2, [r3, #24]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800152e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2204      	movs	r2, #4
 8001536:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7fe ff4a 	bl	80003e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4906      	ldr	r1, [pc, #24]	; (8001680 <__NVIC_EnableIRQ+0x34>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff90 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff2d 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff42 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff90 	bl	80016d8 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5f 	bl	8001684 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff35 	bl	800164c <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa2 	bl	800173c <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001816:	e169      	b.n	8001aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001818:	2201      	movs	r2, #1
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8158 	bne.w	8001ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4a9a      	ldr	r2, [pc, #616]	; (8001aa4 <HAL_GPIO_Init+0x2a0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d05e      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001840:	4a98      	ldr	r2, [pc, #608]	; (8001aa4 <HAL_GPIO_Init+0x2a0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d875      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001846:	4a98      	ldr	r2, [pc, #608]	; (8001aa8 <HAL_GPIO_Init+0x2a4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d058      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 800184c:	4a96      	ldr	r2, [pc, #600]	; (8001aa8 <HAL_GPIO_Init+0x2a4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d86f      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001852:	4a96      	ldr	r2, [pc, #600]	; (8001aac <HAL_GPIO_Init+0x2a8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d052      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001858:	4a94      	ldr	r2, [pc, #592]	; (8001aac <HAL_GPIO_Init+0x2a8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d869      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800185e:	4a94      	ldr	r2, [pc, #592]	; (8001ab0 <HAL_GPIO_Init+0x2ac>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d04c      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001864:	4a92      	ldr	r2, [pc, #584]	; (8001ab0 <HAL_GPIO_Init+0x2ac>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d863      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800186a:	4a92      	ldr	r2, [pc, #584]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d046      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001870:	4a90      	ldr	r2, [pc, #576]	; (8001ab4 <HAL_GPIO_Init+0x2b0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d85d      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d82a      	bhi.n	80018d0 <HAL_GPIO_Init+0xcc>
 800187a:	2b12      	cmp	r3, #18
 800187c:	d859      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <HAL_GPIO_Init+0x80>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	080018ff 	.word	0x080018ff
 8001888:	080018d9 	.word	0x080018d9
 800188c:	080018eb 	.word	0x080018eb
 8001890:	0800192d 	.word	0x0800192d
 8001894:	08001933 	.word	0x08001933
 8001898:	08001933 	.word	0x08001933
 800189c:	08001933 	.word	0x08001933
 80018a0:	08001933 	.word	0x08001933
 80018a4:	08001933 	.word	0x08001933
 80018a8:	08001933 	.word	0x08001933
 80018ac:	08001933 	.word	0x08001933
 80018b0:	08001933 	.word	0x08001933
 80018b4:	08001933 	.word	0x08001933
 80018b8:	08001933 	.word	0x08001933
 80018bc:	08001933 	.word	0x08001933
 80018c0:	08001933 	.word	0x08001933
 80018c4:	08001933 	.word	0x08001933
 80018c8:	080018e1 	.word	0x080018e1
 80018cc:	080018f5 	.word	0x080018f5
 80018d0:	4a79      	ldr	r2, [pc, #484]	; (8001ab8 <HAL_GPIO_Init+0x2b4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d6:	e02c      	b.n	8001932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e029      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	3304      	adds	r3, #4
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e024      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	3308      	adds	r3, #8
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e01f      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	330c      	adds	r3, #12
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e01a      	b.n	8001934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001906:	2304      	movs	r3, #4
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e013      	b.n	8001934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001914:	2308      	movs	r3, #8
 8001916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	611a      	str	r2, [r3, #16]
          break;
 800191e:	e009      	b.n	8001934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001920:	2308      	movs	r3, #8
 8001922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	615a      	str	r2, [r3, #20]
          break;
 800192a:	e003      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x130>
          break;
 8001932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d801      	bhi.n	800193e <HAL_GPIO_Init+0x13a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_Init+0x13e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d802      	bhi.n	8001950 <HAL_GPIO_Init+0x14c>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0x152>
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	3b08      	subs	r3, #8
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	210f      	movs	r1, #15
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	6a39      	ldr	r1, [r7, #32]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	431a      	orrs	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80b1 	beq.w	8001ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001984:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <HAL_GPIO_Init+0x2b8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800199c:	4a48      	ldr	r2, [pc, #288]	; (8001ac0 <HAL_GPIO_Init+0x2bc>)
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a40      	ldr	r2, [pc, #256]	; (8001ac4 <HAL_GPIO_Init+0x2c0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d013      	beq.n	80019f0 <HAL_GPIO_Init+0x1ec>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <HAL_GPIO_Init+0x2c4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00d      	beq.n	80019ec <HAL_GPIO_Init+0x1e8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3e      	ldr	r2, [pc, #248]	; (8001acc <HAL_GPIO_Init+0x2c8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d007      	beq.n	80019e8 <HAL_GPIO_Init+0x1e4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <HAL_GPIO_Init+0x2cc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_GPIO_Init+0x1e0>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e006      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019e4:	2304      	movs	r3, #4
 80019e6:	e004      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e002      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_GPIO_Init+0x1ee>
 80019f0:	2300      	movs	r3, #0
 80019f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f4:	f002 0203 	and.w	r2, r2, #3
 80019f8:	0092      	lsls	r2, r2, #2
 80019fa:	4093      	lsls	r3, r2
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a02:	492f      	ldr	r1, [pc, #188]	; (8001ac0 <HAL_GPIO_Init+0x2bc>)
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	492c      	ldr	r1, [pc, #176]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4928      	ldr	r1, [pc, #160]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4922      	ldr	r1, [pc, #136]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	491e      	ldr	r1, [pc, #120]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4918      	ldr	r1, [pc, #96]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4914      	ldr	r1, [pc, #80]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d021      	beq.n	8001ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
 8001aa0:	e021      	b.n	8001ae6 <HAL_GPIO_Init+0x2e2>
 8001aa2:	bf00      	nop
 8001aa4:	10320000 	.word	0x10320000
 8001aa8:	10310000 	.word	0x10310000
 8001aac:	10220000 	.word	0x10220000
 8001ab0:	10210000 	.word	0x10210000
 8001ab4:	10120000 	.word	0x10120000
 8001ab8:	10110000 	.word	0x10110000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40010800 	.word	0x40010800
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	40011000 	.word	0x40011000
 8001ad0:	40011400 	.word	0x40011400
 8001ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	4909      	ldr	r1, [pc, #36]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f47f ae8e 	bne.w	8001818 <HAL_GPIO_Init+0x14>
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	372c      	adds	r7, #44	; 0x2c
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b28:	e003      	b.n	8001b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e272      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8087 	beq.w	8001c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5c:	4b92      	ldr	r3, [pc, #584]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d00c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b68:	4b8f      	ldr	r3, [pc, #572]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d112      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
 8001b74:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d10b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b82:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d06c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x12c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d168      	bne.n	8001c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e24c      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x76>
 8001ba4:	4b80      	ldr	r3, [pc, #512]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a7f      	ldr	r2, [pc, #508]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e02e      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x98>
 8001bba:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a77      	ldr	r2, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xbc>
 8001bde:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a71      	ldr	r2, [pc, #452]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6e      	ldr	r2, [pc, #440]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a6a      	ldr	r2, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a67      	ldr	r2, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7fe fec0 	bl	800099c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7fe febc 	bl	800099c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e200      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xe4>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7fe feac 	bl	800099c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7fe fea8 	bl	800099c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1ec      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x10c>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c76:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d11c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
 8001c8e:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e1c0      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4939      	ldr	r1, [pc, #228]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	e03a      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fe61 	bl	800099c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7fe fe5d 	bl	800099c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1a1      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4927      	ldr	r1, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe fe40 	bl	800099c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7fe fe3c 	bl	800099c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e180      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03a      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d019      	beq.n	8001d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7fe fe20 	bl	800099c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7fe fe1c 	bl	800099c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e160      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f000 fad0 	bl	8002324 <RCC_Delay>
 8001d84:	e01c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8c:	f7fe fe06 	bl	800099c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d92:	e00f      	b.n	8001db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d94:	f7fe fe02 	bl	800099c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d908      	bls.n	8001db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e146      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	42420000 	.word	0x42420000
 8001db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b92      	ldr	r3, [pc, #584]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e9      	bne.n	8001d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a6 	beq.w	8001f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b88      	ldr	r3, [pc, #544]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a87      	ldr	r2, [pc, #540]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b85      	ldr	r3, [pc, #532]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7e      	ldr	r2, [pc, #504]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7fe fdc3 	bl	800099c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7fe fdbf 	bl	800099c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b64      	cmp	r3, #100	; 0x64
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e103      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b75      	ldr	r3, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x312>
 8001e40:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a6e      	ldr	r2, [pc, #440]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	e02d      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x334>
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a69      	ldr	r2, [pc, #420]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a66      	ldr	r2, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	e01c      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d10c      	bne.n	8001e92 <HAL_RCC_OscConfig+0x356>
 8001e78:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a60      	ldr	r2, [pc, #384]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a5d      	ldr	r2, [pc, #372]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e00b      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e92:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a5a      	ldr	r2, [pc, #360]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	4b58      	ldr	r3, [pc, #352]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a57      	ldr	r2, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d015      	beq.n	8001ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7fe fd73 	bl	800099c <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe fd6f 	bl	800099c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0b1      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ee      	beq.n	8001eba <HAL_RCC_OscConfig+0x37e>
 8001edc:	e014      	b.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7fe fd5d 	bl	800099c <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7fe fd59 	bl	800099c <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e09b      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	4b40      	ldr	r3, [pc, #256]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a3b      	ldr	r2, [pc, #236]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8087 	beq.w	8002032 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f24:	4b36      	ldr	r3, [pc, #216]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d061      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d146      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fd2d 	bl	800099c <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7fe fd29 	bl	800099c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e06d      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d108      	bne.n	8001f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4921      	ldr	r1, [pc, #132]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a19      	ldr	r1, [r3, #32]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	430b      	orrs	r3, r1
 8001f92:	491b      	ldr	r1, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fcfd 	bl	800099c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe fcf9 	bl	800099c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e03d      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x46a>
 8001fc4:	e035      	b.n	8002032 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fce6 	bl	800099c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7fe fce2 	bl	800099c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e026      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x498>
 8001ff2:	e01e      	b.n	8002032 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e019      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
 8002008:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_OscConfig+0x500>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	429a      	cmp	r2, r3
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000

08002040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d910      	bls.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	4965      	ldr	r1, [pc, #404]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d040      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d115      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e073      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06b      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4936      	ldr	r1, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7fe fc34 	bl	800099c <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7fe fc30 	bl	800099c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e053      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d210      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4922      	ldr	r1, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1cc>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1d0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fb92 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	0800310c 	.word	0x0800310c
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d002      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x30>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x36>
 8002242:	e027      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002246:	613b      	str	r3, [r7, #16]
      break;
 8002248:	e027      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002254:	5cd3      	ldrb	r3, [r2, r3]
 8002256:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0c5b      	lsrs	r3, r3, #17
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002276:	fb03 f202 	mul.w	r2, r3, r2
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e004      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	613b      	str	r3, [r7, #16]
      break;
 8002292:	e002      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002296:	613b      	str	r3, [r7, #16]
      break;
 8002298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229a:	693b      	ldr	r3, [r7, #16]
}
 800229c:	4618      	mov	r0, r3
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	00f42400 	.word	0x00f42400
 80022b0:	08003124 	.word	0x08003124
 80022b4:	08003134 	.word	0x08003134
 80022b8:	003d0900 	.word	0x003d0900
 80022bc:	007a1200 	.word	0x007a1200

080022c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b02      	ldr	r3, [pc, #8]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	20000000 	.word	0x20000000

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022d8:	f7ff fff2 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4903      	ldr	r1, [pc, #12]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	0800311c 	.word	0x0800311c

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002300:	f7ff ffde 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4903      	ldr	r1, [pc, #12]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	0800311c 	.word	0x0800311c

08002324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <RCC_Delay+0x34>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <RCC_Delay+0x38>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0a5b      	lsrs	r3, r3, #9
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002340:	bf00      	nop
  }
  while (Delay --);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1e5a      	subs	r2, r3, #1
 8002346:	60fa      	str	r2, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f9      	bne.n	8002340 <RCC_Delay+0x1c>
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	20000000 	.word	0x20000000
 800235c:	10624dd3 	.word	0x10624dd3

08002360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e042      	b.n	80023f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe f9b4 	bl	80006f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2224      	movs	r2, #36	; 0x24
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f91d 	bl	80025e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b20      	cmp	r3, #32
 800241e:	d16d      	bne.n	80024fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_UART_Transmit+0x2c>
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e066      	b.n	80024fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2221      	movs	r2, #33	; 0x21
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800243e:	f7fe faad 	bl	800099c <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	88fa      	ldrh	r2, [r7, #6]
 8002448:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	88fa      	ldrh	r2, [r7, #6]
 800244e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002458:	d108      	bne.n	800246c <HAL_UART_Transmit+0x6c>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d104      	bne.n	800246c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	e003      	b.n	8002474 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002474:	e02a      	b.n	80024cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2200      	movs	r2, #0
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f840 	bl	8002506 <UART_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e036      	b.n	80024fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10b      	bne.n	80024ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	3302      	adds	r3, #2
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e007      	b.n	80024be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	3301      	adds	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1cf      	bne.n	8002476 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	2140      	movs	r1, #64	; 0x40
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f810 	bl	8002506 <UART_WaitOnFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e006      	b.n	80024fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e000      	b.n	80024fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024fc:	2302      	movs	r3, #2
  }
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b090      	sub	sp, #64	; 0x40
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002516:	e050      	b.n	80025ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251e:	d04c      	beq.n	80025ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <UART_WaitOnFlagUntilTimeout+0x30>
 8002526:	f7fe fa39 	bl	800099c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002532:	429a      	cmp	r2, r3
 8002534:	d241      	bcs.n	80025ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	330c      	adds	r3, #12
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	e853 3f00 	ldrex	r3, [r3]
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800254c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
 8002554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002556:	637a      	str	r2, [r7, #52]	; 0x34
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800255c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800255e:	e841 2300 	strex	r3, r2, [r1]
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e5      	bne.n	8002536 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3314      	adds	r3, #20
 8002570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	e853 3f00 	ldrex	r3, [r3]
 8002578:	613b      	str	r3, [r7, #16]
   return(result);
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	63bb      	str	r3, [r7, #56]	; 0x38
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3314      	adds	r3, #20
 8002588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800258a:	623a      	str	r2, [r7, #32]
 800258c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258e:	69f9      	ldr	r1, [r7, #28]
 8002590:	6a3a      	ldr	r2, [r7, #32]
 8002592:	e841 2300 	strex	r3, r2, [r1]
 8002596:	61bb      	str	r3, [r7, #24]
   return(result);
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1e5      	bne.n	800256a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e00f      	b.n	80025da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4013      	ands	r3, r2
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d09f      	beq.n	8002518 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3740      	adds	r7, #64	; 0x40
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800261e:	f023 030c 	bic.w	r3, r3, #12
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	430b      	orrs	r3, r1
 800262a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <UART_SetConfig+0x114>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d103      	bne.n	8002654 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800264c:	f7ff fe56 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	e002      	b.n	800265a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002654:	f7ff fe3e 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002658:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <UART_SetConfig+0x118>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	0119      	lsls	r1, r3, #4
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	009a      	lsls	r2, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <UART_SetConfig+0x118>)
 8002692:	fba3 0302 	umull	r0, r3, r3, r2
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2064      	movs	r0, #100	; 0x64
 800269a:	fb00 f303 	mul.w	r3, r0, r3
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	3332      	adds	r3, #50	; 0x32
 80026a4:	4a15      	ldr	r2, [pc, #84]	; (80026fc <UART_SetConfig+0x118>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b0:	4419      	add	r1, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009a      	lsls	r2, r3, #2
 80026bc:	441a      	add	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <UART_SetConfig+0x118>)
 80026ca:	fba3 0302 	umull	r0, r3, r3, r2
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2064      	movs	r0, #100	; 0x64
 80026d2:	fb00 f303 	mul.w	r3, r0, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	3332      	adds	r3, #50	; 0x32
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <UART_SetConfig+0x118>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	f003 020f 	and.w	r2, r3, #15
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	440a      	add	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40013800 	.word	0x40013800
 80026fc:	51eb851f 	.word	0x51eb851f

08002700 <siprintf>:
 8002700:	b40e      	push	{r1, r2, r3}
 8002702:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002706:	b500      	push	{lr}
 8002708:	b09c      	sub	sp, #112	; 0x70
 800270a:	ab1d      	add	r3, sp, #116	; 0x74
 800270c:	9002      	str	r0, [sp, #8]
 800270e:	9006      	str	r0, [sp, #24]
 8002710:	9107      	str	r1, [sp, #28]
 8002712:	9104      	str	r1, [sp, #16]
 8002714:	4808      	ldr	r0, [pc, #32]	; (8002738 <siprintf+0x38>)
 8002716:	4909      	ldr	r1, [pc, #36]	; (800273c <siprintf+0x3c>)
 8002718:	f853 2b04 	ldr.w	r2, [r3], #4
 800271c:	9105      	str	r1, [sp, #20]
 800271e:	6800      	ldr	r0, [r0, #0]
 8002720:	a902      	add	r1, sp, #8
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	f000 f98e 	bl	8002a44 <_svfiprintf_r>
 8002728:	2200      	movs	r2, #0
 800272a:	9b02      	ldr	r3, [sp, #8]
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	b01c      	add	sp, #112	; 0x70
 8002730:	f85d eb04 	ldr.w	lr, [sp], #4
 8002734:	b003      	add	sp, #12
 8002736:	4770      	bx	lr
 8002738:	20000058 	.word	0x20000058
 800273c:	ffff0208 	.word	0xffff0208

08002740 <memset>:
 8002740:	4603      	mov	r3, r0
 8002742:	4402      	add	r2, r0
 8002744:	4293      	cmp	r3, r2
 8002746:	d100      	bne.n	800274a <memset+0xa>
 8002748:	4770      	bx	lr
 800274a:	f803 1b01 	strb.w	r1, [r3], #1
 800274e:	e7f9      	b.n	8002744 <memset+0x4>

08002750 <__errno>:
 8002750:	4b01      	ldr	r3, [pc, #4]	; (8002758 <__errno+0x8>)
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000058 	.word	0x20000058

0800275c <__libc_init_array>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	2600      	movs	r6, #0
 8002760:	4d0c      	ldr	r5, [pc, #48]	; (8002794 <__libc_init_array+0x38>)
 8002762:	4c0d      	ldr	r4, [pc, #52]	; (8002798 <__libc_init_array+0x3c>)
 8002764:	1b64      	subs	r4, r4, r5
 8002766:	10a4      	asrs	r4, r4, #2
 8002768:	42a6      	cmp	r6, r4
 800276a:	d109      	bne.n	8002780 <__libc_init_array+0x24>
 800276c:	f000 fc7a 	bl	8003064 <_init>
 8002770:	2600      	movs	r6, #0
 8002772:	4d0a      	ldr	r5, [pc, #40]	; (800279c <__libc_init_array+0x40>)
 8002774:	4c0a      	ldr	r4, [pc, #40]	; (80027a0 <__libc_init_array+0x44>)
 8002776:	1b64      	subs	r4, r4, r5
 8002778:	10a4      	asrs	r4, r4, #2
 800277a:	42a6      	cmp	r6, r4
 800277c:	d105      	bne.n	800278a <__libc_init_array+0x2e>
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	f855 3b04 	ldr.w	r3, [r5], #4
 8002784:	4798      	blx	r3
 8002786:	3601      	adds	r6, #1
 8002788:	e7ee      	b.n	8002768 <__libc_init_array+0xc>
 800278a:	f855 3b04 	ldr.w	r3, [r5], #4
 800278e:	4798      	blx	r3
 8002790:	3601      	adds	r6, #1
 8002792:	e7f2      	b.n	800277a <__libc_init_array+0x1e>
 8002794:	0800316c 	.word	0x0800316c
 8002798:	0800316c 	.word	0x0800316c
 800279c:	0800316c 	.word	0x0800316c
 80027a0:	08003170 	.word	0x08003170

080027a4 <__retarget_lock_acquire_recursive>:
 80027a4:	4770      	bx	lr

080027a6 <__retarget_lock_release_recursive>:
 80027a6:	4770      	bx	lr

080027a8 <_free_r>:
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4605      	mov	r5, r0
 80027ac:	2900      	cmp	r1, #0
 80027ae:	d040      	beq.n	8002832 <_free_r+0x8a>
 80027b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b4:	1f0c      	subs	r4, r1, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bfb8      	it	lt
 80027ba:	18e4      	addlt	r4, r4, r3
 80027bc:	f000 f8dc 	bl	8002978 <__malloc_lock>
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <_free_r+0x8c>)
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	b933      	cbnz	r3, 80027d4 <_free_r+0x2c>
 80027c6:	6063      	str	r3, [r4, #4]
 80027c8:	6014      	str	r4, [r2, #0]
 80027ca:	4628      	mov	r0, r5
 80027cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027d0:	f000 b8d8 	b.w	8002984 <__malloc_unlock>
 80027d4:	42a3      	cmp	r3, r4
 80027d6:	d908      	bls.n	80027ea <_free_r+0x42>
 80027d8:	6820      	ldr	r0, [r4, #0]
 80027da:	1821      	adds	r1, r4, r0
 80027dc:	428b      	cmp	r3, r1
 80027de:	bf01      	itttt	eq
 80027e0:	6819      	ldreq	r1, [r3, #0]
 80027e2:	685b      	ldreq	r3, [r3, #4]
 80027e4:	1809      	addeq	r1, r1, r0
 80027e6:	6021      	streq	r1, [r4, #0]
 80027e8:	e7ed      	b.n	80027c6 <_free_r+0x1e>
 80027ea:	461a      	mov	r2, r3
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	b10b      	cbz	r3, 80027f4 <_free_r+0x4c>
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	d9fa      	bls.n	80027ea <_free_r+0x42>
 80027f4:	6811      	ldr	r1, [r2, #0]
 80027f6:	1850      	adds	r0, r2, r1
 80027f8:	42a0      	cmp	r0, r4
 80027fa:	d10b      	bne.n	8002814 <_free_r+0x6c>
 80027fc:	6820      	ldr	r0, [r4, #0]
 80027fe:	4401      	add	r1, r0
 8002800:	1850      	adds	r0, r2, r1
 8002802:	4283      	cmp	r3, r0
 8002804:	6011      	str	r1, [r2, #0]
 8002806:	d1e0      	bne.n	80027ca <_free_r+0x22>
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4408      	add	r0, r1
 800280e:	6010      	str	r0, [r2, #0]
 8002810:	6053      	str	r3, [r2, #4]
 8002812:	e7da      	b.n	80027ca <_free_r+0x22>
 8002814:	d902      	bls.n	800281c <_free_r+0x74>
 8002816:	230c      	movs	r3, #12
 8002818:	602b      	str	r3, [r5, #0]
 800281a:	e7d6      	b.n	80027ca <_free_r+0x22>
 800281c:	6820      	ldr	r0, [r4, #0]
 800281e:	1821      	adds	r1, r4, r0
 8002820:	428b      	cmp	r3, r1
 8002822:	bf01      	itttt	eq
 8002824:	6819      	ldreq	r1, [r3, #0]
 8002826:	685b      	ldreq	r3, [r3, #4]
 8002828:	1809      	addeq	r1, r1, r0
 800282a:	6021      	streq	r1, [r4, #0]
 800282c:	6063      	str	r3, [r4, #4]
 800282e:	6054      	str	r4, [r2, #4]
 8002830:	e7cb      	b.n	80027ca <_free_r+0x22>
 8002832:	bd38      	pop	{r3, r4, r5, pc}
 8002834:	20000230 	.word	0x20000230

08002838 <sbrk_aligned>:
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	4e0e      	ldr	r6, [pc, #56]	; (8002874 <sbrk_aligned+0x3c>)
 800283c:	460c      	mov	r4, r1
 800283e:	6831      	ldr	r1, [r6, #0]
 8002840:	4605      	mov	r5, r0
 8002842:	b911      	cbnz	r1, 800284a <sbrk_aligned+0x12>
 8002844:	f000 fbaa 	bl	8002f9c <_sbrk_r>
 8002848:	6030      	str	r0, [r6, #0]
 800284a:	4621      	mov	r1, r4
 800284c:	4628      	mov	r0, r5
 800284e:	f000 fba5 	bl	8002f9c <_sbrk_r>
 8002852:	1c43      	adds	r3, r0, #1
 8002854:	d00a      	beq.n	800286c <sbrk_aligned+0x34>
 8002856:	1cc4      	adds	r4, r0, #3
 8002858:	f024 0403 	bic.w	r4, r4, #3
 800285c:	42a0      	cmp	r0, r4
 800285e:	d007      	beq.n	8002870 <sbrk_aligned+0x38>
 8002860:	1a21      	subs	r1, r4, r0
 8002862:	4628      	mov	r0, r5
 8002864:	f000 fb9a 	bl	8002f9c <_sbrk_r>
 8002868:	3001      	adds	r0, #1
 800286a:	d101      	bne.n	8002870 <sbrk_aligned+0x38>
 800286c:	f04f 34ff 	mov.w	r4, #4294967295
 8002870:	4620      	mov	r0, r4
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	20000234 	.word	0x20000234

08002878 <_malloc_r>:
 8002878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800287c:	1ccd      	adds	r5, r1, #3
 800287e:	f025 0503 	bic.w	r5, r5, #3
 8002882:	3508      	adds	r5, #8
 8002884:	2d0c      	cmp	r5, #12
 8002886:	bf38      	it	cc
 8002888:	250c      	movcc	r5, #12
 800288a:	2d00      	cmp	r5, #0
 800288c:	4607      	mov	r7, r0
 800288e:	db01      	blt.n	8002894 <_malloc_r+0x1c>
 8002890:	42a9      	cmp	r1, r5
 8002892:	d905      	bls.n	80028a0 <_malloc_r+0x28>
 8002894:	230c      	movs	r3, #12
 8002896:	2600      	movs	r6, #0
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	4630      	mov	r0, r6
 800289c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002974 <_malloc_r+0xfc>
 80028a4:	f000 f868 	bl	8002978 <__malloc_lock>
 80028a8:	f8d8 3000 	ldr.w	r3, [r8]
 80028ac:	461c      	mov	r4, r3
 80028ae:	bb5c      	cbnz	r4, 8002908 <_malloc_r+0x90>
 80028b0:	4629      	mov	r1, r5
 80028b2:	4638      	mov	r0, r7
 80028b4:	f7ff ffc0 	bl	8002838 <sbrk_aligned>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	4604      	mov	r4, r0
 80028bc:	d155      	bne.n	800296a <_malloc_r+0xf2>
 80028be:	f8d8 4000 	ldr.w	r4, [r8]
 80028c2:	4626      	mov	r6, r4
 80028c4:	2e00      	cmp	r6, #0
 80028c6:	d145      	bne.n	8002954 <_malloc_r+0xdc>
 80028c8:	2c00      	cmp	r4, #0
 80028ca:	d048      	beq.n	800295e <_malloc_r+0xe6>
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	4631      	mov	r1, r6
 80028d0:	4638      	mov	r0, r7
 80028d2:	eb04 0903 	add.w	r9, r4, r3
 80028d6:	f000 fb61 	bl	8002f9c <_sbrk_r>
 80028da:	4581      	cmp	r9, r0
 80028dc:	d13f      	bne.n	800295e <_malloc_r+0xe6>
 80028de:	6821      	ldr	r1, [r4, #0]
 80028e0:	4638      	mov	r0, r7
 80028e2:	1a6d      	subs	r5, r5, r1
 80028e4:	4629      	mov	r1, r5
 80028e6:	f7ff ffa7 	bl	8002838 <sbrk_aligned>
 80028ea:	3001      	adds	r0, #1
 80028ec:	d037      	beq.n	800295e <_malloc_r+0xe6>
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	442b      	add	r3, r5
 80028f2:	6023      	str	r3, [r4, #0]
 80028f4:	f8d8 3000 	ldr.w	r3, [r8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d038      	beq.n	800296e <_malloc_r+0xf6>
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	42a2      	cmp	r2, r4
 8002900:	d12b      	bne.n	800295a <_malloc_r+0xe2>
 8002902:	2200      	movs	r2, #0
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e00f      	b.n	8002928 <_malloc_r+0xb0>
 8002908:	6822      	ldr	r2, [r4, #0]
 800290a:	1b52      	subs	r2, r2, r5
 800290c:	d41f      	bmi.n	800294e <_malloc_r+0xd6>
 800290e:	2a0b      	cmp	r2, #11
 8002910:	d917      	bls.n	8002942 <_malloc_r+0xca>
 8002912:	1961      	adds	r1, r4, r5
 8002914:	42a3      	cmp	r3, r4
 8002916:	6025      	str	r5, [r4, #0]
 8002918:	bf18      	it	ne
 800291a:	6059      	strne	r1, [r3, #4]
 800291c:	6863      	ldr	r3, [r4, #4]
 800291e:	bf08      	it	eq
 8002920:	f8c8 1000 	streq.w	r1, [r8]
 8002924:	5162      	str	r2, [r4, r5]
 8002926:	604b      	str	r3, [r1, #4]
 8002928:	4638      	mov	r0, r7
 800292a:	f104 060b 	add.w	r6, r4, #11
 800292e:	f000 f829 	bl	8002984 <__malloc_unlock>
 8002932:	f026 0607 	bic.w	r6, r6, #7
 8002936:	1d23      	adds	r3, r4, #4
 8002938:	1af2      	subs	r2, r6, r3
 800293a:	d0ae      	beq.n	800289a <_malloc_r+0x22>
 800293c:	1b9b      	subs	r3, r3, r6
 800293e:	50a3      	str	r3, [r4, r2]
 8002940:	e7ab      	b.n	800289a <_malloc_r+0x22>
 8002942:	42a3      	cmp	r3, r4
 8002944:	6862      	ldr	r2, [r4, #4]
 8002946:	d1dd      	bne.n	8002904 <_malloc_r+0x8c>
 8002948:	f8c8 2000 	str.w	r2, [r8]
 800294c:	e7ec      	b.n	8002928 <_malloc_r+0xb0>
 800294e:	4623      	mov	r3, r4
 8002950:	6864      	ldr	r4, [r4, #4]
 8002952:	e7ac      	b.n	80028ae <_malloc_r+0x36>
 8002954:	4634      	mov	r4, r6
 8002956:	6876      	ldr	r6, [r6, #4]
 8002958:	e7b4      	b.n	80028c4 <_malloc_r+0x4c>
 800295a:	4613      	mov	r3, r2
 800295c:	e7cc      	b.n	80028f8 <_malloc_r+0x80>
 800295e:	230c      	movs	r3, #12
 8002960:	4638      	mov	r0, r7
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	f000 f80e 	bl	8002984 <__malloc_unlock>
 8002968:	e797      	b.n	800289a <_malloc_r+0x22>
 800296a:	6025      	str	r5, [r4, #0]
 800296c:	e7dc      	b.n	8002928 <_malloc_r+0xb0>
 800296e:	605b      	str	r3, [r3, #4]
 8002970:	deff      	udf	#255	; 0xff
 8002972:	bf00      	nop
 8002974:	20000230 	.word	0x20000230

08002978 <__malloc_lock>:
 8002978:	4801      	ldr	r0, [pc, #4]	; (8002980 <__malloc_lock+0x8>)
 800297a:	f7ff bf13 	b.w	80027a4 <__retarget_lock_acquire_recursive>
 800297e:	bf00      	nop
 8002980:	2000022c 	.word	0x2000022c

08002984 <__malloc_unlock>:
 8002984:	4801      	ldr	r0, [pc, #4]	; (800298c <__malloc_unlock+0x8>)
 8002986:	f7ff bf0e 	b.w	80027a6 <__retarget_lock_release_recursive>
 800298a:	bf00      	nop
 800298c:	2000022c 	.word	0x2000022c

08002990 <__ssputs_r>:
 8002990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002994:	461f      	mov	r7, r3
 8002996:	688e      	ldr	r6, [r1, #8]
 8002998:	4682      	mov	sl, r0
 800299a:	42be      	cmp	r6, r7
 800299c:	460c      	mov	r4, r1
 800299e:	4690      	mov	r8, r2
 80029a0:	680b      	ldr	r3, [r1, #0]
 80029a2:	d82c      	bhi.n	80029fe <__ssputs_r+0x6e>
 80029a4:	898a      	ldrh	r2, [r1, #12]
 80029a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029aa:	d026      	beq.n	80029fa <__ssputs_r+0x6a>
 80029ac:	6965      	ldr	r5, [r4, #20]
 80029ae:	6909      	ldr	r1, [r1, #16]
 80029b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029b4:	eba3 0901 	sub.w	r9, r3, r1
 80029b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029bc:	1c7b      	adds	r3, r7, #1
 80029be:	444b      	add	r3, r9
 80029c0:	106d      	asrs	r5, r5, #1
 80029c2:	429d      	cmp	r5, r3
 80029c4:	bf38      	it	cc
 80029c6:	461d      	movcc	r5, r3
 80029c8:	0553      	lsls	r3, r2, #21
 80029ca:	d527      	bpl.n	8002a1c <__ssputs_r+0x8c>
 80029cc:	4629      	mov	r1, r5
 80029ce:	f7ff ff53 	bl	8002878 <_malloc_r>
 80029d2:	4606      	mov	r6, r0
 80029d4:	b360      	cbz	r0, 8002a30 <__ssputs_r+0xa0>
 80029d6:	464a      	mov	r2, r9
 80029d8:	6921      	ldr	r1, [r4, #16]
 80029da:	f000 fafd 	bl	8002fd8 <memcpy>
 80029de:	89a3      	ldrh	r3, [r4, #12]
 80029e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e8:	81a3      	strh	r3, [r4, #12]
 80029ea:	6126      	str	r6, [r4, #16]
 80029ec:	444e      	add	r6, r9
 80029ee:	6026      	str	r6, [r4, #0]
 80029f0:	463e      	mov	r6, r7
 80029f2:	6165      	str	r5, [r4, #20]
 80029f4:	eba5 0509 	sub.w	r5, r5, r9
 80029f8:	60a5      	str	r5, [r4, #8]
 80029fa:	42be      	cmp	r6, r7
 80029fc:	d900      	bls.n	8002a00 <__ssputs_r+0x70>
 80029fe:	463e      	mov	r6, r7
 8002a00:	4632      	mov	r2, r6
 8002a02:	4641      	mov	r1, r8
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	f000 faaf 	bl	8002f68 <memmove>
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	68a3      	ldr	r3, [r4, #8]
 8002a0e:	1b9b      	subs	r3, r3, r6
 8002a10:	60a3      	str	r3, [r4, #8]
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	4433      	add	r3, r6
 8002a16:	6023      	str	r3, [r4, #0]
 8002a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a1c:	462a      	mov	r2, r5
 8002a1e:	f000 fae9 	bl	8002ff4 <_realloc_r>
 8002a22:	4606      	mov	r6, r0
 8002a24:	2800      	cmp	r0, #0
 8002a26:	d1e0      	bne.n	80029ea <__ssputs_r+0x5a>
 8002a28:	4650      	mov	r0, sl
 8002a2a:	6921      	ldr	r1, [r4, #16]
 8002a2c:	f7ff febc 	bl	80027a8 <_free_r>
 8002a30:	230c      	movs	r3, #12
 8002a32:	f8ca 3000 	str.w	r3, [sl]
 8002a36:	89a3      	ldrh	r3, [r4, #12]
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a40:	81a3      	strh	r3, [r4, #12]
 8002a42:	e7e9      	b.n	8002a18 <__ssputs_r+0x88>

08002a44 <_svfiprintf_r>:
 8002a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a48:	4698      	mov	r8, r3
 8002a4a:	898b      	ldrh	r3, [r1, #12]
 8002a4c:	4607      	mov	r7, r0
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	460d      	mov	r5, r1
 8002a52:	4614      	mov	r4, r2
 8002a54:	b09d      	sub	sp, #116	; 0x74
 8002a56:	d50e      	bpl.n	8002a76 <_svfiprintf_r+0x32>
 8002a58:	690b      	ldr	r3, [r1, #16]
 8002a5a:	b963      	cbnz	r3, 8002a76 <_svfiprintf_r+0x32>
 8002a5c:	2140      	movs	r1, #64	; 0x40
 8002a5e:	f7ff ff0b 	bl	8002878 <_malloc_r>
 8002a62:	6028      	str	r0, [r5, #0]
 8002a64:	6128      	str	r0, [r5, #16]
 8002a66:	b920      	cbnz	r0, 8002a72 <_svfiprintf_r+0x2e>
 8002a68:	230c      	movs	r3, #12
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	e0d0      	b.n	8002c14 <_svfiprintf_r+0x1d0>
 8002a72:	2340      	movs	r3, #64	; 0x40
 8002a74:	616b      	str	r3, [r5, #20]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9309      	str	r3, [sp, #36]	; 0x24
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a80:	2330      	movs	r3, #48	; 0x30
 8002a82:	f04f 0901 	mov.w	r9, #1
 8002a86:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a8a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002c2c <_svfiprintf_r+0x1e8>
 8002a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a92:	4623      	mov	r3, r4
 8002a94:	469a      	mov	sl, r3
 8002a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a9a:	b10a      	cbz	r2, 8002aa0 <_svfiprintf_r+0x5c>
 8002a9c:	2a25      	cmp	r2, #37	; 0x25
 8002a9e:	d1f9      	bne.n	8002a94 <_svfiprintf_r+0x50>
 8002aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8002aa4:	d00b      	beq.n	8002abe <_svfiprintf_r+0x7a>
 8002aa6:	465b      	mov	r3, fp
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	4629      	mov	r1, r5
 8002aac:	4638      	mov	r0, r7
 8002aae:	f7ff ff6f 	bl	8002990 <__ssputs_r>
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	f000 80a9 	beq.w	8002c0a <_svfiprintf_r+0x1c6>
 8002ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002aba:	445a      	add	r2, fp
 8002abc:	9209      	str	r2, [sp, #36]	; 0x24
 8002abe:	f89a 3000 	ldrb.w	r3, [sl]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80a1 	beq.w	8002c0a <_svfiprintf_r+0x1c6>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f04f 32ff 	mov.w	r2, #4294967295
 8002ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ad2:	f10a 0a01 	add.w	sl, sl, #1
 8002ad6:	9304      	str	r3, [sp, #16]
 8002ad8:	9307      	str	r3, [sp, #28]
 8002ada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ade:	931a      	str	r3, [sp, #104]	; 0x68
 8002ae0:	4654      	mov	r4, sl
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ae8:	4850      	ldr	r0, [pc, #320]	; (8002c2c <_svfiprintf_r+0x1e8>)
 8002aea:	f000 fa67 	bl	8002fbc <memchr>
 8002aee:	9a04      	ldr	r2, [sp, #16]
 8002af0:	b9d8      	cbnz	r0, 8002b2a <_svfiprintf_r+0xe6>
 8002af2:	06d0      	lsls	r0, r2, #27
 8002af4:	bf44      	itt	mi
 8002af6:	2320      	movmi	r3, #32
 8002af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002afc:	0711      	lsls	r1, r2, #28
 8002afe:	bf44      	itt	mi
 8002b00:	232b      	movmi	r3, #43	; 0x2b
 8002b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b06:	f89a 3000 	ldrb.w	r3, [sl]
 8002b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b0c:	d015      	beq.n	8002b3a <_svfiprintf_r+0xf6>
 8002b0e:	4654      	mov	r4, sl
 8002b10:	2000      	movs	r0, #0
 8002b12:	f04f 0c0a 	mov.w	ip, #10
 8002b16:	9a07      	ldr	r2, [sp, #28]
 8002b18:	4621      	mov	r1, r4
 8002b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b1e:	3b30      	subs	r3, #48	; 0x30
 8002b20:	2b09      	cmp	r3, #9
 8002b22:	d94d      	bls.n	8002bc0 <_svfiprintf_r+0x17c>
 8002b24:	b1b0      	cbz	r0, 8002b54 <_svfiprintf_r+0x110>
 8002b26:	9207      	str	r2, [sp, #28]
 8002b28:	e014      	b.n	8002b54 <_svfiprintf_r+0x110>
 8002b2a:	eba0 0308 	sub.w	r3, r0, r8
 8002b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8002b32:	4313      	orrs	r3, r2
 8002b34:	46a2      	mov	sl, r4
 8002b36:	9304      	str	r3, [sp, #16]
 8002b38:	e7d2      	b.n	8002ae0 <_svfiprintf_r+0x9c>
 8002b3a:	9b03      	ldr	r3, [sp, #12]
 8002b3c:	1d19      	adds	r1, r3, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	9103      	str	r1, [sp, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bfbb      	ittet	lt
 8002b46:	425b      	neglt	r3, r3
 8002b48:	f042 0202 	orrlt.w	r2, r2, #2
 8002b4c:	9307      	strge	r3, [sp, #28]
 8002b4e:	9307      	strlt	r3, [sp, #28]
 8002b50:	bfb8      	it	lt
 8002b52:	9204      	strlt	r2, [sp, #16]
 8002b54:	7823      	ldrb	r3, [r4, #0]
 8002b56:	2b2e      	cmp	r3, #46	; 0x2e
 8002b58:	d10c      	bne.n	8002b74 <_svfiprintf_r+0x130>
 8002b5a:	7863      	ldrb	r3, [r4, #1]
 8002b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b5e:	d134      	bne.n	8002bca <_svfiprintf_r+0x186>
 8002b60:	9b03      	ldr	r3, [sp, #12]
 8002b62:	3402      	adds	r4, #2
 8002b64:	1d1a      	adds	r2, r3, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	9203      	str	r2, [sp, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bfb8      	it	lt
 8002b6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b72:	9305      	str	r3, [sp, #20]
 8002b74:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002c30 <_svfiprintf_r+0x1ec>
 8002b78:	2203      	movs	r2, #3
 8002b7a:	4650      	mov	r0, sl
 8002b7c:	7821      	ldrb	r1, [r4, #0]
 8002b7e:	f000 fa1d 	bl	8002fbc <memchr>
 8002b82:	b138      	cbz	r0, 8002b94 <_svfiprintf_r+0x150>
 8002b84:	2240      	movs	r2, #64	; 0x40
 8002b86:	9b04      	ldr	r3, [sp, #16]
 8002b88:	eba0 000a 	sub.w	r0, r0, sl
 8002b8c:	4082      	lsls	r2, r0
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	3401      	adds	r4, #1
 8002b92:	9304      	str	r3, [sp, #16]
 8002b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b98:	2206      	movs	r2, #6
 8002b9a:	4826      	ldr	r0, [pc, #152]	; (8002c34 <_svfiprintf_r+0x1f0>)
 8002b9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ba0:	f000 fa0c 	bl	8002fbc <memchr>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d038      	beq.n	8002c1a <_svfiprintf_r+0x1d6>
 8002ba8:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <_svfiprintf_r+0x1f4>)
 8002baa:	bb1b      	cbnz	r3, 8002bf4 <_svfiprintf_r+0x1b0>
 8002bac:	9b03      	ldr	r3, [sp, #12]
 8002bae:	3307      	adds	r3, #7
 8002bb0:	f023 0307 	bic.w	r3, r3, #7
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	9303      	str	r3, [sp, #12]
 8002bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bba:	4433      	add	r3, r6
 8002bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002bbe:	e768      	b.n	8002a92 <_svfiprintf_r+0x4e>
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bc8:	e7a6      	b.n	8002b18 <_svfiprintf_r+0xd4>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f04f 0c0a 	mov.w	ip, #10
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	3401      	adds	r4, #1
 8002bd4:	9305      	str	r3, [sp, #20]
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bdc:	3a30      	subs	r2, #48	; 0x30
 8002bde:	2a09      	cmp	r2, #9
 8002be0:	d903      	bls.n	8002bea <_svfiprintf_r+0x1a6>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0c6      	beq.n	8002b74 <_svfiprintf_r+0x130>
 8002be6:	9105      	str	r1, [sp, #20]
 8002be8:	e7c4      	b.n	8002b74 <_svfiprintf_r+0x130>
 8002bea:	4604      	mov	r4, r0
 8002bec:	2301      	movs	r3, #1
 8002bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bf2:	e7f0      	b.n	8002bd6 <_svfiprintf_r+0x192>
 8002bf4:	ab03      	add	r3, sp, #12
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	462a      	mov	r2, r5
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <_svfiprintf_r+0x1f8>)
 8002bfe:	a904      	add	r1, sp, #16
 8002c00:	f3af 8000 	nop.w
 8002c04:	1c42      	adds	r2, r0, #1
 8002c06:	4606      	mov	r6, r0
 8002c08:	d1d6      	bne.n	8002bb8 <_svfiprintf_r+0x174>
 8002c0a:	89ab      	ldrh	r3, [r5, #12]
 8002c0c:	065b      	lsls	r3, r3, #25
 8002c0e:	f53f af2d 	bmi.w	8002a6c <_svfiprintf_r+0x28>
 8002c12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c14:	b01d      	add	sp, #116	; 0x74
 8002c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c1a:	ab03      	add	r3, sp, #12
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	462a      	mov	r2, r5
 8002c20:	4638      	mov	r0, r7
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <_svfiprintf_r+0x1f8>)
 8002c24:	a904      	add	r1, sp, #16
 8002c26:	f000 f87d 	bl	8002d24 <_printf_i>
 8002c2a:	e7eb      	b.n	8002c04 <_svfiprintf_r+0x1c0>
 8002c2c:	08003136 	.word	0x08003136
 8002c30:	0800313c 	.word	0x0800313c
 8002c34:	08003140 	.word	0x08003140
 8002c38:	00000000 	.word	0x00000000
 8002c3c:	08002991 	.word	0x08002991

08002c40 <_printf_common>:
 8002c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c44:	4616      	mov	r6, r2
 8002c46:	4699      	mov	r9, r3
 8002c48:	688a      	ldr	r2, [r1, #8]
 8002c4a:	690b      	ldr	r3, [r1, #16]
 8002c4c:	4607      	mov	r7, r0
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	bfb8      	it	lt
 8002c52:	4613      	movlt	r3, r2
 8002c54:	6033      	str	r3, [r6, #0]
 8002c56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c60:	b10a      	cbz	r2, 8002c66 <_printf_common+0x26>
 8002c62:	3301      	adds	r3, #1
 8002c64:	6033      	str	r3, [r6, #0]
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	0699      	lsls	r1, r3, #26
 8002c6a:	bf42      	ittt	mi
 8002c6c:	6833      	ldrmi	r3, [r6, #0]
 8002c6e:	3302      	addmi	r3, #2
 8002c70:	6033      	strmi	r3, [r6, #0]
 8002c72:	6825      	ldr	r5, [r4, #0]
 8002c74:	f015 0506 	ands.w	r5, r5, #6
 8002c78:	d106      	bne.n	8002c88 <_printf_common+0x48>
 8002c7a:	f104 0a19 	add.w	sl, r4, #25
 8002c7e:	68e3      	ldr	r3, [r4, #12]
 8002c80:	6832      	ldr	r2, [r6, #0]
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	42ab      	cmp	r3, r5
 8002c86:	dc2b      	bgt.n	8002ce0 <_printf_common+0xa0>
 8002c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c8c:	1e13      	subs	r3, r2, #0
 8002c8e:	6822      	ldr	r2, [r4, #0]
 8002c90:	bf18      	it	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	0692      	lsls	r2, r2, #26
 8002c96:	d430      	bmi.n	8002cfa <_printf_common+0xba>
 8002c98:	4649      	mov	r1, r9
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ca0:	47c0      	blx	r8
 8002ca2:	3001      	adds	r0, #1
 8002ca4:	d023      	beq.n	8002cee <_printf_common+0xae>
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	6922      	ldr	r2, [r4, #16]
 8002caa:	f003 0306 	and.w	r3, r3, #6
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	bf14      	ite	ne
 8002cb2:	2500      	movne	r5, #0
 8002cb4:	6833      	ldreq	r3, [r6, #0]
 8002cb6:	f04f 0600 	mov.w	r6, #0
 8002cba:	bf08      	it	eq
 8002cbc:	68e5      	ldreq	r5, [r4, #12]
 8002cbe:	f104 041a 	add.w	r4, r4, #26
 8002cc2:	bf08      	it	eq
 8002cc4:	1aed      	subeq	r5, r5, r3
 8002cc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002cca:	bf08      	it	eq
 8002ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	bfc4      	itt	gt
 8002cd4:	1a9b      	subgt	r3, r3, r2
 8002cd6:	18ed      	addgt	r5, r5, r3
 8002cd8:	42b5      	cmp	r5, r6
 8002cda:	d11a      	bne.n	8002d12 <_printf_common+0xd2>
 8002cdc:	2000      	movs	r0, #0
 8002cde:	e008      	b.n	8002cf2 <_printf_common+0xb2>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	4652      	mov	r2, sl
 8002ce4:	4649      	mov	r1, r9
 8002ce6:	4638      	mov	r0, r7
 8002ce8:	47c0      	blx	r8
 8002cea:	3001      	adds	r0, #1
 8002cec:	d103      	bne.n	8002cf6 <_printf_common+0xb6>
 8002cee:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf6:	3501      	adds	r5, #1
 8002cf8:	e7c1      	b.n	8002c7e <_printf_common+0x3e>
 8002cfa:	2030      	movs	r0, #48	; 0x30
 8002cfc:	18e1      	adds	r1, r4, r3
 8002cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d08:	4422      	add	r2, r4
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d10:	e7c2      	b.n	8002c98 <_printf_common+0x58>
 8002d12:	2301      	movs	r3, #1
 8002d14:	4622      	mov	r2, r4
 8002d16:	4649      	mov	r1, r9
 8002d18:	4638      	mov	r0, r7
 8002d1a:	47c0      	blx	r8
 8002d1c:	3001      	adds	r0, #1
 8002d1e:	d0e6      	beq.n	8002cee <_printf_common+0xae>
 8002d20:	3601      	adds	r6, #1
 8002d22:	e7d9      	b.n	8002cd8 <_printf_common+0x98>

08002d24 <_printf_i>:
 8002d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d28:	7e0f      	ldrb	r7, [r1, #24]
 8002d2a:	4691      	mov	r9, r2
 8002d2c:	2f78      	cmp	r7, #120	; 0x78
 8002d2e:	4680      	mov	r8, r0
 8002d30:	460c      	mov	r4, r1
 8002d32:	469a      	mov	sl, r3
 8002d34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d3a:	d807      	bhi.n	8002d4c <_printf_i+0x28>
 8002d3c:	2f62      	cmp	r7, #98	; 0x62
 8002d3e:	d80a      	bhi.n	8002d56 <_printf_i+0x32>
 8002d40:	2f00      	cmp	r7, #0
 8002d42:	f000 80d5 	beq.w	8002ef0 <_printf_i+0x1cc>
 8002d46:	2f58      	cmp	r7, #88	; 0x58
 8002d48:	f000 80c1 	beq.w	8002ece <_printf_i+0x1aa>
 8002d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d54:	e03a      	b.n	8002dcc <_printf_i+0xa8>
 8002d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d5a:	2b15      	cmp	r3, #21
 8002d5c:	d8f6      	bhi.n	8002d4c <_printf_i+0x28>
 8002d5e:	a101      	add	r1, pc, #4	; (adr r1, 8002d64 <_printf_i+0x40>)
 8002d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d64:	08002dbd 	.word	0x08002dbd
 8002d68:	08002dd1 	.word	0x08002dd1
 8002d6c:	08002d4d 	.word	0x08002d4d
 8002d70:	08002d4d 	.word	0x08002d4d
 8002d74:	08002d4d 	.word	0x08002d4d
 8002d78:	08002d4d 	.word	0x08002d4d
 8002d7c:	08002dd1 	.word	0x08002dd1
 8002d80:	08002d4d 	.word	0x08002d4d
 8002d84:	08002d4d 	.word	0x08002d4d
 8002d88:	08002d4d 	.word	0x08002d4d
 8002d8c:	08002d4d 	.word	0x08002d4d
 8002d90:	08002ed7 	.word	0x08002ed7
 8002d94:	08002dfd 	.word	0x08002dfd
 8002d98:	08002e91 	.word	0x08002e91
 8002d9c:	08002d4d 	.word	0x08002d4d
 8002da0:	08002d4d 	.word	0x08002d4d
 8002da4:	08002ef9 	.word	0x08002ef9
 8002da8:	08002d4d 	.word	0x08002d4d
 8002dac:	08002dfd 	.word	0x08002dfd
 8002db0:	08002d4d 	.word	0x08002d4d
 8002db4:	08002d4d 	.word	0x08002d4d
 8002db8:	08002e99 	.word	0x08002e99
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	1d1a      	adds	r2, r3, #4
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	602a      	str	r2, [r5, #0]
 8002dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0a0      	b.n	8002f12 <_printf_i+0x1ee>
 8002dd0:	6820      	ldr	r0, [r4, #0]
 8002dd2:	682b      	ldr	r3, [r5, #0]
 8002dd4:	0607      	lsls	r7, r0, #24
 8002dd6:	f103 0104 	add.w	r1, r3, #4
 8002dda:	6029      	str	r1, [r5, #0]
 8002ddc:	d501      	bpl.n	8002de2 <_printf_i+0xbe>
 8002dde:	681e      	ldr	r6, [r3, #0]
 8002de0:	e003      	b.n	8002dea <_printf_i+0xc6>
 8002de2:	0646      	lsls	r6, r0, #25
 8002de4:	d5fb      	bpl.n	8002dde <_printf_i+0xba>
 8002de6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002dea:	2e00      	cmp	r6, #0
 8002dec:	da03      	bge.n	8002df6 <_printf_i+0xd2>
 8002dee:	232d      	movs	r3, #45	; 0x2d
 8002df0:	4276      	negs	r6, r6
 8002df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002df6:	230a      	movs	r3, #10
 8002df8:	4859      	ldr	r0, [pc, #356]	; (8002f60 <_printf_i+0x23c>)
 8002dfa:	e012      	b.n	8002e22 <_printf_i+0xfe>
 8002dfc:	682b      	ldr	r3, [r5, #0]
 8002dfe:	6820      	ldr	r0, [r4, #0]
 8002e00:	1d19      	adds	r1, r3, #4
 8002e02:	6029      	str	r1, [r5, #0]
 8002e04:	0605      	lsls	r5, r0, #24
 8002e06:	d501      	bpl.n	8002e0c <_printf_i+0xe8>
 8002e08:	681e      	ldr	r6, [r3, #0]
 8002e0a:	e002      	b.n	8002e12 <_printf_i+0xee>
 8002e0c:	0641      	lsls	r1, r0, #25
 8002e0e:	d5fb      	bpl.n	8002e08 <_printf_i+0xe4>
 8002e10:	881e      	ldrh	r6, [r3, #0]
 8002e12:	2f6f      	cmp	r7, #111	; 0x6f
 8002e14:	bf0c      	ite	eq
 8002e16:	2308      	moveq	r3, #8
 8002e18:	230a      	movne	r3, #10
 8002e1a:	4851      	ldr	r0, [pc, #324]	; (8002f60 <_printf_i+0x23c>)
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e22:	6865      	ldr	r5, [r4, #4]
 8002e24:	2d00      	cmp	r5, #0
 8002e26:	bfa8      	it	ge
 8002e28:	6821      	ldrge	r1, [r4, #0]
 8002e2a:	60a5      	str	r5, [r4, #8]
 8002e2c:	bfa4      	itt	ge
 8002e2e:	f021 0104 	bicge.w	r1, r1, #4
 8002e32:	6021      	strge	r1, [r4, #0]
 8002e34:	b90e      	cbnz	r6, 8002e3a <_printf_i+0x116>
 8002e36:	2d00      	cmp	r5, #0
 8002e38:	d04b      	beq.n	8002ed2 <_printf_i+0x1ae>
 8002e3a:	4615      	mov	r5, r2
 8002e3c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e40:	fb03 6711 	mls	r7, r3, r1, r6
 8002e44:	5dc7      	ldrb	r7, [r0, r7]
 8002e46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e4a:	4637      	mov	r7, r6
 8002e4c:	42bb      	cmp	r3, r7
 8002e4e:	460e      	mov	r6, r1
 8002e50:	d9f4      	bls.n	8002e3c <_printf_i+0x118>
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d10b      	bne.n	8002e6e <_printf_i+0x14a>
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	07de      	lsls	r6, r3, #31
 8002e5a:	d508      	bpl.n	8002e6e <_printf_i+0x14a>
 8002e5c:	6923      	ldr	r3, [r4, #16]
 8002e5e:	6861      	ldr	r1, [r4, #4]
 8002e60:	4299      	cmp	r1, r3
 8002e62:	bfde      	ittt	le
 8002e64:	2330      	movle	r3, #48	; 0x30
 8002e66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e6e:	1b52      	subs	r2, r2, r5
 8002e70:	6122      	str	r2, [r4, #16]
 8002e72:	464b      	mov	r3, r9
 8002e74:	4621      	mov	r1, r4
 8002e76:	4640      	mov	r0, r8
 8002e78:	f8cd a000 	str.w	sl, [sp]
 8002e7c:	aa03      	add	r2, sp, #12
 8002e7e:	f7ff fedf 	bl	8002c40 <_printf_common>
 8002e82:	3001      	adds	r0, #1
 8002e84:	d14a      	bne.n	8002f1c <_printf_i+0x1f8>
 8002e86:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8a:	b004      	add	sp, #16
 8002e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	f043 0320 	orr.w	r3, r3, #32
 8002e96:	6023      	str	r3, [r4, #0]
 8002e98:	2778      	movs	r7, #120	; 0x78
 8002e9a:	4832      	ldr	r0, [pc, #200]	; (8002f64 <_printf_i+0x240>)
 8002e9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	6829      	ldr	r1, [r5, #0]
 8002ea4:	061f      	lsls	r7, r3, #24
 8002ea6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002eaa:	d402      	bmi.n	8002eb2 <_printf_i+0x18e>
 8002eac:	065f      	lsls	r7, r3, #25
 8002eae:	bf48      	it	mi
 8002eb0:	b2b6      	uxthmi	r6, r6
 8002eb2:	07df      	lsls	r7, r3, #31
 8002eb4:	bf48      	it	mi
 8002eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8002eba:	6029      	str	r1, [r5, #0]
 8002ebc:	bf48      	it	mi
 8002ebe:	6023      	strmi	r3, [r4, #0]
 8002ec0:	b91e      	cbnz	r6, 8002eca <_printf_i+0x1a6>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	f023 0320 	bic.w	r3, r3, #32
 8002ec8:	6023      	str	r3, [r4, #0]
 8002eca:	2310      	movs	r3, #16
 8002ecc:	e7a6      	b.n	8002e1c <_printf_i+0xf8>
 8002ece:	4824      	ldr	r0, [pc, #144]	; (8002f60 <_printf_i+0x23c>)
 8002ed0:	e7e4      	b.n	8002e9c <_printf_i+0x178>
 8002ed2:	4615      	mov	r5, r2
 8002ed4:	e7bd      	b.n	8002e52 <_printf_i+0x12e>
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	6826      	ldr	r6, [r4, #0]
 8002eda:	1d18      	adds	r0, r3, #4
 8002edc:	6961      	ldr	r1, [r4, #20]
 8002ede:	6028      	str	r0, [r5, #0]
 8002ee0:	0635      	lsls	r5, r6, #24
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	d501      	bpl.n	8002eea <_printf_i+0x1c6>
 8002ee6:	6019      	str	r1, [r3, #0]
 8002ee8:	e002      	b.n	8002ef0 <_printf_i+0x1cc>
 8002eea:	0670      	lsls	r0, r6, #25
 8002eec:	d5fb      	bpl.n	8002ee6 <_printf_i+0x1c2>
 8002eee:	8019      	strh	r1, [r3, #0]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	4615      	mov	r5, r2
 8002ef4:	6123      	str	r3, [r4, #16]
 8002ef6:	e7bc      	b.n	8002e72 <_printf_i+0x14e>
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	2100      	movs	r1, #0
 8002efc:	1d1a      	adds	r2, r3, #4
 8002efe:	602a      	str	r2, [r5, #0]
 8002f00:	681d      	ldr	r5, [r3, #0]
 8002f02:	6862      	ldr	r2, [r4, #4]
 8002f04:	4628      	mov	r0, r5
 8002f06:	f000 f859 	bl	8002fbc <memchr>
 8002f0a:	b108      	cbz	r0, 8002f10 <_printf_i+0x1ec>
 8002f0c:	1b40      	subs	r0, r0, r5
 8002f0e:	6060      	str	r0, [r4, #4]
 8002f10:	6863      	ldr	r3, [r4, #4]
 8002f12:	6123      	str	r3, [r4, #16]
 8002f14:	2300      	movs	r3, #0
 8002f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f1a:	e7aa      	b.n	8002e72 <_printf_i+0x14e>
 8002f1c:	462a      	mov	r2, r5
 8002f1e:	4649      	mov	r1, r9
 8002f20:	4640      	mov	r0, r8
 8002f22:	6923      	ldr	r3, [r4, #16]
 8002f24:	47d0      	blx	sl
 8002f26:	3001      	adds	r0, #1
 8002f28:	d0ad      	beq.n	8002e86 <_printf_i+0x162>
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	079b      	lsls	r3, r3, #30
 8002f2e:	d413      	bmi.n	8002f58 <_printf_i+0x234>
 8002f30:	68e0      	ldr	r0, [r4, #12]
 8002f32:	9b03      	ldr	r3, [sp, #12]
 8002f34:	4298      	cmp	r0, r3
 8002f36:	bfb8      	it	lt
 8002f38:	4618      	movlt	r0, r3
 8002f3a:	e7a6      	b.n	8002e8a <_printf_i+0x166>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	4632      	mov	r2, r6
 8002f40:	4649      	mov	r1, r9
 8002f42:	4640      	mov	r0, r8
 8002f44:	47d0      	blx	sl
 8002f46:	3001      	adds	r0, #1
 8002f48:	d09d      	beq.n	8002e86 <_printf_i+0x162>
 8002f4a:	3501      	adds	r5, #1
 8002f4c:	68e3      	ldr	r3, [r4, #12]
 8002f4e:	9903      	ldr	r1, [sp, #12]
 8002f50:	1a5b      	subs	r3, r3, r1
 8002f52:	42ab      	cmp	r3, r5
 8002f54:	dcf2      	bgt.n	8002f3c <_printf_i+0x218>
 8002f56:	e7eb      	b.n	8002f30 <_printf_i+0x20c>
 8002f58:	2500      	movs	r5, #0
 8002f5a:	f104 0619 	add.w	r6, r4, #25
 8002f5e:	e7f5      	b.n	8002f4c <_printf_i+0x228>
 8002f60:	08003147 	.word	0x08003147
 8002f64:	08003158 	.word	0x08003158

08002f68 <memmove>:
 8002f68:	4288      	cmp	r0, r1
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	eb01 0402 	add.w	r4, r1, r2
 8002f70:	d902      	bls.n	8002f78 <memmove+0x10>
 8002f72:	4284      	cmp	r4, r0
 8002f74:	4623      	mov	r3, r4
 8002f76:	d807      	bhi.n	8002f88 <memmove+0x20>
 8002f78:	1e43      	subs	r3, r0, #1
 8002f7a:	42a1      	cmp	r1, r4
 8002f7c:	d008      	beq.n	8002f90 <memmove+0x28>
 8002f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f86:	e7f8      	b.n	8002f7a <memmove+0x12>
 8002f88:	4601      	mov	r1, r0
 8002f8a:	4402      	add	r2, r0
 8002f8c:	428a      	cmp	r2, r1
 8002f8e:	d100      	bne.n	8002f92 <memmove+0x2a>
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f9a:	e7f7      	b.n	8002f8c <memmove+0x24>

08002f9c <_sbrk_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	4d05      	ldr	r5, [pc, #20]	; (8002fb8 <_sbrk_r+0x1c>)
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	602b      	str	r3, [r5, #0]
 8002fa8:	f7fd fc3e 	bl	8000828 <_sbrk>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d102      	bne.n	8002fb6 <_sbrk_r+0x1a>
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	b103      	cbz	r3, 8002fb6 <_sbrk_r+0x1a>
 8002fb4:	6023      	str	r3, [r4, #0]
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
 8002fb8:	20000228 	.word	0x20000228

08002fbc <memchr>:
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	b510      	push	{r4, lr}
 8002fc0:	b2c9      	uxtb	r1, r1
 8002fc2:	4402      	add	r2, r0
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	d101      	bne.n	8002fce <memchr+0x12>
 8002fca:	2000      	movs	r0, #0
 8002fcc:	e003      	b.n	8002fd6 <memchr+0x1a>
 8002fce:	7804      	ldrb	r4, [r0, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	428c      	cmp	r4, r1
 8002fd4:	d1f6      	bne.n	8002fc4 <memchr+0x8>
 8002fd6:	bd10      	pop	{r4, pc}

08002fd8 <memcpy>:
 8002fd8:	440a      	add	r2, r1
 8002fda:	4291      	cmp	r1, r2
 8002fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fe0:	d100      	bne.n	8002fe4 <memcpy+0xc>
 8002fe2:	4770      	bx	lr
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fea:	4291      	cmp	r1, r2
 8002fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ff0:	d1f9      	bne.n	8002fe6 <memcpy+0xe>
 8002ff2:	bd10      	pop	{r4, pc}

08002ff4 <_realloc_r>:
 8002ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff8:	4680      	mov	r8, r0
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	460e      	mov	r6, r1
 8002ffe:	b921      	cbnz	r1, 800300a <_realloc_r+0x16>
 8003000:	4611      	mov	r1, r2
 8003002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003006:	f7ff bc37 	b.w	8002878 <_malloc_r>
 800300a:	b92a      	cbnz	r2, 8003018 <_realloc_r+0x24>
 800300c:	f7ff fbcc 	bl	80027a8 <_free_r>
 8003010:	4625      	mov	r5, r4
 8003012:	4628      	mov	r0, r5
 8003014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003018:	f000 f81b 	bl	8003052 <_malloc_usable_size_r>
 800301c:	4284      	cmp	r4, r0
 800301e:	4607      	mov	r7, r0
 8003020:	d802      	bhi.n	8003028 <_realloc_r+0x34>
 8003022:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003026:	d812      	bhi.n	800304e <_realloc_r+0x5a>
 8003028:	4621      	mov	r1, r4
 800302a:	4640      	mov	r0, r8
 800302c:	f7ff fc24 	bl	8002878 <_malloc_r>
 8003030:	4605      	mov	r5, r0
 8003032:	2800      	cmp	r0, #0
 8003034:	d0ed      	beq.n	8003012 <_realloc_r+0x1e>
 8003036:	42bc      	cmp	r4, r7
 8003038:	4622      	mov	r2, r4
 800303a:	4631      	mov	r1, r6
 800303c:	bf28      	it	cs
 800303e:	463a      	movcs	r2, r7
 8003040:	f7ff ffca 	bl	8002fd8 <memcpy>
 8003044:	4631      	mov	r1, r6
 8003046:	4640      	mov	r0, r8
 8003048:	f7ff fbae 	bl	80027a8 <_free_r>
 800304c:	e7e1      	b.n	8003012 <_realloc_r+0x1e>
 800304e:	4635      	mov	r5, r6
 8003050:	e7df      	b.n	8003012 <_realloc_r+0x1e>

08003052 <_malloc_usable_size_r>:
 8003052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003056:	1f18      	subs	r0, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	bfbc      	itt	lt
 800305c:	580b      	ldrlt	r3, [r1, r0]
 800305e:	18c0      	addlt	r0, r0, r3
 8003060:	4770      	bx	lr
	...

08003064 <_init>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	bf00      	nop
 8003068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306a:	bc08      	pop	{r3}
 800306c:	469e      	mov	lr, r3
 800306e:	4770      	bx	lr

08003070 <_fini>:
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003072:	bf00      	nop
 8003074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003076:	bc08      	pop	{r3}
 8003078:	469e      	mov	lr, r3
 800307a:	4770      	bx	lr
