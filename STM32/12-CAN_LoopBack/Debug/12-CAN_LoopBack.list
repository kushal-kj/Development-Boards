
12-CAN_LoopBack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc0  08002bc0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bc0  08002bc0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bc0  08002bc0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  08002c24  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08002c24  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fd4  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015dd  00000000  00000000  0002809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  00029680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005af  00000000  00000000  00029df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017134  00000000  00000000  0002a3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d73  00000000  00000000  000414db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000847d6  00000000  00000000  0004a24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022d0  00000000  00000000  000cea24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000d0cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b0c 	.word	0x08002b0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002b0c 	.word	0x08002b0c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
void CAN_RX(void);
void CAN_Filter_Config(void);


int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  HAL_Init();
 8000160:	f000 fb1c 	bl	800079c <HAL_Init>

  SystemClock_Config();
 8000164:	f000 f8fe 	bl	8000364 <SystemClock_Config>

  MX_GPIO_Init();
 8000168:	f000 f96a 	bl	8000440 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016c:	f000 f93e 	bl	80003ec <MX_USART2_UART_Init>

  CAN_init();
 8000170:	f000 f812 	bl	8000198 <CAN_init>

  CAN_Filter_Config();
 8000174:	f000 f8d0 	bl	8000318 <CAN_Filter_Config>

  if(HAL_CAN_Start(&hcan) !=HAL_OK)
 8000178:	4806      	ldr	r0, [pc, #24]	; (8000194 <main+0x38>)
 800017a:	f000 fd35 	bl	8000be8 <HAL_CAN_Start>
 800017e:	4603      	mov	r3, r0
 8000180:	2b00      	cmp	r3, #0
 8000182:	d001      	beq.n	8000188 <main+0x2c>
  {
	  Error_Handler();
 8000184:	f000 f9b2 	bl	80004ec <Error_Handler>
  }

  CAN_TX();
 8000188:	f000 f83e 	bl	8000208 <CAN_TX>

  CAN_RX();
 800018c:	f000 f88e 	bl	80002ac <CAN_RX>

  while (1)
 8000190:	e7fe      	b.n	8000190 <main+0x34>
 8000192:	bf00      	nop
 8000194:	20000078 	.word	0x20000078

08000198 <CAN_init>:

  }
}

void CAN_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	  hcan.Instance = CAN1;
 800019c:	4b18      	ldr	r3, [pc, #96]	; (8000200 <CAN_init+0x68>)
 800019e:	4a19      	ldr	r2, [pc, #100]	; (8000204 <CAN_init+0x6c>)
 80001a0:	601a      	str	r2, [r3, #0]
	  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80001a2:	4b17      	ldr	r3, [pc, #92]	; (8000200 <CAN_init+0x68>)
 80001a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001a8:	609a      	str	r2, [r3, #8]

	  hcan.Init.AutoBusOff = DISABLE;
 80001aa:	4b15      	ldr	r3, [pc, #84]	; (8000200 <CAN_init+0x68>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	765a      	strb	r2, [r3, #25]
	  hcan.Init.AutoWakeUp = DISABLE;
 80001b0:	4b13      	ldr	r3, [pc, #76]	; (8000200 <CAN_init+0x68>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	769a      	strb	r2, [r3, #26]
	  hcan.Init.AutoRetransmission = ENABLE;
 80001b6:	4b12      	ldr	r3, [pc, #72]	; (8000200 <CAN_init+0x68>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	76da      	strb	r2, [r3, #27]
	  hcan.Init.ReceiveFifoLocked = DISABLE;
 80001bc:	4b10      	ldr	r3, [pc, #64]	; (8000200 <CAN_init+0x68>)
 80001be:	2200      	movs	r2, #0
 80001c0:	771a      	strb	r2, [r3, #28]
	  hcan.Init.TransmitFifoPriority = DISABLE;
 80001c2:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <CAN_init+0x68>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	775a      	strb	r2, [r3, #29]
	  hcan.Init.TimeTriggeredMode = DISABLE;
 80001c8:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <CAN_init+0x68>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	761a      	strb	r2, [r3, #24]

	  //Settings related to CAN bit timings

	  hcan.Init.Prescaler = 2;
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <CAN_init+0x68>)
 80001d0:	2202      	movs	r2, #2
 80001d2:	605a      	str	r2, [r3, #4]
	  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001d4:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <CAN_init+0x68>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	60da      	str	r2, [r3, #12]
	  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <CAN_init+0x68>)
 80001dc:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80001e0:	611a      	str	r2, [r3, #16]
	  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80001e2:	4b07      	ldr	r3, [pc, #28]	; (8000200 <CAN_init+0x68>)
 80001e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80001e8:	615a      	str	r2, [r3, #20]

	  if(HAL_CAN_Init(&hcan) !=HAL_OK)
 80001ea:	4805      	ldr	r0, [pc, #20]	; (8000200 <CAN_init+0x68>)
 80001ec:	f000 fb38 	bl	8000860 <HAL_CAN_Init>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <CAN_init+0x62>
	  {
		  Error_Handler();
 80001f6:	f000 f979 	bl	80004ec <Error_Handler>
	  }
}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000078 	.word	0x20000078
 8000204:	40006400 	.word	0x40006400

08000208 <CAN_TX>:


void CAN_TX(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	; 0x58
 800020c:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef TxHeader;		//Transmit handler

	uint32_t TxMailbox;

	uint8_t our_message[5]={'H','E','L','L','O'};		//Data to be transmitted
 800020e:	4a23      	ldr	r2, [pc, #140]	; (800029c <CAN_TX+0x94>)
 8000210:	463b      	mov	r3, r7
 8000212:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000216:	6018      	str	r0, [r3, #0]
 8000218:	3304      	adds	r3, #4
 800021a:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC=5;					//5 bytes of data length
 800021c:	2305      	movs	r3, #5
 800021e:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId=0x65D;			//Standard itentifier
 8000220:	f240 635d 	movw	r3, #1629	; 0x65d
 8000224:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE=CAN_ID_STD;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]
	TxHeader.RTR=CAN_RTR_DATA;		//Data frame
 800022a:	2300      	movs	r3, #0
 800022c:	61bb      	str	r3, [r7, #24]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, our_message, &TxMailbox);	//Add the transmit message to mailbox
 800022e:	f107 0308 	add.w	r3, r7, #8
 8000232:	463a      	mov	r2, r7
 8000234:	f107 010c 	add.w	r1, r7, #12
 8000238:	4819      	ldr	r0, [pc, #100]	; (80002a0 <CAN_TX+0x98>)
 800023a:	f000 fd19 	bl	8000c70 <HAL_CAN_AddTxMessage>

	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, our_message, &TxMailbox)!=HAL_OK)			//To check if it executes correctly or not
 800023e:	f107 0308 	add.w	r3, r7, #8
 8000242:	463a      	mov	r2, r7
 8000244:	f107 010c 	add.w	r1, r7, #12
 8000248:	4815      	ldr	r0, [pc, #84]	; (80002a0 <CAN_TX+0x98>)
 800024a:	f000 fd11 	bl	8000c70 <HAL_CAN_AddTxMessage>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <CAN_TX+0x50>
	{
		Error_Handler();
 8000254:	f000 f94a 	bl	80004ec <Error_Handler>
	}

	while(HAL_CAN_IsTxMessagePending(&hcan, TxMailbox));
 8000258:	bf00      	nop
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	4619      	mov	r1, r3
 800025e:	4810      	ldr	r0, [pc, #64]	; (80002a0 <CAN_TX+0x98>)
 8000260:	f000 fdd5 	bl	8000e0e <HAL_CAN_IsTxMessagePending>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1f7      	bne.n	800025a <CAN_TX+0x52>

	sprintf(msg,"Message Transmitted \r\n");
 800026a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <CAN_TX+0x9c>)
 8000270:	4618      	mov	r0, r3
 8000272:	f001 ff99 	bl	80021a8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff66 	bl	800014c <strlen>
 8000280:	4603      	mov	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000288:	f04f 33ff 	mov.w	r3, #4294967295
 800028c:	4806      	ldr	r0, [pc, #24]	; (80002a8 <CAN_TX+0xa0>)
 800028e:	f001 fe0b 	bl	8001ea8 <HAL_UART_Transmit>

}
 8000292:	bf00      	nop
 8000294:	3758      	adds	r7, #88	; 0x58
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	08002b3c 	.word	0x08002b3c
 80002a0:	20000078 	.word	0x20000078
 80002a4:	08002b24 	.word	0x08002b24
 80002a8:	200000a0 	.word	0x200000a0

080002ac <CAN_RX>:


void CAN_RX(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b096      	sub	sp, #88	; 0x58
 80002b0:	af00      	add	r7, sp, #0
	uint8_t receive_msg[5];

	char msg[50];

	//we are waiting for at least one message in to the RX FIFO
	while(!HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0));
 80002b2:	bf00      	nop
 80002b4:	2100      	movs	r1, #0
 80002b6:	4815      	ldr	r0, [pc, #84]	; (800030c <CAN_RX+0x60>)
 80002b8:	f000 feed 	bl	8001096 <HAL_CAN_GetRxFifoFillLevel>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f8      	beq.n	80002b4 <CAN_RX+0x8>

	if(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, receive_msg) !=HAL_OK)
 80002c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80002ca:	2100      	movs	r1, #0
 80002cc:	480f      	ldr	r0, [pc, #60]	; (800030c <CAN_RX+0x60>)
 80002ce:	f000 fdc1 	bl	8000e54 <HAL_CAN_GetRxMessage>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <CAN_RX+0x30>
	{
		Error_Handler();
 80002d8:	f000 f908 	bl	80004ec <Error_Handler>
	}

	sprintf(msg,"Message Received : %s \r\n",receive_msg);
 80002dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80002e0:	463b      	mov	r3, r7
 80002e2:	490b      	ldr	r1, [pc, #44]	; (8000310 <CAN_RX+0x64>)
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 ff5f 	bl	80021a8 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80002ea:	463b      	mov	r3, r7
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ff2d 	bl	800014c <strlen>
 80002f2:	4603      	mov	r3, r0
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4639      	mov	r1, r7
 80002f8:	f04f 33ff 	mov.w	r3, #4294967295
 80002fc:	4805      	ldr	r0, [pc, #20]	; (8000314 <CAN_RX+0x68>)
 80002fe:	f001 fdd3 	bl	8001ea8 <HAL_UART_Transmit>

}
 8000302:	bf00      	nop
 8000304:	3758      	adds	r7, #88	; 0x58
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000078 	.word	0x20000078
 8000310:	08002b44 	.word	0x08002b44
 8000314:	200000a0 	.word	0x200000a0

08000318 <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	; 0x28
 800031c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter_init;		//handler for CAN_Filter

	can_filter_init.FilterActivation = ENABLE;
 800031e:	2301      	movs	r3, #1
 8000320:	623b      	str	r3, [r7, #32]
	can_filter_init.FilterBank = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
	can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000326:	2300      	movs	r3, #0
 8000328:	613b      	str	r3, [r7, #16]
	can_filter_init.FilterIdHigh=0x0000;
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
	can_filter_init.FilterIdLow=0x0000;
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
	can_filter_init.FilterMaskIdHigh=0x0000;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
	can_filter_init.FilterMaskIdLow=0x0000;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
	can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
	can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 800033e:	2301      	movs	r3, #1
 8000340:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan, &can_filter_init) !=HAL_OK)
 8000342:	463b      	mov	r3, r7
 8000344:	4619      	mov	r1, r3
 8000346:	4806      	ldr	r0, [pc, #24]	; (8000360 <CAN_Filter_Config+0x48>)
 8000348:	f000 fb85 	bl	8000a56 <HAL_CAN_ConfigFilter>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 8000352:	f000 f8cb 	bl	80004ec <Error_Handler>
	}

}
 8000356:	bf00      	nop
 8000358:	3728      	adds	r7, #40	; 0x28
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000078 	.word	0x20000078

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b090      	sub	sp, #64	; 0x40
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0318 	add.w	r3, r7, #24
 800036e:	2228      	movs	r2, #40	; 0x28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f001 ff38 	bl	80021e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000386:	2301      	movs	r3, #1
 8000388:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000394:	2301      	movs	r3, #1
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000398:	2302      	movs	r3, #2
 800039a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80003a2:	2300      	movs	r3, #0
 80003a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f91a 	bl	80015e4 <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003b6:	f000 f899 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003be:	2302      	movs	r3, #2
 80003c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2101      	movs	r1, #1
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 fb88 	bl	8001ae8 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003de:	f000 f885 	bl	80004ec <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	; 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_USART2_UART_Init+0x4c>)
 80003f2:	4a12      	ldr	r2, [pc, #72]	; (800043c <MX_USART2_UART_Init+0x50>)
 80003f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <MX_USART2_UART_Init+0x4c>)
 80003f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_USART2_UART_Init+0x4c>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_USART2_UART_Init+0x4c>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MX_USART2_UART_Init+0x4c>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_USART2_UART_Init+0x4c>)
 8000412:	220c      	movs	r2, #12
 8000414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_USART2_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_USART2_UART_Init+0x4c>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_USART2_UART_Init+0x4c>)
 8000424:	f001 fcf0 	bl	8001e08 <HAL_UART_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800042e:	f000 f85d 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	200000a0 	.word	0x200000a0
 800043c:	40004400 	.word	0x40004400

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000454:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <MX_GPIO_Init+0xa4>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a22      	ldr	r2, [pc, #136]	; (80004e4 <MX_GPIO_Init+0xa4>)
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <MX_GPIO_Init+0xa4>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0310 	and.w	r3, r3, #16
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <MX_GPIO_Init+0xa4>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <MX_GPIO_Init+0xa4>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MX_GPIO_Init+0xa4>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0320 	and.w	r3, r3, #32
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_GPIO_Init+0xa4>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <MX_GPIO_Init+0xa4>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_GPIO_Init+0xa4>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2120      	movs	r1, #32
 80004a0:	4811      	ldr	r0, [pc, #68]	; (80004e8 <MX_GPIO_Init+0xa8>)
 80004a2:	f001 f887 	bl	80015b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004a6:	2320      	movs	r3, #32
 80004a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	480a      	ldr	r0, [pc, #40]	; (80004e8 <MX_GPIO_Init+0xa8>)
 80004be:	f000 fef5 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004c2:	2340      	movs	r3, #64	; 0x40
 80004c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_GPIO_Init+0xa8>)
 80004d6:	f000 fee9 	bl	80012ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004da:	bf00      	nop
 80004dc:	3720      	adds	r7, #32
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a14      	ldr	r2, [pc, #80]	; (8000554 <HAL_MspInit+0x5c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_MspInit+0x5c>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_MspInit+0x5c>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x5c>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_MspInit+0x60>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_MspInit+0x60>)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000

0800055c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <HAL_CAN_MspInit+0x8c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d131      	bne.n	80005e0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_CAN_MspInit+0x90>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <HAL_CAN_MspInit+0x90>)
 8000582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000586:	61d3      	str	r3, [r2, #28]
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_CAN_MspInit+0x90>)
 800058a:	69db      	ldr	r3, [r3, #28]
 800058c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_CAN_MspInit+0x90>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <HAL_CAN_MspInit+0x90>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_CAN_MspInit+0x90>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <HAL_CAN_MspInit+0x94>)
 80005c2:	f000 fe73 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <HAL_CAN_MspInit+0x94>)
 80005dc:	f000 fe66 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40006400 	.word	0x40006400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800

080005f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a1b      	ldr	r2, [pc, #108]	; (800067c <HAL_UART_MspInit+0x88>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d12f      	bne.n	8000674 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <HAL_UART_MspInit+0x8c>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	4a19      	ldr	r2, [pc, #100]	; (8000680 <HAL_UART_MspInit+0x8c>)
 800061a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061e:	61d3      	str	r3, [r2, #28]
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <HAL_UART_MspInit+0x8c>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <HAL_UART_MspInit+0x8c>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a13      	ldr	r2, [pc, #76]	; (8000680 <HAL_UART_MspInit+0x8c>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <HAL_UART_MspInit+0x8c>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000644:	2304      	movs	r3, #4
 8000646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	2302      	movs	r3, #2
 800064a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4619      	mov	r1, r3
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <HAL_UART_MspInit+0x90>)
 8000658:	f000 fe28 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800065c:	2308      	movs	r3, #8
 800065e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <HAL_UART_MspInit+0x90>)
 8000670:	f000 fe1c 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40004400 	.word	0x40004400
 8000680:	40021000 	.word	0x40021000
 8000684:	40010800 	.word	0x40010800

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ce:	f000 f8ab 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <_sbrk+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <_sbrk+0x60>)
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <_sbrk+0x64>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <_sbrk+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d207      	bcs.n	8000718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000708:	f001 fd76 	bl	80021f8 <__errno>
 800070c:	4603      	mov	r3, r0
 800070e:	220c      	movs	r2, #12
 8000710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	e009      	b.n	800072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <_sbrk+0x64>)
 8000728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20005000 	.word	0x20005000
 8000738:	00000400 	.word	0x00000400
 800073c:	200000e8 	.word	0x200000e8
 8000740:	20000238 	.word	0x20000238

08000744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000750:	f7ff fff8 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000756:	490c      	ldr	r1, [pc, #48]	; (8000788 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <LoopFillZerobss+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a09      	ldr	r2, [pc, #36]	; (8000790 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800076c:	4c09      	ldr	r4, [pc, #36]	; (8000794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077a:	f001 fd43 	bl	8002204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fced 	bl	800015c <main>
  bx lr
 8000782:	4770      	bx	lr
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800078c:	08002bc8 	.word	0x08002bc8
  ldr r2, =_sbss
 8000790:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000794:	20000238 	.word	0x20000238

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 fd49 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fe9e 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fd53 	bl	8001292 <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 fd29 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <HAL_IncTick+0x20>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000008 	.word	0x20000008
 8000848:	200000ec 	.word	0x200000ec

0800084c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	200000ec 	.word	0x200000ec

08000860 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d101      	bne.n	8000872 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e0ed      	b.n	8000a4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d102      	bne.n	8000884 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe6c 	bl	800055c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 0201 	orr.w	r2, r2, #1
 8000892:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000894:	f7ff ffda 	bl	800084c <HAL_GetTick>
 8000898:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800089a:	e012      	b.n	80008c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800089c:	f7ff ffd6 	bl	800084c <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	2b0a      	cmp	r3, #10
 80008a8:	d90b      	bls.n	80008c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2205      	movs	r2, #5
 80008ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e0c5      	b.n	8000a4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0e5      	beq.n	800089c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f022 0202 	bic.w	r2, r2, #2
 80008de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008e0:	f7ff ffb4 	bl	800084c <HAL_GetTick>
 80008e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008e6:	e012      	b.n	800090e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008e8:	f7ff ffb0 	bl	800084c <HAL_GetTick>
 80008ec:	4602      	mov	r2, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	2b0a      	cmp	r3, #10
 80008f4:	d90b      	bls.n	800090e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2205      	movs	r2, #5
 8000906:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e09f      	b.n	8000a4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1e5      	bne.n	80008e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7e1b      	ldrb	r3, [r3, #24]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d108      	bne.n	8000936 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	e007      	b.n	8000946 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7e5b      	ldrb	r3, [r3, #25]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d108      	bne.n	8000960 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	e007      	b.n	8000970 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800096e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7e9b      	ldrb	r3, [r3, #26]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d108      	bne.n	800098a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f042 0220 	orr.w	r2, r2, #32
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e007      	b.n	800099a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f022 0220 	bic.w	r2, r2, #32
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	7edb      	ldrb	r3, [r3, #27]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d108      	bne.n	80009b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f022 0210 	bic.w	r2, r2, #16
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	e007      	b.n	80009c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f042 0210 	orr.w	r2, r2, #16
 80009c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7f1b      	ldrb	r3, [r3, #28]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d108      	bne.n	80009de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0208 	orr.w	r2, r2, #8
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	e007      	b.n	80009ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f022 0208 	bic.w	r2, r2, #8
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7f5b      	ldrb	r3, [r3, #29]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d108      	bne.n	8000a08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f042 0204 	orr.w	r2, r2, #4
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	e007      	b.n	8000a18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f022 0204 	bic.w	r2, r2, #4
 8000a16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	431a      	orrs	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	691b      	ldr	r3, [r3, #16]
 8000a26:	431a      	orrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	ea42 0103 	orr.w	r1, r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	1e5a      	subs	r2, r3, #1
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b087      	sub	sp, #28
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a6c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a6e:	7cfb      	ldrb	r3, [r7, #19]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d003      	beq.n	8000a7c <HAL_CAN_ConfigFilter+0x26>
 8000a74:	7cfb      	ldrb	r3, [r7, #19]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	f040 80aa 	bne.w	8000bd0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a82:	f043 0201 	orr.w	r2, r3, #1
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f003 031f 	and.w	r3, r3, #31
 8000a94:	2201      	movs	r2, #1
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d123      	bne.n	8000afe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ad8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3248      	adds	r2, #72	; 0x48
 8000ade:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000af2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000af4:	6979      	ldr	r1, [r7, #20]
 8000af6:	3348      	adds	r3, #72	; 0x48
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	440b      	add	r3, r1
 8000afc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d122      	bne.n	8000b4c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3248      	adds	r2, #72	; 0x48
 8000b2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b42:	6979      	ldr	r1, [r7, #20]
 8000b44:	3348      	adds	r3, #72	; 0x48
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d109      	bne.n	8000b68 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b66:	e007      	b.n	8000b78 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d109      	bne.n	8000b94 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000b92:	e007      	b.n	8000ba4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d107      	bne.n	8000bbc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bc2:	f023 0201 	bic.w	r2, r3, #1
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e006      	b.n	8000bde <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
  }
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	371c      	adds	r7, #28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d12e      	bne.n	8000c5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2202      	movs	r2, #2
 8000c00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 0201 	bic.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c14:	f7ff fe1a 	bl	800084c <HAL_GetTick>
 8000c18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c1a:	e012      	b.n	8000c42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c1c:	f7ff fe16 	bl	800084c <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b0a      	cmp	r3, #10
 8000c28:	d90b      	bls.n	8000c42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2205      	movs	r2, #5
 8000c3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e012      	b.n	8000c68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1e5      	bne.n	8000c1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e006      	b.n	8000c68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
  }
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c84:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c8e:	7ffb      	ldrb	r3, [r7, #31]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d003      	beq.n	8000c9c <HAL_CAN_AddTxMessage+0x2c>
 8000c94:	7ffb      	ldrb	r3, [r7, #31]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	f040 80ad 	bne.w	8000df6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10a      	bne.n	8000cbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d105      	bne.n	8000cbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 8095 	beq.w	8000de6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	0e1b      	lsrs	r3, r3, #24
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10d      	bne.n	8000cf4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ce2:	68f9      	ldr	r1, [r7, #12]
 8000ce4:	6809      	ldr	r1, [r1, #0]
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3318      	adds	r3, #24
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	440b      	add	r3, r1
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e00f      	b.n	8000d14 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cfe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d04:	68f9      	ldr	r1, [r7, #12]
 8000d06:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d08:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3318      	adds	r3, #24
 8000d0e:	011b      	lsls	r3, r3, #4
 8000d10:	440b      	add	r3, r1
 8000d12:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	691a      	ldr	r2, [r3, #16]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3318      	adds	r3, #24
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	440b      	add	r3, r1
 8000d24:	3304      	adds	r3, #4
 8000d26:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	7d1b      	ldrb	r3, [r3, #20]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d111      	bne.n	8000d54 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3318      	adds	r3, #24
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	6811      	ldr	r1, [r2, #0]
 8000d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	440b      	add	r3, r1
 8000d50:	3304      	adds	r3, #4
 8000d52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3307      	adds	r3, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	061a      	lsls	r2, r3, #24
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3306      	adds	r3, #6
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	041b      	lsls	r3, r3, #16
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3305      	adds	r3, #5
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	3204      	adds	r2, #4
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	4610      	mov	r0, r2
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	6811      	ldr	r1, [r2, #0]
 8000d7c:	ea43 0200 	orr.w	r2, r3, r0
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	440b      	add	r3, r1
 8000d86:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3303      	adds	r3, #3
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	061a      	lsls	r2, r3, #24
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3302      	adds	r3, #2
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	041b      	lsls	r3, r3, #16
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3301      	adds	r3, #1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	4313      	orrs	r3, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	7812      	ldrb	r2, [r2, #0]
 8000dac:	4610      	mov	r0, r2
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	6811      	ldr	r1, [r2, #0]
 8000db2:	ea43 0200 	orr.w	r2, r3, r0
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	440b      	add	r3, r1
 8000dbc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000dc0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3318      	adds	r3, #24
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	4413      	add	r3, r2
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	6811      	ldr	r1, [r2, #0]
 8000dd4:	f043 0201 	orr.w	r2, r3, #1
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3318      	adds	r3, #24
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	440b      	add	r3, r1
 8000de0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e00e      	b.n	8000e04 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e006      	b.n	8000e04 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
  }
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3724      	adds	r7, #36	; 0x24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b085      	sub	sp, #20
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e22:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e24:	7afb      	ldrb	r3, [r7, #11]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d002      	beq.n	8000e30 <HAL_CAN_IsTxMessagePending+0x22>
 8000e2a:	7afb      	ldrb	r3, [r7, #11]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d10b      	bne.n	8000e48 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	069b      	lsls	r3, r3, #26
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	069b      	lsls	r3, r3, #26
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d001      	beq.n	8000e48 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000e44:	2301      	movs	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000e48:	68fb      	ldr	r3, [r7, #12]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e68:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d003      	beq.n	8000e78 <HAL_CAN_GetRxMessage+0x24>
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	f040 8103 	bne.w	800107e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10e      	bne.n	8000e9c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d116      	bne.n	8000eba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e0f7      	b.n	800108c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d107      	bne.n	8000eba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0e8      	b.n	800108c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	331b      	adds	r3, #27
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	4413      	add	r3, r2
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0204 	and.w	r2, r3, #4
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10c      	bne.n	8000ef2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	331b      	adds	r3, #27
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	4413      	add	r3, r2
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	0d5b      	lsrs	r3, r3, #21
 8000ee8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e00b      	b.n	8000f0a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	331b      	adds	r3, #27
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	4413      	add	r3, r2
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	331b      	adds	r3, #27
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	4413      	add	r3, r2
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0202 	and.w	r2, r3, #2
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	331b      	adds	r3, #27
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	611a      	str	r2, [r3, #16]
 8000f3e:	e00b      	b.n	8000f58 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	331b      	adds	r3, #27
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 020f 	and.w	r2, r3, #15
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	331b      	adds	r3, #27
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	4413      	add	r3, r2
 8000f64:	3304      	adds	r3, #4
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	331b      	adds	r3, #27
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	0c1b      	lsrs	r3, r3, #16
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	4413      	add	r3, r2
 8000f92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	4413      	add	r3, r2
 8000fa8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	0a1a      	lsrs	r2, r3, #8
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	0c1a      	lsrs	r2, r3, #16
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	4413      	add	r3, r2
 8000fdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	0e1a      	lsrs	r2, r3, #24
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	3304      	adds	r3, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	0a1a      	lsrs	r2, r3, #8
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	3305      	adds	r3, #5
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	0c1a      	lsrs	r2, r3, #16
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	3306      	adds	r3, #6
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	4413      	add	r3, r2
 8001042:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0e1a      	lsrs	r2, r3, #24
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	3307      	adds	r3, #7
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d108      	bne.n	800106a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0220 	orr.w	r2, r2, #32
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	e007      	b.n	800107a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e006      	b.n	800108c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
  }
}
 800108c:	4618      	mov	r0, r3
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010aa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d002      	beq.n	80010b8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d10f      	bne.n	80010d8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d106      	bne.n	80010cc <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e005      	b.n	80010d8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff90 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff49 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff5e 	bl	800112c <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff90 	bl	800119c <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5f 	bl	8001148 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffb0 	bl	8001200 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b08b      	sub	sp, #44	; 0x2c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012be:	e169      	b.n	8001594 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012c0:	2201      	movs	r2, #1
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f040 8158 	bne.w	800158e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a9a      	ldr	r2, [pc, #616]	; (800154c <HAL_GPIO_Init+0x2a0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d05e      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 80012e8:	4a98      	ldr	r2, [pc, #608]	; (800154c <HAL_GPIO_Init+0x2a0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d875      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 80012ee:	4a98      	ldr	r2, [pc, #608]	; (8001550 <HAL_GPIO_Init+0x2a4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d058      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 80012f4:	4a96      	ldr	r2, [pc, #600]	; (8001550 <HAL_GPIO_Init+0x2a4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d86f      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 80012fa:	4a96      	ldr	r2, [pc, #600]	; (8001554 <HAL_GPIO_Init+0x2a8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d052      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 8001300:	4a94      	ldr	r2, [pc, #592]	; (8001554 <HAL_GPIO_Init+0x2a8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d869      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 8001306:	4a94      	ldr	r2, [pc, #592]	; (8001558 <HAL_GPIO_Init+0x2ac>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d04c      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 800130c:	4a92      	ldr	r2, [pc, #584]	; (8001558 <HAL_GPIO_Init+0x2ac>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d863      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 8001312:	4a92      	ldr	r2, [pc, #584]	; (800155c <HAL_GPIO_Init+0x2b0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d046      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 8001318:	4a90      	ldr	r2, [pc, #576]	; (800155c <HAL_GPIO_Init+0x2b0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d85d      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 800131e:	2b12      	cmp	r3, #18
 8001320:	d82a      	bhi.n	8001378 <HAL_GPIO_Init+0xcc>
 8001322:	2b12      	cmp	r3, #18
 8001324:	d859      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 8001326:	a201      	add	r2, pc, #4	; (adr r2, 800132c <HAL_GPIO_Init+0x80>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	080013a7 	.word	0x080013a7
 8001330:	08001381 	.word	0x08001381
 8001334:	08001393 	.word	0x08001393
 8001338:	080013d5 	.word	0x080013d5
 800133c:	080013db 	.word	0x080013db
 8001340:	080013db 	.word	0x080013db
 8001344:	080013db 	.word	0x080013db
 8001348:	080013db 	.word	0x080013db
 800134c:	080013db 	.word	0x080013db
 8001350:	080013db 	.word	0x080013db
 8001354:	080013db 	.word	0x080013db
 8001358:	080013db 	.word	0x080013db
 800135c:	080013db 	.word	0x080013db
 8001360:	080013db 	.word	0x080013db
 8001364:	080013db 	.word	0x080013db
 8001368:	080013db 	.word	0x080013db
 800136c:	080013db 	.word	0x080013db
 8001370:	08001389 	.word	0x08001389
 8001374:	0800139d 	.word	0x0800139d
 8001378:	4a79      	ldr	r2, [pc, #484]	; (8001560 <HAL_GPIO_Init+0x2b4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800137e:	e02c      	b.n	80013da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	623b      	str	r3, [r7, #32]
          break;
 8001386:	e029      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	3304      	adds	r3, #4
 800138e:	623b      	str	r3, [r7, #32]
          break;
 8001390:	e024      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	3308      	adds	r3, #8
 8001398:	623b      	str	r3, [r7, #32]
          break;
 800139a:	e01f      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	330c      	adds	r3, #12
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e01a      	b.n	80013dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ae:	2304      	movs	r3, #4
 80013b0:	623b      	str	r3, [r7, #32]
          break;
 80013b2:	e013      	b.n	80013dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d105      	bne.n	80013c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013bc:	2308      	movs	r3, #8
 80013be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	611a      	str	r2, [r3, #16]
          break;
 80013c6:	e009      	b.n	80013dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c8:	2308      	movs	r3, #8
 80013ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	615a      	str	r2, [r3, #20]
          break;
 80013d2:	e003      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
          break;
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x130>
          break;
 80013da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2bff      	cmp	r3, #255	; 0xff
 80013e0:	d801      	bhi.n	80013e6 <HAL_GPIO_Init+0x13a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	e001      	b.n	80013ea <HAL_GPIO_Init+0x13e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3304      	adds	r3, #4
 80013ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2bff      	cmp	r3, #255	; 0xff
 80013f0:	d802      	bhi.n	80013f8 <HAL_GPIO_Init+0x14c>
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x152>
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	3b08      	subs	r3, #8
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	210f      	movs	r1, #15
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	6a39      	ldr	r1, [r7, #32]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	431a      	orrs	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80b1 	beq.w	800158e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800142c:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001444:	4a48      	ldr	r2, [pc, #288]	; (8001568 <HAL_GPIO_Init+0x2bc>)
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a40      	ldr	r2, [pc, #256]	; (800156c <HAL_GPIO_Init+0x2c0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d013      	beq.n	8001498 <HAL_GPIO_Init+0x1ec>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a3f      	ldr	r2, [pc, #252]	; (8001570 <HAL_GPIO_Init+0x2c4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d00d      	beq.n	8001494 <HAL_GPIO_Init+0x1e8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a3e      	ldr	r2, [pc, #248]	; (8001574 <HAL_GPIO_Init+0x2c8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d007      	beq.n	8001490 <HAL_GPIO_Init+0x1e4>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a3d      	ldr	r2, [pc, #244]	; (8001578 <HAL_GPIO_Init+0x2cc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_GPIO_Init+0x1e0>
 8001488:	2303      	movs	r3, #3
 800148a:	e006      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 800148c:	2304      	movs	r3, #4
 800148e:	e004      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 8001490:	2302      	movs	r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 8001498:	2300      	movs	r3, #0
 800149a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	4093      	lsls	r3, r2
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014aa:	492f      	ldr	r1, [pc, #188]	; (8001568 <HAL_GPIO_Init+0x2bc>)
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	492c      	ldr	r1, [pc, #176]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	43db      	mvns	r3, r3
 80014da:	4928      	ldr	r1, [pc, #160]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	4922      	ldr	r1, [pc, #136]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	60cb      	str	r3, [r1, #12]
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	43db      	mvns	r3, r3
 8001502:	491e      	ldr	r1, [pc, #120]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001504:	4013      	ands	r3, r2
 8001506:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4918      	ldr	r1, [pc, #96]	; (800157c <HAL_GPIO_Init+0x2d0>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	43db      	mvns	r3, r3
 800152a:	4914      	ldr	r1, [pc, #80]	; (800157c <HAL_GPIO_Init+0x2d0>)
 800152c:	4013      	ands	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d021      	beq.n	8001580 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_GPIO_Init+0x2d0>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	490e      	ldr	r1, [pc, #56]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
 8001548:	e021      	b.n	800158e <HAL_GPIO_Init+0x2e2>
 800154a:	bf00      	nop
 800154c:	10320000 	.word	0x10320000
 8001550:	10310000 	.word	0x10310000
 8001554:	10220000 	.word	0x10220000
 8001558:	10210000 	.word	0x10210000
 800155c:	10120000 	.word	0x10120000
 8001560:	10110000 	.word	0x10110000
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	40010800 	.word	0x40010800
 8001570:	40010c00 	.word	0x40010c00
 8001574:	40011000 	.word	0x40011000
 8001578:	40011400 	.word	0x40011400
 800157c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	43db      	mvns	r3, r3
 8001588:	4909      	ldr	r1, [pc, #36]	; (80015b0 <HAL_GPIO_Init+0x304>)
 800158a:	4013      	ands	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	3301      	adds	r3, #1
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f47f ae8e 	bne.w	80012c0 <HAL_GPIO_Init+0x14>
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	372c      	adds	r7, #44	; 0x2c
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40010400 	.word	0x40010400

080015b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
 80015c0:	4613      	mov	r3, r2
 80015c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015d0:	e003      	b.n	80015da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	611a      	str	r2, [r3, #16]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e272      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8087 	beq.w	8001712 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001604:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b04      	cmp	r3, #4
 800160e:	d00c      	beq.n	800162a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d112      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
 800161c:	4b8c      	ldr	r3, [pc, #560]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d10b      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162a:	4b89      	ldr	r3, [pc, #548]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d06c      	beq.n	8001710 <HAL_RCC_OscConfig+0x12c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d168      	bne.n	8001710 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e24c      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x76>
 800164c:	4b80      	ldr	r3, [pc, #512]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a7f      	ldr	r2, [pc, #508]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e02e      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x98>
 8001662:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7a      	ldr	r2, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b78      	ldr	r3, [pc, #480]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a77      	ldr	r2, [pc, #476]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e01d      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0xbc>
 8001686:	4b72      	ldr	r3, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a71      	ldr	r2, [pc, #452]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6e      	ldr	r2, [pc, #440]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 80016a0:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6a      	ldr	r2, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b68      	ldr	r3, [pc, #416]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a67      	ldr	r2, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff f8c4 	bl	800084c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff f8c0 	bl	800084c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e200      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0xe4>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff f8b0 	bl	800084c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff f8ac 	bl	800084c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1ec      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x10c>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d063      	beq.n	80017e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d11c      	bne.n	8001770 <HAL_RCC_OscConfig+0x18c>
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d116      	bne.n	8001770 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x176>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e1c0      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4939      	ldr	r1, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	e03a      	b.n	80017e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff f865 	bl	800084c <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff f861 	bl	800084c <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e1a1      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4927      	ldr	r1, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff f844 	bl	800084c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff f840 	bl	800084c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e180      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d03a      	beq.n	8001868 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d019      	beq.n	800182e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff f824 	bl	800084c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff f820 	bl	800084c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e160      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f000 fad0 	bl	8001dcc <RCC_Delay>
 800182c:	e01c      	b.n	8001868 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff f80a 	bl	800084c <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183a:	e00f      	b.n	800185c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff f806 	bl	800084c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d908      	bls.n	800185c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e146      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	42420000 	.word	0x42420000
 8001858:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	4b92      	ldr	r3, [pc, #584]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e9      	bne.n	800183c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80a6 	beq.w	80019c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b8b      	ldr	r3, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10d      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a87      	ldr	r2, [pc, #540]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b85      	ldr	r3, [pc, #532]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b82      	ldr	r3, [pc, #520]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b7f      	ldr	r3, [pc, #508]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7e      	ldr	r2, [pc, #504]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7fe ffc7 	bl	800084c <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7fe ffc3 	bl	800084c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e103      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	4b75      	ldr	r3, [pc, #468]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x312>
 80018e8:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a6e      	ldr	r2, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	e02d      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x334>
 80018fe:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a69      	ldr	r2, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a66      	ldr	r2, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	e01c      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d10c      	bne.n	800193a <HAL_RCC_OscConfig+0x356>
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a60      	ldr	r2, [pc, #384]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a5d      	ldr	r2, [pc, #372]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	e00b      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a5a      	ldr	r2, [pc, #360]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a57      	ldr	r2, [pc, #348]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d015      	beq.n	8001986 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7fe ff77 	bl	800084c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7fe ff73 	bl	800084c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0b1      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ee      	beq.n	8001962 <HAL_RCC_OscConfig+0x37e>
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7fe ff61 	bl	800084c <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7fe ff5d 	bl	800084c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e09b      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ee      	bne.n	800198e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8087 	beq.w	8001ada <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d061      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d146      	bne.n	8001a6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_RCC_OscConfig+0x4cc>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7fe ff31 	bl	800084c <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7fe ff2d 	bl	800084c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e06d      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4921      	ldr	r1, [pc, #132]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a19      	ldr	r1, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	491b      	ldr	r1, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_RCC_OscConfig+0x4cc>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7fe ff01 	bl	800084c <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7fe fefd 	bl	800084c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e03d      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46a>
 8001a6c:	e035      	b.n	8001ada <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_RCC_OscConfig+0x4cc>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7fe feea 	bl	800084c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7fe fee6 	bl	800084c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e026      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x498>
 8001a9a:	e01e      	b.n	8001ada <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e019      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_OscConfig+0x500>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0d0      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d910      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4965      	ldr	r1, [pc, #404]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0b8      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b5c:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a52      	ldr	r2, [pc, #328]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	494d      	ldr	r1, [pc, #308]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d040      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e07f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e073      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e06b      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4936      	ldr	r1, [pc, #216]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7fe fe38 	bl	800084c <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7fe fe34 	bl	800084c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e053      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d210      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 0207 	bic.w	r2, r3, #7
 8001c1e:	4922      	ldr	r1, [pc, #136]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e032      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4916      	ldr	r1, [pc, #88]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c76:	f000 f821 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	490a      	ldr	r1, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	5ccb      	ldrb	r3, [r1, r3]
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1cc>)
 8001c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1d0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fd96 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08002b60 	.word	0x08002b60
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d002      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x30>
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x36>
 8001cea:	e027      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cee:	613b      	str	r3, [r7, #16]
      break;
 8001cf0:	e027      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	0c9b      	lsrs	r3, r3, #18
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	0c5b      	lsrs	r3, r3, #17
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d1e:	fb03 f202 	mul.w	r2, r3, r2
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e004      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	613b      	str	r3, [r7, #16]
      break;
 8001d3a:	e002      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d3e:	613b      	str	r3, [r7, #16]
      break;
 8001d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d42:	693b      	ldr	r3, [r7, #16]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	00f42400 	.word	0x00f42400
 8001d58:	08002b78 	.word	0x08002b78
 8001d5c:	08002b88 	.word	0x08002b88
 8001d60:	003d0900 	.word	0x003d0900
 8001d64:	007a1200 	.word	0x007a1200

08001d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d6c:	4b02      	ldr	r3, [pc, #8]	; (8001d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d80:	f7ff fff2 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4903      	ldr	r1, [pc, #12]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08002b70 	.word	0x08002b70

08001da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	0adb      	lsrs	r3, r3, #11
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4903      	ldr	r1, [pc, #12]	; (8001dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08002b70 	.word	0x08002b70

08001dcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <RCC_Delay+0x34>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <RCC_Delay+0x38>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0a5b      	lsrs	r3, r3, #9
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001de8:	bf00      	nop
  }
  while (Delay --);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1e5a      	subs	r2, r3, #1
 8001dee:	60fa      	str	r2, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f9      	bne.n	8001de8 <RCC_Delay+0x1c>
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	20000000 	.word	0x20000000
 8001e04:	10624dd3 	.word	0x10624dd3

08001e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e042      	b.n	8001ea0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fbe0 	bl	80005f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2224      	movs	r2, #36	; 0x24
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f91d 	bl	800208c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d16d      	bne.n	8001fa4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_UART_Transmit+0x2c>
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e066      	b.n	8001fa6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ee6:	f7fe fcb1 	bl	800084c <HAL_GetTick>
 8001eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f00:	d108      	bne.n	8001f14 <HAL_UART_Transmit+0x6c>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d104      	bne.n	8001f14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	e003      	b.n	8001f1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f1c:	e02a      	b.n	8001f74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2200      	movs	r2, #0
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f840 	bl	8001fae <UART_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e036      	b.n	8001fa6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10b      	bne.n	8001f56 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	3302      	adds	r3, #2
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	e007      	b.n	8001f66 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	3301      	adds	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1cf      	bne.n	8001f1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f810 	bl	8001fae <UART_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e006      	b.n	8001fa6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b090      	sub	sp, #64	; 0x40
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fbe:	e050      	b.n	8002062 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc6:	d04c      	beq.n	8002062 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <UART_WaitOnFlagUntilTimeout+0x30>
 8001fce:	f7fe fc3d 	bl	800084c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d241      	bcs.n	8002062 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	e853 3f00 	ldrex	r3, [r3]
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ffe:	637a      	str	r2, [r7, #52]	; 0x34
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002006:	e841 2300 	strex	r3, r2, [r1]
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1e5      	bne.n	8001fde <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3314      	adds	r3, #20
 8002018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	e853 3f00 	ldrex	r3, [r3]
 8002020:	613b      	str	r3, [r7, #16]
   return(result);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	63bb      	str	r3, [r7, #56]	; 0x38
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3314      	adds	r3, #20
 8002030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002032:	623a      	str	r2, [r7, #32]
 8002034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002036:	69f9      	ldr	r1, [r7, #28]
 8002038:	6a3a      	ldr	r2, [r7, #32]
 800203a:	e841 2300 	strex	r3, r2, [r1]
 800203e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e5      	bne.n	8002012 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e00f      	b.n	8002082 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4013      	ands	r3, r2
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	429a      	cmp	r2, r3
 800207e:	d09f      	beq.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3740      	adds	r7, #64	; 0x40
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020c6:	f023 030c 	bic.w	r3, r3, #12
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2c      	ldr	r2, [pc, #176]	; (80021a0 <UART_SetConfig+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d103      	bne.n	80020fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020f4:	f7ff fe56 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	e002      	b.n	8002102 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020fc:	f7ff fe3e 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8002100:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	009a      	lsls	r2, r3, #2
 800210c:	441a      	add	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <UART_SetConfig+0x118>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	0119      	lsls	r1, r3, #4
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	009a      	lsls	r2, r3, #2
 800212c:	441a      	add	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	fbb2 f2f3 	udiv	r2, r2, r3
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <UART_SetConfig+0x118>)
 800213a:	fba3 0302 	umull	r0, r3, r3, r2
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2064      	movs	r0, #100	; 0x64
 8002142:	fb00 f303 	mul.w	r3, r0, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	3332      	adds	r3, #50	; 0x32
 800214c:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <UART_SetConfig+0x118>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002158:	4419      	add	r1, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	009a      	lsls	r2, r3, #2
 8002164:	441a      	add	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <UART_SetConfig+0x118>)
 8002172:	fba3 0302 	umull	r0, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2064      	movs	r0, #100	; 0x64
 800217a:	fb00 f303 	mul.w	r3, r0, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	3332      	adds	r3, #50	; 0x32
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <UART_SetConfig+0x118>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	f003 020f 	and.w	r2, r3, #15
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	440a      	add	r2, r1
 8002196:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40013800 	.word	0x40013800
 80021a4:	51eb851f 	.word	0x51eb851f

080021a8 <siprintf>:
 80021a8:	b40e      	push	{r1, r2, r3}
 80021aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021ae:	b500      	push	{lr}
 80021b0:	b09c      	sub	sp, #112	; 0x70
 80021b2:	ab1d      	add	r3, sp, #116	; 0x74
 80021b4:	9002      	str	r0, [sp, #8]
 80021b6:	9006      	str	r0, [sp, #24]
 80021b8:	9107      	str	r1, [sp, #28]
 80021ba:	9104      	str	r1, [sp, #16]
 80021bc:	4808      	ldr	r0, [pc, #32]	; (80021e0 <siprintf+0x38>)
 80021be:	4909      	ldr	r1, [pc, #36]	; (80021e4 <siprintf+0x3c>)
 80021c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80021c4:	9105      	str	r1, [sp, #20]
 80021c6:	6800      	ldr	r0, [r0, #0]
 80021c8:	a902      	add	r1, sp, #8
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	f000 f98e 	bl	80024ec <_svfiprintf_r>
 80021d0:	2200      	movs	r2, #0
 80021d2:	9b02      	ldr	r3, [sp, #8]
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	b01c      	add	sp, #112	; 0x70
 80021d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80021dc:	b003      	add	sp, #12
 80021de:	4770      	bx	lr
 80021e0:	20000058 	.word	0x20000058
 80021e4:	ffff0208 	.word	0xffff0208

080021e8 <memset>:
 80021e8:	4603      	mov	r3, r0
 80021ea:	4402      	add	r2, r0
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d100      	bne.n	80021f2 <memset+0xa>
 80021f0:	4770      	bx	lr
 80021f2:	f803 1b01 	strb.w	r1, [r3], #1
 80021f6:	e7f9      	b.n	80021ec <memset+0x4>

080021f8 <__errno>:
 80021f8:	4b01      	ldr	r3, [pc, #4]	; (8002200 <__errno+0x8>)
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000058 	.word	0x20000058

08002204 <__libc_init_array>:
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	2600      	movs	r6, #0
 8002208:	4d0c      	ldr	r5, [pc, #48]	; (800223c <__libc_init_array+0x38>)
 800220a:	4c0d      	ldr	r4, [pc, #52]	; (8002240 <__libc_init_array+0x3c>)
 800220c:	1b64      	subs	r4, r4, r5
 800220e:	10a4      	asrs	r4, r4, #2
 8002210:	42a6      	cmp	r6, r4
 8002212:	d109      	bne.n	8002228 <__libc_init_array+0x24>
 8002214:	f000 fc7a 	bl	8002b0c <_init>
 8002218:	2600      	movs	r6, #0
 800221a:	4d0a      	ldr	r5, [pc, #40]	; (8002244 <__libc_init_array+0x40>)
 800221c:	4c0a      	ldr	r4, [pc, #40]	; (8002248 <__libc_init_array+0x44>)
 800221e:	1b64      	subs	r4, r4, r5
 8002220:	10a4      	asrs	r4, r4, #2
 8002222:	42a6      	cmp	r6, r4
 8002224:	d105      	bne.n	8002232 <__libc_init_array+0x2e>
 8002226:	bd70      	pop	{r4, r5, r6, pc}
 8002228:	f855 3b04 	ldr.w	r3, [r5], #4
 800222c:	4798      	blx	r3
 800222e:	3601      	adds	r6, #1
 8002230:	e7ee      	b.n	8002210 <__libc_init_array+0xc>
 8002232:	f855 3b04 	ldr.w	r3, [r5], #4
 8002236:	4798      	blx	r3
 8002238:	3601      	adds	r6, #1
 800223a:	e7f2      	b.n	8002222 <__libc_init_array+0x1e>
 800223c:	08002bc0 	.word	0x08002bc0
 8002240:	08002bc0 	.word	0x08002bc0
 8002244:	08002bc0 	.word	0x08002bc0
 8002248:	08002bc4 	.word	0x08002bc4

0800224c <__retarget_lock_acquire_recursive>:
 800224c:	4770      	bx	lr

0800224e <__retarget_lock_release_recursive>:
 800224e:	4770      	bx	lr

08002250 <_free_r>:
 8002250:	b538      	push	{r3, r4, r5, lr}
 8002252:	4605      	mov	r5, r0
 8002254:	2900      	cmp	r1, #0
 8002256:	d040      	beq.n	80022da <_free_r+0x8a>
 8002258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800225c:	1f0c      	subs	r4, r1, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	bfb8      	it	lt
 8002262:	18e4      	addlt	r4, r4, r3
 8002264:	f000 f8dc 	bl	8002420 <__malloc_lock>
 8002268:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <_free_r+0x8c>)
 800226a:	6813      	ldr	r3, [r2, #0]
 800226c:	b933      	cbnz	r3, 800227c <_free_r+0x2c>
 800226e:	6063      	str	r3, [r4, #4]
 8002270:	6014      	str	r4, [r2, #0]
 8002272:	4628      	mov	r0, r5
 8002274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002278:	f000 b8d8 	b.w	800242c <__malloc_unlock>
 800227c:	42a3      	cmp	r3, r4
 800227e:	d908      	bls.n	8002292 <_free_r+0x42>
 8002280:	6820      	ldr	r0, [r4, #0]
 8002282:	1821      	adds	r1, r4, r0
 8002284:	428b      	cmp	r3, r1
 8002286:	bf01      	itttt	eq
 8002288:	6819      	ldreq	r1, [r3, #0]
 800228a:	685b      	ldreq	r3, [r3, #4]
 800228c:	1809      	addeq	r1, r1, r0
 800228e:	6021      	streq	r1, [r4, #0]
 8002290:	e7ed      	b.n	800226e <_free_r+0x1e>
 8002292:	461a      	mov	r2, r3
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	b10b      	cbz	r3, 800229c <_free_r+0x4c>
 8002298:	42a3      	cmp	r3, r4
 800229a:	d9fa      	bls.n	8002292 <_free_r+0x42>
 800229c:	6811      	ldr	r1, [r2, #0]
 800229e:	1850      	adds	r0, r2, r1
 80022a0:	42a0      	cmp	r0, r4
 80022a2:	d10b      	bne.n	80022bc <_free_r+0x6c>
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	4401      	add	r1, r0
 80022a8:	1850      	adds	r0, r2, r1
 80022aa:	4283      	cmp	r3, r0
 80022ac:	6011      	str	r1, [r2, #0]
 80022ae:	d1e0      	bne.n	8002272 <_free_r+0x22>
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4408      	add	r0, r1
 80022b6:	6010      	str	r0, [r2, #0]
 80022b8:	6053      	str	r3, [r2, #4]
 80022ba:	e7da      	b.n	8002272 <_free_r+0x22>
 80022bc:	d902      	bls.n	80022c4 <_free_r+0x74>
 80022be:	230c      	movs	r3, #12
 80022c0:	602b      	str	r3, [r5, #0]
 80022c2:	e7d6      	b.n	8002272 <_free_r+0x22>
 80022c4:	6820      	ldr	r0, [r4, #0]
 80022c6:	1821      	adds	r1, r4, r0
 80022c8:	428b      	cmp	r3, r1
 80022ca:	bf01      	itttt	eq
 80022cc:	6819      	ldreq	r1, [r3, #0]
 80022ce:	685b      	ldreq	r3, [r3, #4]
 80022d0:	1809      	addeq	r1, r1, r0
 80022d2:	6021      	streq	r1, [r4, #0]
 80022d4:	6063      	str	r3, [r4, #4]
 80022d6:	6054      	str	r4, [r2, #4]
 80022d8:	e7cb      	b.n	8002272 <_free_r+0x22>
 80022da:	bd38      	pop	{r3, r4, r5, pc}
 80022dc:	20000230 	.word	0x20000230

080022e0 <sbrk_aligned>:
 80022e0:	b570      	push	{r4, r5, r6, lr}
 80022e2:	4e0e      	ldr	r6, [pc, #56]	; (800231c <sbrk_aligned+0x3c>)
 80022e4:	460c      	mov	r4, r1
 80022e6:	6831      	ldr	r1, [r6, #0]
 80022e8:	4605      	mov	r5, r0
 80022ea:	b911      	cbnz	r1, 80022f2 <sbrk_aligned+0x12>
 80022ec:	f000 fbaa 	bl	8002a44 <_sbrk_r>
 80022f0:	6030      	str	r0, [r6, #0]
 80022f2:	4621      	mov	r1, r4
 80022f4:	4628      	mov	r0, r5
 80022f6:	f000 fba5 	bl	8002a44 <_sbrk_r>
 80022fa:	1c43      	adds	r3, r0, #1
 80022fc:	d00a      	beq.n	8002314 <sbrk_aligned+0x34>
 80022fe:	1cc4      	adds	r4, r0, #3
 8002300:	f024 0403 	bic.w	r4, r4, #3
 8002304:	42a0      	cmp	r0, r4
 8002306:	d007      	beq.n	8002318 <sbrk_aligned+0x38>
 8002308:	1a21      	subs	r1, r4, r0
 800230a:	4628      	mov	r0, r5
 800230c:	f000 fb9a 	bl	8002a44 <_sbrk_r>
 8002310:	3001      	adds	r0, #1
 8002312:	d101      	bne.n	8002318 <sbrk_aligned+0x38>
 8002314:	f04f 34ff 	mov.w	r4, #4294967295
 8002318:	4620      	mov	r0, r4
 800231a:	bd70      	pop	{r4, r5, r6, pc}
 800231c:	20000234 	.word	0x20000234

08002320 <_malloc_r>:
 8002320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002324:	1ccd      	adds	r5, r1, #3
 8002326:	f025 0503 	bic.w	r5, r5, #3
 800232a:	3508      	adds	r5, #8
 800232c:	2d0c      	cmp	r5, #12
 800232e:	bf38      	it	cc
 8002330:	250c      	movcc	r5, #12
 8002332:	2d00      	cmp	r5, #0
 8002334:	4607      	mov	r7, r0
 8002336:	db01      	blt.n	800233c <_malloc_r+0x1c>
 8002338:	42a9      	cmp	r1, r5
 800233a:	d905      	bls.n	8002348 <_malloc_r+0x28>
 800233c:	230c      	movs	r3, #12
 800233e:	2600      	movs	r6, #0
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4630      	mov	r0, r6
 8002344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002348:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800241c <_malloc_r+0xfc>
 800234c:	f000 f868 	bl	8002420 <__malloc_lock>
 8002350:	f8d8 3000 	ldr.w	r3, [r8]
 8002354:	461c      	mov	r4, r3
 8002356:	bb5c      	cbnz	r4, 80023b0 <_malloc_r+0x90>
 8002358:	4629      	mov	r1, r5
 800235a:	4638      	mov	r0, r7
 800235c:	f7ff ffc0 	bl	80022e0 <sbrk_aligned>
 8002360:	1c43      	adds	r3, r0, #1
 8002362:	4604      	mov	r4, r0
 8002364:	d155      	bne.n	8002412 <_malloc_r+0xf2>
 8002366:	f8d8 4000 	ldr.w	r4, [r8]
 800236a:	4626      	mov	r6, r4
 800236c:	2e00      	cmp	r6, #0
 800236e:	d145      	bne.n	80023fc <_malloc_r+0xdc>
 8002370:	2c00      	cmp	r4, #0
 8002372:	d048      	beq.n	8002406 <_malloc_r+0xe6>
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	4631      	mov	r1, r6
 8002378:	4638      	mov	r0, r7
 800237a:	eb04 0903 	add.w	r9, r4, r3
 800237e:	f000 fb61 	bl	8002a44 <_sbrk_r>
 8002382:	4581      	cmp	r9, r0
 8002384:	d13f      	bne.n	8002406 <_malloc_r+0xe6>
 8002386:	6821      	ldr	r1, [r4, #0]
 8002388:	4638      	mov	r0, r7
 800238a:	1a6d      	subs	r5, r5, r1
 800238c:	4629      	mov	r1, r5
 800238e:	f7ff ffa7 	bl	80022e0 <sbrk_aligned>
 8002392:	3001      	adds	r0, #1
 8002394:	d037      	beq.n	8002406 <_malloc_r+0xe6>
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	442b      	add	r3, r5
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	f8d8 3000 	ldr.w	r3, [r8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d038      	beq.n	8002416 <_malloc_r+0xf6>
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	42a2      	cmp	r2, r4
 80023a8:	d12b      	bne.n	8002402 <_malloc_r+0xe2>
 80023aa:	2200      	movs	r2, #0
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	e00f      	b.n	80023d0 <_malloc_r+0xb0>
 80023b0:	6822      	ldr	r2, [r4, #0]
 80023b2:	1b52      	subs	r2, r2, r5
 80023b4:	d41f      	bmi.n	80023f6 <_malloc_r+0xd6>
 80023b6:	2a0b      	cmp	r2, #11
 80023b8:	d917      	bls.n	80023ea <_malloc_r+0xca>
 80023ba:	1961      	adds	r1, r4, r5
 80023bc:	42a3      	cmp	r3, r4
 80023be:	6025      	str	r5, [r4, #0]
 80023c0:	bf18      	it	ne
 80023c2:	6059      	strne	r1, [r3, #4]
 80023c4:	6863      	ldr	r3, [r4, #4]
 80023c6:	bf08      	it	eq
 80023c8:	f8c8 1000 	streq.w	r1, [r8]
 80023cc:	5162      	str	r2, [r4, r5]
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	4638      	mov	r0, r7
 80023d2:	f104 060b 	add.w	r6, r4, #11
 80023d6:	f000 f829 	bl	800242c <__malloc_unlock>
 80023da:	f026 0607 	bic.w	r6, r6, #7
 80023de:	1d23      	adds	r3, r4, #4
 80023e0:	1af2      	subs	r2, r6, r3
 80023e2:	d0ae      	beq.n	8002342 <_malloc_r+0x22>
 80023e4:	1b9b      	subs	r3, r3, r6
 80023e6:	50a3      	str	r3, [r4, r2]
 80023e8:	e7ab      	b.n	8002342 <_malloc_r+0x22>
 80023ea:	42a3      	cmp	r3, r4
 80023ec:	6862      	ldr	r2, [r4, #4]
 80023ee:	d1dd      	bne.n	80023ac <_malloc_r+0x8c>
 80023f0:	f8c8 2000 	str.w	r2, [r8]
 80023f4:	e7ec      	b.n	80023d0 <_malloc_r+0xb0>
 80023f6:	4623      	mov	r3, r4
 80023f8:	6864      	ldr	r4, [r4, #4]
 80023fa:	e7ac      	b.n	8002356 <_malloc_r+0x36>
 80023fc:	4634      	mov	r4, r6
 80023fe:	6876      	ldr	r6, [r6, #4]
 8002400:	e7b4      	b.n	800236c <_malloc_r+0x4c>
 8002402:	4613      	mov	r3, r2
 8002404:	e7cc      	b.n	80023a0 <_malloc_r+0x80>
 8002406:	230c      	movs	r3, #12
 8002408:	4638      	mov	r0, r7
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	f000 f80e 	bl	800242c <__malloc_unlock>
 8002410:	e797      	b.n	8002342 <_malloc_r+0x22>
 8002412:	6025      	str	r5, [r4, #0]
 8002414:	e7dc      	b.n	80023d0 <_malloc_r+0xb0>
 8002416:	605b      	str	r3, [r3, #4]
 8002418:	deff      	udf	#255	; 0xff
 800241a:	bf00      	nop
 800241c:	20000230 	.word	0x20000230

08002420 <__malloc_lock>:
 8002420:	4801      	ldr	r0, [pc, #4]	; (8002428 <__malloc_lock+0x8>)
 8002422:	f7ff bf13 	b.w	800224c <__retarget_lock_acquire_recursive>
 8002426:	bf00      	nop
 8002428:	2000022c 	.word	0x2000022c

0800242c <__malloc_unlock>:
 800242c:	4801      	ldr	r0, [pc, #4]	; (8002434 <__malloc_unlock+0x8>)
 800242e:	f7ff bf0e 	b.w	800224e <__retarget_lock_release_recursive>
 8002432:	bf00      	nop
 8002434:	2000022c 	.word	0x2000022c

08002438 <__ssputs_r>:
 8002438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800243c:	461f      	mov	r7, r3
 800243e:	688e      	ldr	r6, [r1, #8]
 8002440:	4682      	mov	sl, r0
 8002442:	42be      	cmp	r6, r7
 8002444:	460c      	mov	r4, r1
 8002446:	4690      	mov	r8, r2
 8002448:	680b      	ldr	r3, [r1, #0]
 800244a:	d82c      	bhi.n	80024a6 <__ssputs_r+0x6e>
 800244c:	898a      	ldrh	r2, [r1, #12]
 800244e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002452:	d026      	beq.n	80024a2 <__ssputs_r+0x6a>
 8002454:	6965      	ldr	r5, [r4, #20]
 8002456:	6909      	ldr	r1, [r1, #16]
 8002458:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800245c:	eba3 0901 	sub.w	r9, r3, r1
 8002460:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002464:	1c7b      	adds	r3, r7, #1
 8002466:	444b      	add	r3, r9
 8002468:	106d      	asrs	r5, r5, #1
 800246a:	429d      	cmp	r5, r3
 800246c:	bf38      	it	cc
 800246e:	461d      	movcc	r5, r3
 8002470:	0553      	lsls	r3, r2, #21
 8002472:	d527      	bpl.n	80024c4 <__ssputs_r+0x8c>
 8002474:	4629      	mov	r1, r5
 8002476:	f7ff ff53 	bl	8002320 <_malloc_r>
 800247a:	4606      	mov	r6, r0
 800247c:	b360      	cbz	r0, 80024d8 <__ssputs_r+0xa0>
 800247e:	464a      	mov	r2, r9
 8002480:	6921      	ldr	r1, [r4, #16]
 8002482:	f000 fafd 	bl	8002a80 <memcpy>
 8002486:	89a3      	ldrh	r3, [r4, #12]
 8002488:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800248c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002490:	81a3      	strh	r3, [r4, #12]
 8002492:	6126      	str	r6, [r4, #16]
 8002494:	444e      	add	r6, r9
 8002496:	6026      	str	r6, [r4, #0]
 8002498:	463e      	mov	r6, r7
 800249a:	6165      	str	r5, [r4, #20]
 800249c:	eba5 0509 	sub.w	r5, r5, r9
 80024a0:	60a5      	str	r5, [r4, #8]
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d900      	bls.n	80024a8 <__ssputs_r+0x70>
 80024a6:	463e      	mov	r6, r7
 80024a8:	4632      	mov	r2, r6
 80024aa:	4641      	mov	r1, r8
 80024ac:	6820      	ldr	r0, [r4, #0]
 80024ae:	f000 faaf 	bl	8002a10 <memmove>
 80024b2:	2000      	movs	r0, #0
 80024b4:	68a3      	ldr	r3, [r4, #8]
 80024b6:	1b9b      	subs	r3, r3, r6
 80024b8:	60a3      	str	r3, [r4, #8]
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	4433      	add	r3, r6
 80024be:	6023      	str	r3, [r4, #0]
 80024c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024c4:	462a      	mov	r2, r5
 80024c6:	f000 fae9 	bl	8002a9c <_realloc_r>
 80024ca:	4606      	mov	r6, r0
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d1e0      	bne.n	8002492 <__ssputs_r+0x5a>
 80024d0:	4650      	mov	r0, sl
 80024d2:	6921      	ldr	r1, [r4, #16]
 80024d4:	f7ff febc 	bl	8002250 <_free_r>
 80024d8:	230c      	movs	r3, #12
 80024da:	f8ca 3000 	str.w	r3, [sl]
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	81a3      	strh	r3, [r4, #12]
 80024ea:	e7e9      	b.n	80024c0 <__ssputs_r+0x88>

080024ec <_svfiprintf_r>:
 80024ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f0:	4698      	mov	r8, r3
 80024f2:	898b      	ldrh	r3, [r1, #12]
 80024f4:	4607      	mov	r7, r0
 80024f6:	061b      	lsls	r3, r3, #24
 80024f8:	460d      	mov	r5, r1
 80024fa:	4614      	mov	r4, r2
 80024fc:	b09d      	sub	sp, #116	; 0x74
 80024fe:	d50e      	bpl.n	800251e <_svfiprintf_r+0x32>
 8002500:	690b      	ldr	r3, [r1, #16]
 8002502:	b963      	cbnz	r3, 800251e <_svfiprintf_r+0x32>
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	f7ff ff0b 	bl	8002320 <_malloc_r>
 800250a:	6028      	str	r0, [r5, #0]
 800250c:	6128      	str	r0, [r5, #16]
 800250e:	b920      	cbnz	r0, 800251a <_svfiprintf_r+0x2e>
 8002510:	230c      	movs	r3, #12
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	e0d0      	b.n	80026bc <_svfiprintf_r+0x1d0>
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	616b      	str	r3, [r5, #20]
 800251e:	2300      	movs	r3, #0
 8002520:	9309      	str	r3, [sp, #36]	; 0x24
 8002522:	2320      	movs	r3, #32
 8002524:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002528:	2330      	movs	r3, #48	; 0x30
 800252a:	f04f 0901 	mov.w	r9, #1
 800252e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002532:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80026d4 <_svfiprintf_r+0x1e8>
 8002536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800253a:	4623      	mov	r3, r4
 800253c:	469a      	mov	sl, r3
 800253e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002542:	b10a      	cbz	r2, 8002548 <_svfiprintf_r+0x5c>
 8002544:	2a25      	cmp	r2, #37	; 0x25
 8002546:	d1f9      	bne.n	800253c <_svfiprintf_r+0x50>
 8002548:	ebba 0b04 	subs.w	fp, sl, r4
 800254c:	d00b      	beq.n	8002566 <_svfiprintf_r+0x7a>
 800254e:	465b      	mov	r3, fp
 8002550:	4622      	mov	r2, r4
 8002552:	4629      	mov	r1, r5
 8002554:	4638      	mov	r0, r7
 8002556:	f7ff ff6f 	bl	8002438 <__ssputs_r>
 800255a:	3001      	adds	r0, #1
 800255c:	f000 80a9 	beq.w	80026b2 <_svfiprintf_r+0x1c6>
 8002560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002562:	445a      	add	r2, fp
 8002564:	9209      	str	r2, [sp, #36]	; 0x24
 8002566:	f89a 3000 	ldrb.w	r3, [sl]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80a1 	beq.w	80026b2 <_svfiprintf_r+0x1c6>
 8002570:	2300      	movs	r3, #0
 8002572:	f04f 32ff 	mov.w	r2, #4294967295
 8002576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800257a:	f10a 0a01 	add.w	sl, sl, #1
 800257e:	9304      	str	r3, [sp, #16]
 8002580:	9307      	str	r3, [sp, #28]
 8002582:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002586:	931a      	str	r3, [sp, #104]	; 0x68
 8002588:	4654      	mov	r4, sl
 800258a:	2205      	movs	r2, #5
 800258c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002590:	4850      	ldr	r0, [pc, #320]	; (80026d4 <_svfiprintf_r+0x1e8>)
 8002592:	f000 fa67 	bl	8002a64 <memchr>
 8002596:	9a04      	ldr	r2, [sp, #16]
 8002598:	b9d8      	cbnz	r0, 80025d2 <_svfiprintf_r+0xe6>
 800259a:	06d0      	lsls	r0, r2, #27
 800259c:	bf44      	itt	mi
 800259e:	2320      	movmi	r3, #32
 80025a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025a4:	0711      	lsls	r1, r2, #28
 80025a6:	bf44      	itt	mi
 80025a8:	232b      	movmi	r3, #43	; 0x2b
 80025aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025ae:	f89a 3000 	ldrb.w	r3, [sl]
 80025b2:	2b2a      	cmp	r3, #42	; 0x2a
 80025b4:	d015      	beq.n	80025e2 <_svfiprintf_r+0xf6>
 80025b6:	4654      	mov	r4, sl
 80025b8:	2000      	movs	r0, #0
 80025ba:	f04f 0c0a 	mov.w	ip, #10
 80025be:	9a07      	ldr	r2, [sp, #28]
 80025c0:	4621      	mov	r1, r4
 80025c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025c6:	3b30      	subs	r3, #48	; 0x30
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	d94d      	bls.n	8002668 <_svfiprintf_r+0x17c>
 80025cc:	b1b0      	cbz	r0, 80025fc <_svfiprintf_r+0x110>
 80025ce:	9207      	str	r2, [sp, #28]
 80025d0:	e014      	b.n	80025fc <_svfiprintf_r+0x110>
 80025d2:	eba0 0308 	sub.w	r3, r0, r8
 80025d6:	fa09 f303 	lsl.w	r3, r9, r3
 80025da:	4313      	orrs	r3, r2
 80025dc:	46a2      	mov	sl, r4
 80025de:	9304      	str	r3, [sp, #16]
 80025e0:	e7d2      	b.n	8002588 <_svfiprintf_r+0x9c>
 80025e2:	9b03      	ldr	r3, [sp, #12]
 80025e4:	1d19      	adds	r1, r3, #4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	9103      	str	r1, [sp, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bfbb      	ittet	lt
 80025ee:	425b      	neglt	r3, r3
 80025f0:	f042 0202 	orrlt.w	r2, r2, #2
 80025f4:	9307      	strge	r3, [sp, #28]
 80025f6:	9307      	strlt	r3, [sp, #28]
 80025f8:	bfb8      	it	lt
 80025fa:	9204      	strlt	r2, [sp, #16]
 80025fc:	7823      	ldrb	r3, [r4, #0]
 80025fe:	2b2e      	cmp	r3, #46	; 0x2e
 8002600:	d10c      	bne.n	800261c <_svfiprintf_r+0x130>
 8002602:	7863      	ldrb	r3, [r4, #1]
 8002604:	2b2a      	cmp	r3, #42	; 0x2a
 8002606:	d134      	bne.n	8002672 <_svfiprintf_r+0x186>
 8002608:	9b03      	ldr	r3, [sp, #12]
 800260a:	3402      	adds	r4, #2
 800260c:	1d1a      	adds	r2, r3, #4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	9203      	str	r2, [sp, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	bfb8      	it	lt
 8002616:	f04f 33ff 	movlt.w	r3, #4294967295
 800261a:	9305      	str	r3, [sp, #20]
 800261c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80026d8 <_svfiprintf_r+0x1ec>
 8002620:	2203      	movs	r2, #3
 8002622:	4650      	mov	r0, sl
 8002624:	7821      	ldrb	r1, [r4, #0]
 8002626:	f000 fa1d 	bl	8002a64 <memchr>
 800262a:	b138      	cbz	r0, 800263c <_svfiprintf_r+0x150>
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	9b04      	ldr	r3, [sp, #16]
 8002630:	eba0 000a 	sub.w	r0, r0, sl
 8002634:	4082      	lsls	r2, r0
 8002636:	4313      	orrs	r3, r2
 8002638:	3401      	adds	r4, #1
 800263a:	9304      	str	r3, [sp, #16]
 800263c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002640:	2206      	movs	r2, #6
 8002642:	4826      	ldr	r0, [pc, #152]	; (80026dc <_svfiprintf_r+0x1f0>)
 8002644:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002648:	f000 fa0c 	bl	8002a64 <memchr>
 800264c:	2800      	cmp	r0, #0
 800264e:	d038      	beq.n	80026c2 <_svfiprintf_r+0x1d6>
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <_svfiprintf_r+0x1f4>)
 8002652:	bb1b      	cbnz	r3, 800269c <_svfiprintf_r+0x1b0>
 8002654:	9b03      	ldr	r3, [sp, #12]
 8002656:	3307      	adds	r3, #7
 8002658:	f023 0307 	bic.w	r3, r3, #7
 800265c:	3308      	adds	r3, #8
 800265e:	9303      	str	r3, [sp, #12]
 8002660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002662:	4433      	add	r3, r6
 8002664:	9309      	str	r3, [sp, #36]	; 0x24
 8002666:	e768      	b.n	800253a <_svfiprintf_r+0x4e>
 8002668:	460c      	mov	r4, r1
 800266a:	2001      	movs	r0, #1
 800266c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002670:	e7a6      	b.n	80025c0 <_svfiprintf_r+0xd4>
 8002672:	2300      	movs	r3, #0
 8002674:	f04f 0c0a 	mov.w	ip, #10
 8002678:	4619      	mov	r1, r3
 800267a:	3401      	adds	r4, #1
 800267c:	9305      	str	r3, [sp, #20]
 800267e:	4620      	mov	r0, r4
 8002680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002684:	3a30      	subs	r2, #48	; 0x30
 8002686:	2a09      	cmp	r2, #9
 8002688:	d903      	bls.n	8002692 <_svfiprintf_r+0x1a6>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0c6      	beq.n	800261c <_svfiprintf_r+0x130>
 800268e:	9105      	str	r1, [sp, #20]
 8002690:	e7c4      	b.n	800261c <_svfiprintf_r+0x130>
 8002692:	4604      	mov	r4, r0
 8002694:	2301      	movs	r3, #1
 8002696:	fb0c 2101 	mla	r1, ip, r1, r2
 800269a:	e7f0      	b.n	800267e <_svfiprintf_r+0x192>
 800269c:	ab03      	add	r3, sp, #12
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	462a      	mov	r2, r5
 80026a2:	4638      	mov	r0, r7
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <_svfiprintf_r+0x1f8>)
 80026a6:	a904      	add	r1, sp, #16
 80026a8:	f3af 8000 	nop.w
 80026ac:	1c42      	adds	r2, r0, #1
 80026ae:	4606      	mov	r6, r0
 80026b0:	d1d6      	bne.n	8002660 <_svfiprintf_r+0x174>
 80026b2:	89ab      	ldrh	r3, [r5, #12]
 80026b4:	065b      	lsls	r3, r3, #25
 80026b6:	f53f af2d 	bmi.w	8002514 <_svfiprintf_r+0x28>
 80026ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026bc:	b01d      	add	sp, #116	; 0x74
 80026be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026c2:	ab03      	add	r3, sp, #12
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	462a      	mov	r2, r5
 80026c8:	4638      	mov	r0, r7
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <_svfiprintf_r+0x1f8>)
 80026cc:	a904      	add	r1, sp, #16
 80026ce:	f000 f87d 	bl	80027cc <_printf_i>
 80026d2:	e7eb      	b.n	80026ac <_svfiprintf_r+0x1c0>
 80026d4:	08002b8a 	.word	0x08002b8a
 80026d8:	08002b90 	.word	0x08002b90
 80026dc:	08002b94 	.word	0x08002b94
 80026e0:	00000000 	.word	0x00000000
 80026e4:	08002439 	.word	0x08002439

080026e8 <_printf_common>:
 80026e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026ec:	4616      	mov	r6, r2
 80026ee:	4699      	mov	r9, r3
 80026f0:	688a      	ldr	r2, [r1, #8]
 80026f2:	690b      	ldr	r3, [r1, #16]
 80026f4:	4607      	mov	r7, r0
 80026f6:	4293      	cmp	r3, r2
 80026f8:	bfb8      	it	lt
 80026fa:	4613      	movlt	r3, r2
 80026fc:	6033      	str	r3, [r6, #0]
 80026fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002702:	460c      	mov	r4, r1
 8002704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002708:	b10a      	cbz	r2, 800270e <_printf_common+0x26>
 800270a:	3301      	adds	r3, #1
 800270c:	6033      	str	r3, [r6, #0]
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	0699      	lsls	r1, r3, #26
 8002712:	bf42      	ittt	mi
 8002714:	6833      	ldrmi	r3, [r6, #0]
 8002716:	3302      	addmi	r3, #2
 8002718:	6033      	strmi	r3, [r6, #0]
 800271a:	6825      	ldr	r5, [r4, #0]
 800271c:	f015 0506 	ands.w	r5, r5, #6
 8002720:	d106      	bne.n	8002730 <_printf_common+0x48>
 8002722:	f104 0a19 	add.w	sl, r4, #25
 8002726:	68e3      	ldr	r3, [r4, #12]
 8002728:	6832      	ldr	r2, [r6, #0]
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	42ab      	cmp	r3, r5
 800272e:	dc2b      	bgt.n	8002788 <_printf_common+0xa0>
 8002730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002734:	1e13      	subs	r3, r2, #0
 8002736:	6822      	ldr	r2, [r4, #0]
 8002738:	bf18      	it	ne
 800273a:	2301      	movne	r3, #1
 800273c:	0692      	lsls	r2, r2, #26
 800273e:	d430      	bmi.n	80027a2 <_printf_common+0xba>
 8002740:	4649      	mov	r1, r9
 8002742:	4638      	mov	r0, r7
 8002744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002748:	47c0      	blx	r8
 800274a:	3001      	adds	r0, #1
 800274c:	d023      	beq.n	8002796 <_printf_common+0xae>
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	6922      	ldr	r2, [r4, #16]
 8002752:	f003 0306 	and.w	r3, r3, #6
 8002756:	2b04      	cmp	r3, #4
 8002758:	bf14      	ite	ne
 800275a:	2500      	movne	r5, #0
 800275c:	6833      	ldreq	r3, [r6, #0]
 800275e:	f04f 0600 	mov.w	r6, #0
 8002762:	bf08      	it	eq
 8002764:	68e5      	ldreq	r5, [r4, #12]
 8002766:	f104 041a 	add.w	r4, r4, #26
 800276a:	bf08      	it	eq
 800276c:	1aed      	subeq	r5, r5, r3
 800276e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002772:	bf08      	it	eq
 8002774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002778:	4293      	cmp	r3, r2
 800277a:	bfc4      	itt	gt
 800277c:	1a9b      	subgt	r3, r3, r2
 800277e:	18ed      	addgt	r5, r5, r3
 8002780:	42b5      	cmp	r5, r6
 8002782:	d11a      	bne.n	80027ba <_printf_common+0xd2>
 8002784:	2000      	movs	r0, #0
 8002786:	e008      	b.n	800279a <_printf_common+0xb2>
 8002788:	2301      	movs	r3, #1
 800278a:	4652      	mov	r2, sl
 800278c:	4649      	mov	r1, r9
 800278e:	4638      	mov	r0, r7
 8002790:	47c0      	blx	r8
 8002792:	3001      	adds	r0, #1
 8002794:	d103      	bne.n	800279e <_printf_common+0xb6>
 8002796:	f04f 30ff 	mov.w	r0, #4294967295
 800279a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800279e:	3501      	adds	r5, #1
 80027a0:	e7c1      	b.n	8002726 <_printf_common+0x3e>
 80027a2:	2030      	movs	r0, #48	; 0x30
 80027a4:	18e1      	adds	r1, r4, r3
 80027a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027b0:	4422      	add	r2, r4
 80027b2:	3302      	adds	r3, #2
 80027b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027b8:	e7c2      	b.n	8002740 <_printf_common+0x58>
 80027ba:	2301      	movs	r3, #1
 80027bc:	4622      	mov	r2, r4
 80027be:	4649      	mov	r1, r9
 80027c0:	4638      	mov	r0, r7
 80027c2:	47c0      	blx	r8
 80027c4:	3001      	adds	r0, #1
 80027c6:	d0e6      	beq.n	8002796 <_printf_common+0xae>
 80027c8:	3601      	adds	r6, #1
 80027ca:	e7d9      	b.n	8002780 <_printf_common+0x98>

080027cc <_printf_i>:
 80027cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027d0:	7e0f      	ldrb	r7, [r1, #24]
 80027d2:	4691      	mov	r9, r2
 80027d4:	2f78      	cmp	r7, #120	; 0x78
 80027d6:	4680      	mov	r8, r0
 80027d8:	460c      	mov	r4, r1
 80027da:	469a      	mov	sl, r3
 80027dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80027de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80027e2:	d807      	bhi.n	80027f4 <_printf_i+0x28>
 80027e4:	2f62      	cmp	r7, #98	; 0x62
 80027e6:	d80a      	bhi.n	80027fe <_printf_i+0x32>
 80027e8:	2f00      	cmp	r7, #0
 80027ea:	f000 80d5 	beq.w	8002998 <_printf_i+0x1cc>
 80027ee:	2f58      	cmp	r7, #88	; 0x58
 80027f0:	f000 80c1 	beq.w	8002976 <_printf_i+0x1aa>
 80027f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80027fc:	e03a      	b.n	8002874 <_printf_i+0xa8>
 80027fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002802:	2b15      	cmp	r3, #21
 8002804:	d8f6      	bhi.n	80027f4 <_printf_i+0x28>
 8002806:	a101      	add	r1, pc, #4	; (adr r1, 800280c <_printf_i+0x40>)
 8002808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800280c:	08002865 	.word	0x08002865
 8002810:	08002879 	.word	0x08002879
 8002814:	080027f5 	.word	0x080027f5
 8002818:	080027f5 	.word	0x080027f5
 800281c:	080027f5 	.word	0x080027f5
 8002820:	080027f5 	.word	0x080027f5
 8002824:	08002879 	.word	0x08002879
 8002828:	080027f5 	.word	0x080027f5
 800282c:	080027f5 	.word	0x080027f5
 8002830:	080027f5 	.word	0x080027f5
 8002834:	080027f5 	.word	0x080027f5
 8002838:	0800297f 	.word	0x0800297f
 800283c:	080028a5 	.word	0x080028a5
 8002840:	08002939 	.word	0x08002939
 8002844:	080027f5 	.word	0x080027f5
 8002848:	080027f5 	.word	0x080027f5
 800284c:	080029a1 	.word	0x080029a1
 8002850:	080027f5 	.word	0x080027f5
 8002854:	080028a5 	.word	0x080028a5
 8002858:	080027f5 	.word	0x080027f5
 800285c:	080027f5 	.word	0x080027f5
 8002860:	08002941 	.word	0x08002941
 8002864:	682b      	ldr	r3, [r5, #0]
 8002866:	1d1a      	adds	r2, r3, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	602a      	str	r2, [r5, #0]
 800286c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002874:	2301      	movs	r3, #1
 8002876:	e0a0      	b.n	80029ba <_printf_i+0x1ee>
 8002878:	6820      	ldr	r0, [r4, #0]
 800287a:	682b      	ldr	r3, [r5, #0]
 800287c:	0607      	lsls	r7, r0, #24
 800287e:	f103 0104 	add.w	r1, r3, #4
 8002882:	6029      	str	r1, [r5, #0]
 8002884:	d501      	bpl.n	800288a <_printf_i+0xbe>
 8002886:	681e      	ldr	r6, [r3, #0]
 8002888:	e003      	b.n	8002892 <_printf_i+0xc6>
 800288a:	0646      	lsls	r6, r0, #25
 800288c:	d5fb      	bpl.n	8002886 <_printf_i+0xba>
 800288e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002892:	2e00      	cmp	r6, #0
 8002894:	da03      	bge.n	800289e <_printf_i+0xd2>
 8002896:	232d      	movs	r3, #45	; 0x2d
 8002898:	4276      	negs	r6, r6
 800289a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800289e:	230a      	movs	r3, #10
 80028a0:	4859      	ldr	r0, [pc, #356]	; (8002a08 <_printf_i+0x23c>)
 80028a2:	e012      	b.n	80028ca <_printf_i+0xfe>
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	6820      	ldr	r0, [r4, #0]
 80028a8:	1d19      	adds	r1, r3, #4
 80028aa:	6029      	str	r1, [r5, #0]
 80028ac:	0605      	lsls	r5, r0, #24
 80028ae:	d501      	bpl.n	80028b4 <_printf_i+0xe8>
 80028b0:	681e      	ldr	r6, [r3, #0]
 80028b2:	e002      	b.n	80028ba <_printf_i+0xee>
 80028b4:	0641      	lsls	r1, r0, #25
 80028b6:	d5fb      	bpl.n	80028b0 <_printf_i+0xe4>
 80028b8:	881e      	ldrh	r6, [r3, #0]
 80028ba:	2f6f      	cmp	r7, #111	; 0x6f
 80028bc:	bf0c      	ite	eq
 80028be:	2308      	moveq	r3, #8
 80028c0:	230a      	movne	r3, #10
 80028c2:	4851      	ldr	r0, [pc, #324]	; (8002a08 <_printf_i+0x23c>)
 80028c4:	2100      	movs	r1, #0
 80028c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028ca:	6865      	ldr	r5, [r4, #4]
 80028cc:	2d00      	cmp	r5, #0
 80028ce:	bfa8      	it	ge
 80028d0:	6821      	ldrge	r1, [r4, #0]
 80028d2:	60a5      	str	r5, [r4, #8]
 80028d4:	bfa4      	itt	ge
 80028d6:	f021 0104 	bicge.w	r1, r1, #4
 80028da:	6021      	strge	r1, [r4, #0]
 80028dc:	b90e      	cbnz	r6, 80028e2 <_printf_i+0x116>
 80028de:	2d00      	cmp	r5, #0
 80028e0:	d04b      	beq.n	800297a <_printf_i+0x1ae>
 80028e2:	4615      	mov	r5, r2
 80028e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80028e8:	fb03 6711 	mls	r7, r3, r1, r6
 80028ec:	5dc7      	ldrb	r7, [r0, r7]
 80028ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80028f2:	4637      	mov	r7, r6
 80028f4:	42bb      	cmp	r3, r7
 80028f6:	460e      	mov	r6, r1
 80028f8:	d9f4      	bls.n	80028e4 <_printf_i+0x118>
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d10b      	bne.n	8002916 <_printf_i+0x14a>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	07de      	lsls	r6, r3, #31
 8002902:	d508      	bpl.n	8002916 <_printf_i+0x14a>
 8002904:	6923      	ldr	r3, [r4, #16]
 8002906:	6861      	ldr	r1, [r4, #4]
 8002908:	4299      	cmp	r1, r3
 800290a:	bfde      	ittt	le
 800290c:	2330      	movle	r3, #48	; 0x30
 800290e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002912:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002916:	1b52      	subs	r2, r2, r5
 8002918:	6122      	str	r2, [r4, #16]
 800291a:	464b      	mov	r3, r9
 800291c:	4621      	mov	r1, r4
 800291e:	4640      	mov	r0, r8
 8002920:	f8cd a000 	str.w	sl, [sp]
 8002924:	aa03      	add	r2, sp, #12
 8002926:	f7ff fedf 	bl	80026e8 <_printf_common>
 800292a:	3001      	adds	r0, #1
 800292c:	d14a      	bne.n	80029c4 <_printf_i+0x1f8>
 800292e:	f04f 30ff 	mov.w	r0, #4294967295
 8002932:	b004      	add	sp, #16
 8002934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	f043 0320 	orr.w	r3, r3, #32
 800293e:	6023      	str	r3, [r4, #0]
 8002940:	2778      	movs	r7, #120	; 0x78
 8002942:	4832      	ldr	r0, [pc, #200]	; (8002a0c <_printf_i+0x240>)
 8002944:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	6829      	ldr	r1, [r5, #0]
 800294c:	061f      	lsls	r7, r3, #24
 800294e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002952:	d402      	bmi.n	800295a <_printf_i+0x18e>
 8002954:	065f      	lsls	r7, r3, #25
 8002956:	bf48      	it	mi
 8002958:	b2b6      	uxthmi	r6, r6
 800295a:	07df      	lsls	r7, r3, #31
 800295c:	bf48      	it	mi
 800295e:	f043 0320 	orrmi.w	r3, r3, #32
 8002962:	6029      	str	r1, [r5, #0]
 8002964:	bf48      	it	mi
 8002966:	6023      	strmi	r3, [r4, #0]
 8002968:	b91e      	cbnz	r6, 8002972 <_printf_i+0x1a6>
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	f023 0320 	bic.w	r3, r3, #32
 8002970:	6023      	str	r3, [r4, #0]
 8002972:	2310      	movs	r3, #16
 8002974:	e7a6      	b.n	80028c4 <_printf_i+0xf8>
 8002976:	4824      	ldr	r0, [pc, #144]	; (8002a08 <_printf_i+0x23c>)
 8002978:	e7e4      	b.n	8002944 <_printf_i+0x178>
 800297a:	4615      	mov	r5, r2
 800297c:	e7bd      	b.n	80028fa <_printf_i+0x12e>
 800297e:	682b      	ldr	r3, [r5, #0]
 8002980:	6826      	ldr	r6, [r4, #0]
 8002982:	1d18      	adds	r0, r3, #4
 8002984:	6961      	ldr	r1, [r4, #20]
 8002986:	6028      	str	r0, [r5, #0]
 8002988:	0635      	lsls	r5, r6, #24
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	d501      	bpl.n	8002992 <_printf_i+0x1c6>
 800298e:	6019      	str	r1, [r3, #0]
 8002990:	e002      	b.n	8002998 <_printf_i+0x1cc>
 8002992:	0670      	lsls	r0, r6, #25
 8002994:	d5fb      	bpl.n	800298e <_printf_i+0x1c2>
 8002996:	8019      	strh	r1, [r3, #0]
 8002998:	2300      	movs	r3, #0
 800299a:	4615      	mov	r5, r2
 800299c:	6123      	str	r3, [r4, #16]
 800299e:	e7bc      	b.n	800291a <_printf_i+0x14e>
 80029a0:	682b      	ldr	r3, [r5, #0]
 80029a2:	2100      	movs	r1, #0
 80029a4:	1d1a      	adds	r2, r3, #4
 80029a6:	602a      	str	r2, [r5, #0]
 80029a8:	681d      	ldr	r5, [r3, #0]
 80029aa:	6862      	ldr	r2, [r4, #4]
 80029ac:	4628      	mov	r0, r5
 80029ae:	f000 f859 	bl	8002a64 <memchr>
 80029b2:	b108      	cbz	r0, 80029b8 <_printf_i+0x1ec>
 80029b4:	1b40      	subs	r0, r0, r5
 80029b6:	6060      	str	r0, [r4, #4]
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	6123      	str	r3, [r4, #16]
 80029bc:	2300      	movs	r3, #0
 80029be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029c2:	e7aa      	b.n	800291a <_printf_i+0x14e>
 80029c4:	462a      	mov	r2, r5
 80029c6:	4649      	mov	r1, r9
 80029c8:	4640      	mov	r0, r8
 80029ca:	6923      	ldr	r3, [r4, #16]
 80029cc:	47d0      	blx	sl
 80029ce:	3001      	adds	r0, #1
 80029d0:	d0ad      	beq.n	800292e <_printf_i+0x162>
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	079b      	lsls	r3, r3, #30
 80029d6:	d413      	bmi.n	8002a00 <_printf_i+0x234>
 80029d8:	68e0      	ldr	r0, [r4, #12]
 80029da:	9b03      	ldr	r3, [sp, #12]
 80029dc:	4298      	cmp	r0, r3
 80029de:	bfb8      	it	lt
 80029e0:	4618      	movlt	r0, r3
 80029e2:	e7a6      	b.n	8002932 <_printf_i+0x166>
 80029e4:	2301      	movs	r3, #1
 80029e6:	4632      	mov	r2, r6
 80029e8:	4649      	mov	r1, r9
 80029ea:	4640      	mov	r0, r8
 80029ec:	47d0      	blx	sl
 80029ee:	3001      	adds	r0, #1
 80029f0:	d09d      	beq.n	800292e <_printf_i+0x162>
 80029f2:	3501      	adds	r5, #1
 80029f4:	68e3      	ldr	r3, [r4, #12]
 80029f6:	9903      	ldr	r1, [sp, #12]
 80029f8:	1a5b      	subs	r3, r3, r1
 80029fa:	42ab      	cmp	r3, r5
 80029fc:	dcf2      	bgt.n	80029e4 <_printf_i+0x218>
 80029fe:	e7eb      	b.n	80029d8 <_printf_i+0x20c>
 8002a00:	2500      	movs	r5, #0
 8002a02:	f104 0619 	add.w	r6, r4, #25
 8002a06:	e7f5      	b.n	80029f4 <_printf_i+0x228>
 8002a08:	08002b9b 	.word	0x08002b9b
 8002a0c:	08002bac 	.word	0x08002bac

08002a10 <memmove>:
 8002a10:	4288      	cmp	r0, r1
 8002a12:	b510      	push	{r4, lr}
 8002a14:	eb01 0402 	add.w	r4, r1, r2
 8002a18:	d902      	bls.n	8002a20 <memmove+0x10>
 8002a1a:	4284      	cmp	r4, r0
 8002a1c:	4623      	mov	r3, r4
 8002a1e:	d807      	bhi.n	8002a30 <memmove+0x20>
 8002a20:	1e43      	subs	r3, r0, #1
 8002a22:	42a1      	cmp	r1, r4
 8002a24:	d008      	beq.n	8002a38 <memmove+0x28>
 8002a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a2e:	e7f8      	b.n	8002a22 <memmove+0x12>
 8002a30:	4601      	mov	r1, r0
 8002a32:	4402      	add	r2, r0
 8002a34:	428a      	cmp	r2, r1
 8002a36:	d100      	bne.n	8002a3a <memmove+0x2a>
 8002a38:	bd10      	pop	{r4, pc}
 8002a3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a42:	e7f7      	b.n	8002a34 <memmove+0x24>

08002a44 <_sbrk_r>:
 8002a44:	b538      	push	{r3, r4, r5, lr}
 8002a46:	2300      	movs	r3, #0
 8002a48:	4d05      	ldr	r5, [pc, #20]	; (8002a60 <_sbrk_r+0x1c>)
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	602b      	str	r3, [r5, #0]
 8002a50:	f7fd fe42 	bl	80006d8 <_sbrk>
 8002a54:	1c43      	adds	r3, r0, #1
 8002a56:	d102      	bne.n	8002a5e <_sbrk_r+0x1a>
 8002a58:	682b      	ldr	r3, [r5, #0]
 8002a5a:	b103      	cbz	r3, 8002a5e <_sbrk_r+0x1a>
 8002a5c:	6023      	str	r3, [r4, #0]
 8002a5e:	bd38      	pop	{r3, r4, r5, pc}
 8002a60:	20000228 	.word	0x20000228

08002a64 <memchr>:
 8002a64:	4603      	mov	r3, r0
 8002a66:	b510      	push	{r4, lr}
 8002a68:	b2c9      	uxtb	r1, r1
 8002a6a:	4402      	add	r2, r0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	d101      	bne.n	8002a76 <memchr+0x12>
 8002a72:	2000      	movs	r0, #0
 8002a74:	e003      	b.n	8002a7e <memchr+0x1a>
 8002a76:	7804      	ldrb	r4, [r0, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	428c      	cmp	r4, r1
 8002a7c:	d1f6      	bne.n	8002a6c <memchr+0x8>
 8002a7e:	bd10      	pop	{r4, pc}

08002a80 <memcpy>:
 8002a80:	440a      	add	r2, r1
 8002a82:	4291      	cmp	r1, r2
 8002a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a88:	d100      	bne.n	8002a8c <memcpy+0xc>
 8002a8a:	4770      	bx	lr
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a92:	4291      	cmp	r1, r2
 8002a94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a98:	d1f9      	bne.n	8002a8e <memcpy+0xe>
 8002a9a:	bd10      	pop	{r4, pc}

08002a9c <_realloc_r>:
 8002a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa0:	4680      	mov	r8, r0
 8002aa2:	4614      	mov	r4, r2
 8002aa4:	460e      	mov	r6, r1
 8002aa6:	b921      	cbnz	r1, 8002ab2 <_realloc_r+0x16>
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aae:	f7ff bc37 	b.w	8002320 <_malloc_r>
 8002ab2:	b92a      	cbnz	r2, 8002ac0 <_realloc_r+0x24>
 8002ab4:	f7ff fbcc 	bl	8002250 <_free_r>
 8002ab8:	4625      	mov	r5, r4
 8002aba:	4628      	mov	r0, r5
 8002abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ac0:	f000 f81b 	bl	8002afa <_malloc_usable_size_r>
 8002ac4:	4284      	cmp	r4, r0
 8002ac6:	4607      	mov	r7, r0
 8002ac8:	d802      	bhi.n	8002ad0 <_realloc_r+0x34>
 8002aca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002ace:	d812      	bhi.n	8002af6 <_realloc_r+0x5a>
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	4640      	mov	r0, r8
 8002ad4:	f7ff fc24 	bl	8002320 <_malloc_r>
 8002ad8:	4605      	mov	r5, r0
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d0ed      	beq.n	8002aba <_realloc_r+0x1e>
 8002ade:	42bc      	cmp	r4, r7
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	4631      	mov	r1, r6
 8002ae4:	bf28      	it	cs
 8002ae6:	463a      	movcs	r2, r7
 8002ae8:	f7ff ffca 	bl	8002a80 <memcpy>
 8002aec:	4631      	mov	r1, r6
 8002aee:	4640      	mov	r0, r8
 8002af0:	f7ff fbae 	bl	8002250 <_free_r>
 8002af4:	e7e1      	b.n	8002aba <_realloc_r+0x1e>
 8002af6:	4635      	mov	r5, r6
 8002af8:	e7df      	b.n	8002aba <_realloc_r+0x1e>

08002afa <_malloc_usable_size_r>:
 8002afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002afe:	1f18      	subs	r0, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bfbc      	itt	lt
 8002b04:	580b      	ldrlt	r3, [r1, r0]
 8002b06:	18c0      	addlt	r0, r0, r3
 8002b08:	4770      	bx	lr
	...

08002b0c <_init>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr

08002b18 <_fini>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr
